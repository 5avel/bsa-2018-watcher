// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180827093501_AddedEmailForNotificationsFieldToUserEntity")]
    partial class AddedEmailForNotificationsFieldToUserEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source2", Threshold = 16, Type = 2 },
                        new { Id = 102, DashboardId = 94, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 61, Type = 2 },
                        new { Id = 103, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source2", Threshold = 38, Type = 2 },
                        new { Id = 104, DashboardId = 98, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 79, Type = 1 },
                        new { Id = 105, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 91, Type = 1 },
                        new { Id = 106, DashboardId = 97, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 99, Type = 1 },
                        new { Id = 107, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 4, Type = 1 },
                        new { Id = 108, DashboardId = 94, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source3", Threshold = 70, Type = 1 },
                        new { Id = 109, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source1", Threshold = 92, Type = 1 },
                        new { Id = 110, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 65, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", Name = "aut", Type = 0 },
                        new { Id = 22, CreatedById = "d274933f-0df6-4ce1-860f-29ba557430f5", Name = "ratione", Type = 0 },
                        new { Id = 23, CreatedById = "5504b109-e452-447b-97d1-a4812ac6e83e", Name = "eaque", Type = 0 },
                        new { Id = 24, CreatedById = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", Name = "eligendi", Type = 0 },
                        new { Id = 25, CreatedById = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", Name = "necessitatibus", Type = 0 },
                        new { Id = 26, CreatedById = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", Name = "voluptatem", Type = 0 },
                        new { Id = 27, CreatedById = "d274933f-0df6-4ce1-860f-29ba557430f5", Name = "dolor", Type = 0 },
                        new { Id = 28, CreatedById = "11d76c7c-c316-4694-80a0-8bc2810e1224", Name = "nihil", Type = 0 },
                        new { Id = 29, CreatedById = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", Name = "dolor", Type = 0 },
                        new { Id = 30, CreatedById = "d274933f-0df6-4ce1-860f-29ba557430f5", Name = "fuga", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 27, 11, 37, 38, 527, DateTimeKind.Local), InstanceId = 83, Title = "Title116" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 27, 2, 31, 18, 371, DateTimeKind.Local), InstanceId = 85, Title = "Title186" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 27, 2, 5, 15, 337, DateTimeKind.Local), InstanceId = 82, Title = "Title644" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 26, 19, 29, 52, 955, DateTimeKind.Local), InstanceId = 86, Title = "Title555" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 26, 17, 55, 50, 791, DateTimeKind.Local), InstanceId = 90, Title = "Title29" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 27, 4, 1, 7, 847, DateTimeKind.Local), InstanceId = 86, Title = "Title2" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 26, 18, 33, 40, 566, DateTimeKind.Local), InstanceId = 87, Title = "Title446" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 27, 12, 0, 45, 355, DateTimeKind.Local), InstanceId = 82, Title = "Title98" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 27, 6, 54, 13, 125, DateTimeKind.Local), InstanceId = 86, Title = "Title611" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 27, 8, 46, 47, 434, DateTimeKind.Local), InstanceId = 88, Title = "Title443" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 26, 12, 55, 32, 550, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Non laudantium et ipsum labore.", UserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 26, 16, 51, 3, 229, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Rerum reiciendis veritatis ut eum itaque.", UserId = "97778277-833d-4bba-bc08-96216119b974", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 27, 8, 56, 8, 443, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Inventore dolorum error vel.", UserId = "b09e040a-1384-4abb-bcb5-e32a9e812f40", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 26, 16, 59, 31, 499, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Voluptatem est ut sunt laborum.", UserId = "5504b109-e452-447b-97d1-a4812ac6e83e", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 27, 1, 12, 34, 73, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Cupiditate et quasi.", UserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 26, 16, 49, 9, 397, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Culpa magnam voluptatem qui.", UserId = "11d76c7c-c316-4694-80a0-8bc2810e1224", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 26, 17, 55, 49, 922, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nam nostrum nam pariatur sit libero incidunt architecto maiores odio.", UserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 26, 15, 46, 21, 73, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Sit deserunt dignissimos similique aut et rem ipsa maxime molestiae.", UserId = "97778277-833d-4bba-bc08-96216119b974", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 27, 0, 52, 10, 701, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Sit voluptatum consequatur velit libero voluptas assumenda qui.", UserId = "97778277-833d-4bba-bc08-96216119b974", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 27, 7, 32, 41, 421, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Et deserunt voluptatem ad earum sed laudantium nostrum et tempore.", UserId = "8486e755-b481-4eff-be21-9d95556987d1", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "8b:73:29:8f:db:a4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Linux", Title = "Instance830" },
                        new { Id = 82, Address = "c8:9e:b5:4e:36:5a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Windows", Title = "Instance333" },
                        new { Id = 83, Address = "a4:4a:17:28:e7:6e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 78, Platform = "Windows", Title = "Instance856" },
                        new { Id = 84, Address = "29:25:96:ce:e7:f9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 72, Platform = "Linux", Title = "Instance504" },
                        new { Id = 85, Address = "02:69:f0:71:ad:46", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 71, Platform = "Linux", Title = "Instance828" },
                        new { Id = 86, Address = "6c:36:05:00:c9:41", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Linux", Title = "Instance660" },
                        new { Id = 87, Address = "dc:cd:d5:d2:4e:a3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 71, Platform = "Windows", Title = "Instance658" },
                        new { Id = 88, Address = "39:c7:6d:95:d1:3a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Linux", Title = "Instance402" },
                        new { Id = 89, Address = "58:15:e2:d5:16:f3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 72, Platform = "Linux", Title = "Instance483" },
                        new { Id = 90, Address = "9c:20:ed:67:68:35", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Linux", Title = "Instance21" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 30, CreatedAt = new DateTime(2018, 8, 26, 14, 45, 18, 135, DateTimeKind.Local), Text = "Sint doloremque vero et est.", UserId = "d7c68027-7a0a-4b78-aef9-02781e94182c", WasRead = false },
                        new { Id = 32, ChatId = 24, CreatedAt = new DateTime(2018, 8, 27, 11, 36, 52, 472, DateTimeKind.Local), Text = "Laborum debitis consequatur laborum autem ut.", UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", WasRead = false },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 8, 26, 13, 32, 31, 447, DateTimeKind.Local), Text = "Corrupti cupiditate ullam cumque modi est veniam sit.", UserId = "d274933f-0df6-4ce1-860f-29ba557430f5", WasRead = true },
                        new { Id = 34, ChatId = 27, CreatedAt = new DateTime(2018, 8, 27, 4, 16, 1, 104, DateTimeKind.Local), Text = "Consectetur dignissimos quis sapiente ut consequatur repellendus temporibus.", UserId = "d274933f-0df6-4ce1-860f-29ba557430f5", WasRead = false },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 8, 27, 10, 4, 45, 818, DateTimeKind.Local), Text = "Incidunt voluptates quia quae est.", UserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", WasRead = true },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 8, 27, 6, 29, 49, 943, DateTimeKind.Local), Text = "Natus neque omnis non fuga temporibus temporibus.", UserId = "d7c68027-7a0a-4b78-aef9-02781e94182c", WasRead = true },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 8, 26, 18, 19, 57, 836, DateTimeKind.Local), Text = "Aliquid laborum omnis est nisi maiores.", UserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14", WasRead = false },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 8, 26, 19, 4, 26, 492, DateTimeKind.Local), Text = "Vero autem quis eos voluptas ut vitae assumenda qui omnis.", UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", WasRead = false },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 8, 27, 2, 59, 46, 17, DateTimeKind.Local), Text = "Nesciunt repellat itaque.", UserId = "11d76c7c-c316-4694-80a0-8bc2810e1224", WasRead = false },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 8, 27, 5, 39, 15, 577, DateTimeKind.Local), Text = "Natus impedit ut hic non sed animi libero voluptas.", UserId = "5504b109-e452-447b-97d1-a4812ac6e83e", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 27, 10, 12, 34, 962, DateTimeKind.Local), NotificationSettingId = 18, Text = "Error dicta cumque provident aliquam ea facilis nulla a.", UserId = "5504b109-e452-447b-97d1-a4812ac6e83e", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 26, 17, 4, 22, 374, DateTimeKind.Local), NotificationSettingId = 12, Text = "Saepe ut veritatis vero voluptas veritatis porro magnam dolorem.", UserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 26, 22, 39, 19, 508, DateTimeKind.Local), NotificationSettingId = 18, Text = "Quasi id assumenda.", UserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 27, 5, 26, 37, 346, DateTimeKind.Local), NotificationSettingId = 15, Text = "Non pariatur repudiandae accusantium a optio.", UserId = "d274933f-0df6-4ce1-860f-29ba557430f5", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 26, 16, 27, 5, 60, DateTimeKind.Local), NotificationSettingId = 18, Text = "Facere ratione numquam.", UserId = "8486e755-b481-4eff-be21-9d95556987d1", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 27, 6, 53, 44, 582, DateTimeKind.Local), NotificationSettingId = 13, Text = "Dolor consequatur nisi impedit culpa id enim.", UserId = "97778277-833d-4bba-bc08-96216119b974", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 27, 5, 17, 31, 229, DateTimeKind.Local), NotificationSettingId = 11, Text = "Voluptates architecto vel laudantium et.", UserId = "5504b109-e452-447b-97d1-a4812ac6e83e", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 27, 4, 57, 36, 277, DateTimeKind.Local), NotificationSettingId = 13, Text = "Aperiam ut ratione voluptas illum dolor nihil veritatis.", UserId = "8486e755-b481-4eff-be21-9d95556987d1", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 26, 16, 42, 0, 62, DateTimeKind.Local), NotificationSettingId = 17, Text = "Accusantium sequi ea.", UserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 26, 18, 45, 40, 294, DateTimeKind.Local), NotificationSettingId = 14, Text = "Aut rerum temporibus qui dolores delectus maiores qui.", UserId = "11d76c7c-c316-4694-80a0-8bc2810e1224", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = true, IsMute = false, Type = 4, UserId = "11d76c7c-c316-4694-80a0-8bc2810e1224" },
                        new { Id = 12, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "5504b109-e452-447b-97d1-a4812ac6e83e" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "5504b109-e452-447b-97d1-a4812ac6e83e" },
                        new { Id = 14, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba" },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "97778277-833d-4bba-bc08-96216119b974" },
                        new { Id = 16, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "b09e040a-1384-4abb-bcb5-e32a9e812f40" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "97778277-833d-4bba-bc08-96216119b974" },
                        new { Id = 19, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "8486e755-b481-4eff-be21-9d95556987d1" },
                        new { Id = 20, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "886-531-6165", CreatedByUserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", Description = "", Email = "Frankie_Cronin@hotmail.com", IsActive = true, Name = "Company911", ThemeId = 67, WebSite = "https://donavon.com" },
                        new { Id = 72, ContactNumber = "1-728-358-7494", CreatedByUserId = "b09e040a-1384-4abb-bcb5-e32a9e812f40", Description = "Repudiandae quibusdam voluptas ducimus et saepe expedita officiis. Rerum enim harum eveniet voluptas facilis iure sit id. Alias et culpa ut ipsum vero maxime qui pariatur. Dolorum praesentium nesciunt autem omnis qui quas corrupti aut.", Email = "Elissa30@yahoo.com", IsActive = true, Name = "Company729", ThemeId = 64, WebSite = "http://reuben.org" },
                        new { Id = 73, ContactNumber = "(392) 738-6543 x801", CreatedByUserId = "d274933f-0df6-4ce1-860f-29ba557430f5", Description = "Voluptas ut fugit eos. Non cum et fugiat laboriosam architecto eos minima modi placeat.", Email = "Norwood_Toy@yahoo.com", IsActive = true, Name = "Company170", ThemeId = 67, WebSite = "https://cathryn.biz" },
                        new { Id = 74, ContactNumber = "203.427.7650 x425", CreatedByUserId = "d7c68027-7a0a-4b78-aef9-02781e94182c", Description = "", Email = "Jeramy39@gmail.com", IsActive = true, Name = "Company477", ThemeId = 70, WebSite = "https://reba.biz" },
                        new { Id = 75, ContactNumber = "(975) 209-1443 x7854", CreatedByUserId = "11d76c7c-c316-4694-80a0-8bc2810e1224", Description = "", Email = "Frederick.Rohan@yahoo.com", IsActive = true, Name = "Company259", ThemeId = 67, WebSite = "https://alfredo.biz" },
                        new { Id = 76, ContactNumber = "642-390-8585 x32466", CreatedByUserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", Description = "Saepe nulla recusandae est voluptatem voluptatum ut. Facilis sit eius facere. Libero et qui corporis repudiandae incidunt necessitatibus.", Email = "Erling13@yahoo.com", IsActive = true, Name = "Company50", ThemeId = 69, WebSite = "https://hildegard.org" },
                        new { Id = 77, ContactNumber = "991-647-8137 x5828", CreatedByUserId = "5504b109-e452-447b-97d1-a4812ac6e83e", Description = "Sequi omnis in id. Doloremque eum voluptatem. Placeat voluptas fugiat.", Email = "Gregorio_Corkery17@yahoo.com", IsActive = true, Name = "Company462", ThemeId = 65, WebSite = "https://braxton.net" },
                        new { Id = 78, ContactNumber = "470.671.3040 x87959", CreatedByUserId = "5504b109-e452-447b-97d1-a4812ac6e83e", Description = "", Email = "Vinnie22@gmail.com", IsActive = true, Name = "Company676", ThemeId = 61, WebSite = "http://jedediah.info" },
                        new { Id = 79, ContactNumber = "929-277-5624 x6081", CreatedByUserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14", Description = "Ea vitae nihil assumenda accusamus harum aut vel eaque. Possimus quidem facilis excepturi earum assumenda amet reprehenderit natus alias.", Email = "Keagan50@gmail.com", IsActive = true, Name = "Company675", ThemeId = 68, WebSite = "https://estevan.com" },
                        new { Id = 80, ContactNumber = "469-337-2948 x708", CreatedByUserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", Description = "", Email = "Justine.Gulgowski@yahoo.com", IsActive = true, Name = "Company227", ThemeId = 65, WebSite = "http://darrion.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 27, 4, 27, 5, 941, DateTimeKind.Local), FeedbackId = 48, Text = "Qui laboriosam possimus illum pariatur sint commodi quibusdam et.", UserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 27, 4, 50, 46, 373, DateTimeKind.Local), FeedbackId = 50, Text = "Sunt assumenda ducimus quidem natus provident incidunt similique.", UserId = "11d76c7c-c316-4694-80a0-8bc2810e1224" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 27, 5, 50, 33, 228, DateTimeKind.Local), FeedbackId = 49, Text = "Aspernatur quia praesentium in.", UserId = "b09e040a-1384-4abb-bcb5-e32a9e812f40" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 26, 22, 54, 51, 426, DateTimeKind.Local), FeedbackId = 41, Text = "Error eum sit sunt tenetur unde.", UserId = "8486e755-b481-4eff-be21-9d95556987d1" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 27, 9, 54, 7, 142, DateTimeKind.Local), FeedbackId = 48, Text = "Aliquam et occaecati ut delectus optio nulla et.", UserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 26, 18, 36, 38, 14, DateTimeKind.Local), FeedbackId = 50, Text = "Voluptatem magni quo dolorum.", UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 27, 9, 7, 49, 234, DateTimeKind.Local), FeedbackId = 45, Text = "Eius sit voluptas ut.", UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 27, 6, 44, 53, 482, DateTimeKind.Local), FeedbackId = 48, Text = "Nobis perferendis sapiente labore corrupti in a quam cum eos.", UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 26, 15, 58, 34, 722, DateTimeKind.Local), FeedbackId = 49, Text = "Saepe magni qui quia error sed id sit quibusdam.", UserId = "b09e040a-1384-4abb-bcb5-e32a9e812f40" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 26, 18, 41, 33, 429, DateTimeKind.Local), FeedbackId = 48, Text = "Et distinctio magnam explicabo eius quaerat ut.", UserId = "b09e040a-1384-4abb-bcb5-e32a9e812f40" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme519" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme419" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme141" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme712" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme236" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme102" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme35" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme23" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme796" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme878" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "b09e040a-1384-4abb-bcb5-e32a9e812f40", CreatedAt = new DateTime(2018, 8, 27, 7, 45, 59, 423, DateTimeKind.Local), DisplayName = "Talon", Email = "Einar11@gmail.com", FirstName = "Lily", IsActive = true, LastName = "Stracke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg", RoleId = 2 },
                        new { Id = "d7c68027-7a0a-4b78-aef9-02781e94182c", CreatedAt = new DateTime(2018, 8, 27, 7, 34, 13, 456, DateTimeKind.Local), DisplayName = "Tiara", Email = "Bret.Trantow46@hotmail.com", FirstName = "Bessie", IsActive = true, LastName = "Larson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg", RoleId = 2 },
                        new { Id = "11d76c7c-c316-4694-80a0-8bc2810e1224", CreatedAt = new DateTime(2018, 8, 27, 2, 37, 12, 614, DateTimeKind.Local), DisplayName = "Rowan", Email = "Ellie.Kerluke@yahoo.com", FirstName = "Cody", IsActive = true, LastName = "Reinger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg", RoleId = 1 },
                        new { Id = "97778277-833d-4bba-bc08-96216119b974", CreatedAt = new DateTime(2018, 8, 26, 18, 16, 47, 561, DateTimeKind.Local), DisplayName = "Zula", Email = "Jensen_Schmidt@hotmail.com", FirstName = "Alexane", IsActive = true, LastName = "Rosenbaum", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg", RoleId = 2 },
                        new { Id = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", CreatedAt = new DateTime(2018, 8, 27, 2, 59, 19, 669, DateTimeKind.Local), DisplayName = "Kian", Email = "Mazie.Kassulke@yahoo.com", FirstName = "Mikel", IsActive = true, LastName = "Zulauf", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg", RoleId = 1 },
                        new { Id = "5504b109-e452-447b-97d1-a4812ac6e83e", CreatedAt = new DateTime(2018, 8, 26, 19, 49, 5, 288, DateTimeKind.Local), DisplayName = "Kamren", Email = "Christy_Abshire3@yahoo.com", FirstName = "Baby", IsActive = true, LastName = "Quitzon", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg", RoleId = 1 },
                        new { Id = "3c66a652-9d95-41f8-b4e5-431382d4ac14", CreatedAt = new DateTime(2018, 8, 27, 0, 34, 6, 531, DateTimeKind.Local), DisplayName = "Bret", Email = "Gerry_Hermiston84@hotmail.com", FirstName = "Sister", IsActive = true, LastName = "Abernathy", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg", RoleId = 1 },
                        new { Id = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", CreatedAt = new DateTime(2018, 8, 26, 21, 43, 8, 409, DateTimeKind.Local), DisplayName = "Rachael", Email = "Arvilla.Prosacco@hotmail.com", FirstName = "Roxane", IsActive = true, LastName = "Becker", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg", RoleId = 2 },
                        new { Id = "d274933f-0df6-4ce1-860f-29ba557430f5", CreatedAt = new DateTime(2018, 8, 27, 12, 7, 6, 946, DateTimeKind.Local), DisplayName = "Amelia", Email = "Koby_Fritsch@yahoo.com", FirstName = "Edyth", IsActive = true, LastName = "Johnston", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg", RoleId = 2 },
                        new { Id = "8486e755-b481-4eff-be21-9d95556987d1", CreatedAt = new DateTime(2018, 8, 27, 10, 15, 54, 80, DateTimeKind.Local), DisplayName = "Kevin", Email = "Arlo_Paucek@yahoo.com", FirstName = "Marie", IsActive = true, LastName = "Kunde", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "b09e040a-1384-4abb-bcb5-e32a9e812f40", OrganizationId = 79 },
                        new { UserId = "d7c68027-7a0a-4b78-aef9-02781e94182c", OrganizationId = 73 },
                        new { UserId = "11d76c7c-c316-4694-80a0-8bc2810e1224", OrganizationId = 79 },
                        new { UserId = "97778277-833d-4bba-bc08-96216119b974", OrganizationId = 71 },
                        new { UserId = "48fd27a3-127f-4da8-a8e7-8f46e1d41bba", OrganizationId = 76 },
                        new { UserId = "5504b109-e452-447b-97d1-a4812ac6e83e", OrganizationId = 73 },
                        new { UserId = "3c66a652-9d95-41f8-b4e5-431382d4ac14", OrganizationId = 76 },
                        new { UserId = "c92ca16a-d03a-4f48-857d-4ded5fe4735e", OrganizationId = 76 },
                        new { UserId = "d274933f-0df6-4ce1-860f-29ba557430f5", OrganizationId = 79 },
                        new { UserId = "8486e755-b481-4eff-be21-9d95556987d1", OrganizationId = 78 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
