// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180828112928_AddedIsDeletedField")]
    partial class AddedIsDeletedField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 100, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 61, Type = 1 },
                        new { Id = 102, DashboardId = 94, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 93, Type = 0 },
                        new { Id = 103, DashboardId = 96, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 71, Type = 2 },
                        new { Id = 104, DashboardId = 100, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 8, Type = 2 },
                        new { Id = 105, DashboardId = 98, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 80, Type = 1 },
                        new { Id = 106, DashboardId = 94, IsDeleted = false, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 100, Type = 1 },
                        new { Id = 107, DashboardId = 96, IsDeleted = false, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 58, Type = 2 },
                        new { Id = 108, DashboardId = 96, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 15, Type = 2 },
                        new { Id = 109, DashboardId = 91, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source3", Threshold = 93, Type = 2 },
                        new { Id = 110, DashboardId = 91, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 57, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "a3ce5d11-3101-4cc4-a843-67df7aa301ea", IsDeleted = false, Name = "amet", Type = 0 },
                        new { Id = 22, CreatedById = "a3ce5d11-3101-4cc4-a843-67df7aa301ea", IsDeleted = false, Name = "quod", Type = 0 },
                        new { Id = 23, CreatedById = "0beec19d-bf3e-4d84-9015-14b9fc940eed", IsDeleted = false, Name = "fuga", Type = 0 },
                        new { Id = 24, CreatedById = "09283e12-58d1-403a-afa2-074867f677b3", IsDeleted = false, Name = "nihil", Type = 0 },
                        new { Id = 25, CreatedById = "43235b60-7b49-4d27-8e66-3452df164f72", IsDeleted = false, Name = "dolore", Type = 0 },
                        new { Id = 26, CreatedById = "cd965e6e-519a-49dd-913b-b775bbea5191", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 27, CreatedById = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", IsDeleted = false, Name = "quod", Type = 0 },
                        new { Id = 28, CreatedById = "43235b60-7b49-4d27-8e66-3452df164f72", IsDeleted = false, Name = "neque", Type = 0 },
                        new { Id = 29, CreatedById = "fc95dd2b-c457-48ae-9b90-964f53a60abf", IsDeleted = false, Name = "at", Type = 0 },
                        new { Id = 30, CreatedById = "a3ce5d11-3101-4cc4-a843-67df7aa301ea", IsDeleted = false, Name = "quod", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 28, 6, 59, 54, 375, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title728" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 28, 5, 16, 24, 922, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title835" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 27, 23, 9, 46, 127, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title144" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 28, 2, 4, 52, 953, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title683" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 28, 6, 9, 15, 944, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title607" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 28, 6, 20, 31, 849, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title954" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 27, 18, 28, 49, 965, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title565" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 28, 3, 21, 49, 252, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title996" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 27, 23, 37, 20, 10, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title751" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 28, 11, 8, 54, 240, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title450" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 27, 20, 1, 16, 388, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Totam nesciunt cupiditate neque rem eius omnis animi doloribus repellat.", UserId = "fc95dd2b-c457-48ae-9b90-964f53a60abf", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 27, 22, 1, 25, 815, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui ut ex est provident consequuntur illum doloremque quisquam.", UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 27, 17, 1, 24, 214, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut qui minima possimus.", UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 28, 12, 21, 4, 215, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Excepturi aperiam sed commodi itaque.", UserId = "a3ce5d11-3101-4cc4-a843-67df7aa301ea", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 27, 22, 50, 39, 291, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur magnam error et qui.", UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 28, 3, 7, 44, 312, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Esse repellendus saepe et et natus eos maxime.", UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 28, 1, 36, 53, 493, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et dolorem dolores nulla explicabo omnis esse vitae aut dolore.", UserId = "cd965e6e-519a-49dd-913b-b775bbea5191", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 28, 0, 23, 17, 395, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Odio dolorem consequatur dolor nesciunt aperiam nulla qui.", UserId = "d9c92b92-34b4-4b8a-a48e-0d0ae2b02fd5", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 28, 10, 34, 43, 299, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut repellat ipsam et hic ipsum praesentium necessitatibus expedita.", UserId = "fc95dd2b-c457-48ae-9b90-964f53a60abf", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 28, 0, 41, 31, 622, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Molestias ea rem necessitatibus voluptatibus similique.", UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "24:8e:7c:7a:b6:b1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Linux", Title = "Instance910" },
                        new { Id = 82, Address = "b2:7e:bb:0f:81:a4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance532" },
                        new { Id = 83, Address = "21:b4:38:0b:34:4c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance155" },
                        new { Id = 84, Address = "91:ba:b8:3e:d5:44", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance874" },
                        new { Id = 85, Address = "18:50:5b:66:48:89", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance167" },
                        new { Id = 86, Address = "4a:96:8c:84:7f:6f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance619" },
                        new { Id = 87, Address = "80:8c:63:a0:51:f8", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance273" },
                        new { Id = 88, Address = "99:26:37:e9:4c:d0", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance229" },
                        new { Id = 89, Address = "f9:27:2a:6e:9c:fa", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", Title = "Instance762" },
                        new { Id = 90, Address = "ee:99:e7:c0:be:8b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", Title = "Instance743" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 28, CreatedAt = new DateTime(2018, 8, 28, 4, 53, 23, 175, DateTimeKind.Local), IsDeleted = false, Text = "Dolorem cum nulla.", UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", WasRead = false },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 8, 27, 20, 11, 20, 58, DateTimeKind.Local), IsDeleted = false, Text = "Voluptates ut nisi rem provident dignissimos quia sint enim.", UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", WasRead = false },
                        new { Id = 33, ChatId = 28, CreatedAt = new DateTime(2018, 8, 27, 17, 45, 17, 862, DateTimeKind.Local), IsDeleted = false, Text = "Maxime sed sit optio laboriosam at aliquam tempora.", UserId = "cd965e6e-519a-49dd-913b-b775bbea5191", WasRead = true },
                        new { Id = 34, ChatId = 24, CreatedAt = new DateTime(2018, 8, 28, 10, 38, 31, 50, DateTimeKind.Local), IsDeleted = false, Text = "Reprehenderit saepe modi.", UserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", WasRead = true },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 8, 27, 21, 50, 43, 445, DateTimeKind.Local), IsDeleted = false, Text = "Laboriosam quisquam doloribus non quod.", UserId = "43235b60-7b49-4d27-8e66-3452df164f72", WasRead = false },
                        new { Id = 36, ChatId = 25, CreatedAt = new DateTime(2018, 8, 28, 10, 22, 19, 984, DateTimeKind.Local), IsDeleted = false, Text = "Omnis quod dolores non facilis distinctio nihil autem et omnis.", UserId = "d9c92b92-34b4-4b8a-a48e-0d0ae2b02fd5", WasRead = false },
                        new { Id = 37, ChatId = 27, CreatedAt = new DateTime(2018, 8, 27, 23, 0, 1, 773, DateTimeKind.Local), IsDeleted = false, Text = "Nihil illum accusantium.", UserId = "0beec19d-bf3e-4d84-9015-14b9fc940eed", WasRead = true },
                        new { Id = 38, ChatId = 26, CreatedAt = new DateTime(2018, 8, 27, 16, 57, 7, 506, DateTimeKind.Local), IsDeleted = false, Text = "Suscipit voluptate deleniti consectetur atque.", UserId = "43235b60-7b49-4d27-8e66-3452df164f72", WasRead = false },
                        new { Id = 39, ChatId = 28, CreatedAt = new DateTime(2018, 8, 28, 2, 0, 28, 283, DateTimeKind.Local), IsDeleted = false, Text = "Rerum molestiae libero cupiditate praesentium magnam.", UserId = "0beec19d-bf3e-4d84-9015-14b9fc940eed", WasRead = false },
                        new { Id = 40, ChatId = 21, CreatedAt = new DateTime(2018, 8, 28, 3, 40, 22, 41, DateTimeKind.Local), IsDeleted = false, Text = "Est dolorem et modi sunt ipsam qui.", UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 28, 0, 51, 41, 434, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Voluptatem quo quidem eligendi deserunt perferendis qui.", UserId = "43235b60-7b49-4d27-8e66-3452df164f72", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 28, 3, 48, 48, 472, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Ut dolorum ea.", UserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 27, 17, 2, 8, 816, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Possimus cumque aut aut natus dolor ullam perferendis magnam dolorum.", UserId = "43235b60-7b49-4d27-8e66-3452df164f72", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 27, 21, 55, 32, 559, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Sit et quam.", UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 27, 14, 45, 40, 784, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Eos autem sit nemo maxime.", UserId = "43235b60-7b49-4d27-8e66-3452df164f72", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 28, 7, 52, 45, 824, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Recusandae excepturi ut est itaque consequatur harum eum.", UserId = "0beec19d-bf3e-4d84-9015-14b9fc940eed", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 28, 1, 14, 6, 994, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Omnis omnis tempore doloribus dolor aut dicta.", UserId = "09283e12-58d1-403a-afa2-074867f677b3", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 27, 23, 57, 13, 574, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Iure id dolorum voluptas et in illum autem rerum recusandae.", UserId = "43235b60-7b49-4d27-8e66-3452df164f72", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 27, 19, 53, 49, 133, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Autem aspernatur vel iusto eaque esse qui doloribus.", UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 27, 22, 36, 20, 402, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Voluptatem similique sit sunt cupiditate.", UserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "0beec19d-bf3e-4d84-9015-14b9fc940eed" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "43235b60-7b49-4d27-8e66-3452df164f72" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "a3ce5d11-3101-4cc4-a843-67df7aa301ea" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 3, UserId = "cd965e6e-519a-49dd-913b-b775bbea5191" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "a3ce5d11-3101-4cc4-a843-67df7aa301ea" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "d9c92b92-34b4-4b8a-a48e-0d0ae2b02fd5" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(623) 871-6181", CreatedByUserId = "43235b60-7b49-4d27-8e66-3452df164f72", Description = "Distinctio nostrum dignissimos.", Email = "Donny75@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company7", ThemeId = 66, WebSite = "https://carter.net" },
                        new { Id = 72, ContactNumber = "(473) 762-8208 x708", CreatedByUserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", Description = "Nihil omnis omnis voluptatibus. Error quia excepturi tempora ipsam laborum veritatis ut porro aut. Repudiandae delectus est deserunt rem. Possimus reiciendis quasi unde iusto excepturi expedita.", Email = "Isai_Kuphal37@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company484", ThemeId = 65, WebSite = "http://deshawn.net" },
                        new { Id = 73, ContactNumber = "219.250.5801 x261", CreatedByUserId = "d9c92b92-34b4-4b8a-a48e-0d0ae2b02fd5", Description = "", Email = "Sandy.Medhurst82@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company645", ThemeId = 70, WebSite = "https://avery.biz" },
                        new { Id = 74, ContactNumber = "774.329.7996 x941", CreatedByUserId = "09283e12-58d1-403a-afa2-074867f677b3", Description = "Provident reprehenderit ipsa cum sunt.", Email = "Rusty_Bins41@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company348", ThemeId = 64, WebSite = "http://rosina.info" },
                        new { Id = 75, ContactNumber = "(993) 373-2289 x7227", CreatedByUserId = "43235b60-7b49-4d27-8e66-3452df164f72", Description = "Iusto voluptatem numquam ipsum aut est ad. Doloremque explicabo non qui fuga quibusdam ipsum tenetur. Possimus nesciunt quae autem non.", Email = "Eveline10@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company480", ThemeId = 67, WebSite = "https://marcelle.name" },
                        new { Id = 76, ContactNumber = "(748) 529-2264 x7608", CreatedByUserId = "09283e12-58d1-403a-afa2-074867f677b3", Description = "Corrupti officia maxime velit tempora reprehenderit in quod excepturi nam. Ut rem itaque suscipit facere beatae consequuntur dignissimos et repellendus. Saepe sunt beatae et sapiente ipsum rerum quidem earum sed.", Email = "Freddie.Romaguera@gmail.com", IsActive = true, IsDeleted = false, Name = "Company432", ThemeId = 67, WebSite = "https://maxwell.name" },
                        new { Id = 77, ContactNumber = "571-805-9321", CreatedByUserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", Description = "Expedita sed corporis molestiae ea aspernatur debitis est. Et nulla ad voluptas et. Nobis fugit dolorum eaque excepturi exercitationem ipsa nobis.", Email = "Ezra87@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company664", ThemeId = 63, WebSite = "https://frederic.name" },
                        new { Id = 78, ContactNumber = "1-964-586-4948", CreatedByUserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", Description = "Ad enim expedita odit aspernatur in et et adipisci.", Email = "Willis.Crist5@gmail.com", IsActive = true, IsDeleted = false, Name = "Company38", ThemeId = 64, WebSite = "http://elena.biz" },
                        new { Id = 79, ContactNumber = "1-330-343-2172 x327", CreatedByUserId = "cd965e6e-519a-49dd-913b-b775bbea5191", Description = "Autem tenetur sint. Quibusdam rerum nihil fugit sequi nam magni blanditiis. Est ut quibusdam minus laboriosam. Inventore sint porro architecto reiciendis dolore eius inventore.", Email = "Cynthia.Emmerich@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company492", ThemeId = 62, WebSite = "http://joan.name" },
                        new { Id = 80, ContactNumber = "1-232-399-5546 x898", CreatedByUserId = "43235b60-7b49-4d27-8e66-3452df164f72", Description = "Aut itaque et in necessitatibus veniam voluptatibus doloremque. Aspernatur consequuntur vitae.", Email = "Esmeralda.DAmore9@gmail.com", IsActive = true, IsDeleted = false, Name = "Company125", ThemeId = 70, WebSite = "https://melissa.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 27, 16, 34, 41, 455, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Commodi non deleniti aspernatur placeat vitae officia odio iusto nisi.", UserId = "a3ce5d11-3101-4cc4-a843-67df7aa301ea" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 27, 18, 5, 23, 977, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Explicabo ducimus maiores magni quidem repellendus facilis voluptas occaecati.", UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 28, 5, 48, 27, 860, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Est qui et perferendis perferendis.", UserId = "09283e12-58d1-403a-afa2-074867f677b3" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 28, 4, 44, 27, 452, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Fugiat sit sed dicta officiis qui modi qui cum.", UserId = "0beec19d-bf3e-4d84-9015-14b9fc940eed" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 28, 0, 7, 13, 586, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Dignissimos asperiores odio itaque est ut.", UserId = "43235b60-7b49-4d27-8e66-3452df164f72" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 27, 22, 56, 29, 357, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Ducimus impedit eveniet exercitationem similique voluptas ut impedit.", UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 28, 10, 19, 57, 448, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Et molestiae unde repudiandae adipisci perspiciatis cumque.", UserId = "09283e12-58d1-403a-afa2-074867f677b3" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 28, 9, 35, 53, 848, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Enim cumque accusamus in architecto facere placeat aut aut.", UserId = "fc95dd2b-c457-48ae-9b90-964f53a60abf" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 28, 8, 59, 11, 408, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Aut sequi et quos omnis cumque.", UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 28, 13, 52, 28, 757, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Nisi excepturi reprehenderit optio eaque illo doloribus blanditiis aut.", UserId = "0beec19d-bf3e-4d84-9015-14b9fc940eed" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme597" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme953" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme408" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme938" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme396" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme240" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme680" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme113" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme511" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme741" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "a3ce5d11-3101-4cc4-a843-67df7aa301ea", CreatedAt = new DateTime(2018, 8, 27, 14, 49, 21, 537, DateTimeKind.Local), DisplayName = "Sammie", Email = "Luciano.Heaney34@hotmail.com", FirstName = "Isabelle", IsActive = true, IsDeleted = false, LastName = "Wolf", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg", RoleId = 2 },
                        new { Id = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", CreatedAt = new DateTime(2018, 8, 27, 15, 54, 34, 205, DateTimeKind.Local), DisplayName = "Cathrine", Email = "Ivah_Lang@yahoo.com", FirstName = "Adelbert", IsActive = true, IsDeleted = false, LastName = "Casper", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg", RoleId = 2 },
                        new { Id = "75882f38-3d05-4f6d-a76f-571b88d70c4a", CreatedAt = new DateTime(2018, 8, 28, 9, 20, 23, 671, DateTimeKind.Local), DisplayName = "Bella", Email = "Ariel.Rodriguez4@yahoo.com", FirstName = "Lexie", IsActive = true, IsDeleted = false, LastName = "Mante", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg", RoleId = 1 },
                        new { Id = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", CreatedAt = new DateTime(2018, 8, 28, 9, 9, 9, 141, DateTimeKind.Local), DisplayName = "Duncan", Email = "Ivy70@yahoo.com", FirstName = "Freeda", IsActive = true, IsDeleted = false, LastName = "Ruecker", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg", RoleId = 2 },
                        new { Id = "cd965e6e-519a-49dd-913b-b775bbea5191", CreatedAt = new DateTime(2018, 8, 28, 2, 20, 58, 227, DateTimeKind.Local), DisplayName = "Deon", Email = "Jeffery62@hotmail.com", FirstName = "Alexandrea", IsActive = true, IsDeleted = false, LastName = "Beier", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg", RoleId = 1 },
                        new { Id = "fc95dd2b-c457-48ae-9b90-964f53a60abf", CreatedAt = new DateTime(2018, 8, 28, 2, 39, 51, 496, DateTimeKind.Local), DisplayName = "Kaela", Email = "Steve.Jaskolski@hotmail.com", FirstName = "Delpha", IsActive = true, IsDeleted = false, LastName = "Hayes", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg", RoleId = 2 },
                        new { Id = "43235b60-7b49-4d27-8e66-3452df164f72", CreatedAt = new DateTime(2018, 8, 28, 5, 1, 5, 722, DateTimeKind.Local), DisplayName = "Paige", Email = "Agustin.Cole23@gmail.com", FirstName = "Miguel", IsActive = true, IsDeleted = false, LastName = "Schmidt", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg", RoleId = 2 },
                        new { Id = "d9c92b92-34b4-4b8a-a48e-0d0ae2b02fd5", CreatedAt = new DateTime(2018, 8, 28, 5, 44, 0, 721, DateTimeKind.Local), DisplayName = "Reva", Email = "Elta_Oberbrunner99@hotmail.com", FirstName = "Antwon", IsActive = true, IsDeleted = false, LastName = "McCullough", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg", RoleId = 2 },
                        new { Id = "0beec19d-bf3e-4d84-9015-14b9fc940eed", CreatedAt = new DateTime(2018, 8, 28, 6, 15, 32, 509, DateTimeKind.Local), DisplayName = "Nicholaus", Email = "Shad.Crist29@gmail.com", FirstName = "Treva", IsActive = true, IsDeleted = false, LastName = "Will", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg", RoleId = 1 },
                        new { Id = "09283e12-58d1-403a-afa2-074867f677b3", CreatedAt = new DateTime(2018, 8, 28, 1, 6, 15, 536, DateTimeKind.Local), DisplayName = "Milo", Email = "Maida9@hotmail.com", FirstName = "Bruce", IsActive = true, IsDeleted = false, LastName = "Halvorson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "a3ce5d11-3101-4cc4-a843-67df7aa301ea", OrganizationId = 76 },
                        new { UserId = "8fb8631a-1cdb-412b-a804-5aa5b6ee1b7e", OrganizationId = 71 },
                        new { UserId = "75882f38-3d05-4f6d-a76f-571b88d70c4a", OrganizationId = 73 },
                        new { UserId = "5af49d04-f291-4c8d-8ca2-2a273e3f6b55", OrganizationId = 71 },
                        new { UserId = "cd965e6e-519a-49dd-913b-b775bbea5191", OrganizationId = 77 },
                        new { UserId = "fc95dd2b-c457-48ae-9b90-964f53a60abf", OrganizationId = 78 },
                        new { UserId = "43235b60-7b49-4d27-8e66-3452df164f72", OrganizationId = 75 },
                        new { UserId = "d9c92b92-34b4-4b8a-a48e-0d0ae2b02fd5", OrganizationId = 71 },
                        new { UserId = "0beec19d-bf3e-4d84-9015-14b9fc940eed", OrganizationId = 77 },
                        new { UserId = "09283e12-58d1-403a-afa2-074867f677b3", OrganizationId = 76 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
