// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180911202831_AddedStatusCheckedAtToInstance")]
    partial class AddedStatusCheckedAtToInstance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 51, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 50, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 68, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 17, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 93, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 48, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 64, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 23, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 94, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 93, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 57, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "e2d35c72-f927-4bf3-90c9-455abd1ca397", IsDeleted = false, Name = "sint", Type = 0 },
                        new { Id = 22, CreatedById = "e2d35c72-f927-4bf3-90c9-455abd1ca397", IsDeleted = false, Name = "non", Type = 0 },
                        new { Id = 23, CreatedById = "d9ce076a-0d67-4c33-863c-d1e30204e18b", IsDeleted = false, Name = "quae", Type = 0 },
                        new { Id = 24, CreatedById = "d11f0865-34fa-4778-b88e-d9d1bfd37327", IsDeleted = false, Name = "voluptates", Type = 0 },
                        new { Id = 25, CreatedById = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045", IsDeleted = false, Name = "enim", Type = 0 },
                        new { Id = 26, CreatedById = "12f88475-329b-412a-8eef-b5c9c9a246e0", IsDeleted = false, Name = "vitae", Type = 0 },
                        new { Id = 27, CreatedById = "3fff5aa8-3c50-40d7-90a1-3de1d905b016", IsDeleted = false, Name = "quis", Type = 0 },
                        new { Id = 28, CreatedById = "e72237ee-c095-4e57-8376-42a1b3844a49", IsDeleted = false, Name = "eligendi", Type = 0 },
                        new { Id = 29, CreatedById = "12f88475-329b-412a-8eef-b5c9c9a246e0", IsDeleted = false, Name = "harum", Type = 0 },
                        new { Id = 30, CreatedById = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", IsDeleted = false, Name = "explicabo", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 11, 6, 48, 2, 833, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title173" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 11, 9, 54, 26, 800, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title991" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 11, 22, 8, 7, 412, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title585" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 11, 22, 33, 14, 624, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title821" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 11, 22, 29, 8, 774, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title491" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 11, 9, 3, 5, 497, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title335" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 11, 7, 35, 38, 961, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title234" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 11, 10, 48, 10, 809, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title587" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 11, 14, 19, 39, 970, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title69" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 11, 4, 37, 14, 839, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title795" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 4, 20, 0, 600, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sunt necessitatibus autem voluptas.", UserId = "3fff5aa8-3c50-40d7-90a1-3de1d905b016", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 22, 41, 32, 554, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Illo nihil pariatur rerum minus.", UserId = "3fff5aa8-3c50-40d7-90a1-3de1d905b016", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 21, 30, 9, 905, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Atque harum aut eligendi beatae.", UserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 2, 24, 47, 256, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Repudiandae molestiae expedita perspiciatis molestias.", UserId = "12f88475-329b-412a-8eef-b5c9c9a246e0", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 11, 7, 25, 1, 639, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "In dolore quia odio.", UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 11, 3, 54, 4, 952, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Doloribus numquam quis neque ut odit quis vero eos.", UserId = "82bef09d-3035-4ce5-9f99-7cf6740c8020", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 1, 30, 9, 439, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Autem culpa eum provident veritatis ratione et laudantium.", UserId = "e72237ee-c095-4e57-8376-42a1b3844a49", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 11, 11, 44, 12, 704, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Placeat dolor fugit cumque atque.", UserId = "60aa555a-833a-468f-9371-e3b3c8a17b8f", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 1, 27, 8, 26, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Rerum eum repellendus necessitatibus deleniti nihil.", UserId = "e2d35c72-f927-4bf3-90c9-455abd1ca397", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 0, 49, 36, 883, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Perspiciatis et occaecati qui.", UserId = "e72237ee-c095-4e57-8376-42a1b3844a49", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "9e:c3:68:06:fc:27", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance28" },
                        new { Id = 82, Address = "69:ae:a9:9e:4c:90", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance332" },
                        new { Id = 83, Address = "15:bf:a8:35:85:d9", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance85" },
                        new { Id = 84, Address = "ba:63:52:94:ea:d3", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance448" },
                        new { Id = 85, Address = "f2:c5:31:96:b8:82", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance678" },
                        new { Id = 86, Address = "63:d3:d5:33:22:df", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance38" },
                        new { Id = 87, Address = "17:24:c6:05:80:06", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance504" },
                        new { Id = 88, Address = "fa:cd:11:c7:e0:50", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance703" },
                        new { Id = 89, Address = "c7:0d:14:71:ec:e6", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance490" },
                        new { Id = 90, Address = "b7:63:cd:8a:36:ce", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance447" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 5, 7, 18, 432, DateTimeKind.Local), IsDeleted = false, Text = "Laboriosam illo sed earum est voluptates reprehenderit adipisci.", UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327", WasRead = false },
                        new { Id = 32, ChatId = 27, CreatedAt = new DateTime(2018, 9, 11, 4, 30, 15, 844, DateTimeKind.Local), IsDeleted = false, Text = "Aspernatur commodi architecto dolorem voluptatibus est quo.", UserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", WasRead = false },
                        new { Id = 33, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 22, 25, 11, 327, DateTimeKind.Local), IsDeleted = false, Text = "Magni repellendus est minus quis quia repudiandae omnis libero.", UserId = "e72237ee-c095-4e57-8376-42a1b3844a49", WasRead = false },
                        new { Id = 34, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 8, 38, 59, 697, DateTimeKind.Local), IsDeleted = false, Text = "Ut sint esse dolorum sit.", UserId = "60aa555a-833a-468f-9371-e3b3c8a17b8f", WasRead = false },
                        new { Id = 35, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 10, 20, 5, 854, DateTimeKind.Local), IsDeleted = false, Text = "Consequuntur aut voluptatem ducimus voluptas.", UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327", WasRead = true },
                        new { Id = 36, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 14, 43, 45, 918, DateTimeKind.Local), IsDeleted = false, Text = "Facilis consequuntur maxime.", UserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", WasRead = true },
                        new { Id = 37, ChatId = 23, CreatedAt = new DateTime(2018, 9, 11, 3, 39, 31, 866, DateTimeKind.Local), IsDeleted = false, Text = "Accusamus sint voluptatem nam est impedit corporis adipisci eius ipsum.", UserId = "12f88475-329b-412a-8eef-b5c9c9a246e0", WasRead = false },
                        new { Id = 38, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 12, 16, 7, 119, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatem est deleniti.", UserId = "82bef09d-3035-4ce5-9f99-7cf6740c8020", WasRead = false },
                        new { Id = 39, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 18, 12, 9, 515, DateTimeKind.Local), IsDeleted = false, Text = "Est repellendus doloremque.", UserId = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045", WasRead = false },
                        new { Id = 40, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 12, 27, 28, 183, DateTimeKind.Local), IsDeleted = false, Text = "Deserunt ipsum impedit debitis adipisci.", UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 6, 58, 48, 74, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Itaque beatae et.", UserId = "12f88475-329b-412a-8eef-b5c9c9a246e0", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 11, 13, 12, 38, 605, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Distinctio corporis et sunt earum.", UserId = "e72237ee-c095-4e57-8376-42a1b3844a49", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 11, 2, 22, 3, 522, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Facere repudiandae consequatur ut consequuntur repellendus fuga est soluta est.", UserId = "e72237ee-c095-4e57-8376-42a1b3844a49", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 11, 5, 53, 8, 767, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Accusantium magnam deleniti aliquid nihil.", UserId = "82bef09d-3035-4ce5-9f99-7cf6740c8020", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 11, 0, 36, 57, 556, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Aspernatur recusandae voluptas quidem iste laboriosam est ratione amet nulla.", UserId = "e2d35c72-f927-4bf3-90c9-455abd1ca397", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 11, 0, 1, 13, 904, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Eveniet aut voluptatem qui magni consequatur id excepturi consequuntur molestiae.", UserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 11, 1, 41, 29, 414, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Beatae in ut et at doloremque.", UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 11, 6, 52, 26, 8, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Et iusto doloribus laudantium.", UserId = "12f88475-329b-412a-8eef-b5c9c9a246e0", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 11, 16, 45, 12, 928, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Atque veniam culpa totam omnis.", UserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 11, 21, 26, 7, 814, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Officia aut repudiandae expedita.", UserId = "e2d35c72-f927-4bf3-90c9-455abd1ca397", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "3fff5aa8-3c50-40d7-90a1-3de1d905b016" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 0, UserId = "3fff5aa8-3c50-40d7-90a1-3de1d905b016" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "e2d35c72-f927-4bf3-90c9-455abd1ca397" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "e72237ee-c095-4e57-8376-42a1b3844a49" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "e2d35c72-f927-4bf3-90c9-455abd1ca397" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "12f88475-329b-412a-8eef-b5c9c9a246e0" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "d9ce076a-0d67-4c33-863c-d1e30204e18b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-682-929-5004 x913", CreatedByUserId = "82bef09d-3035-4ce5-9f99-7cf6740c8020", Description = "", Email = "Haylie.Conroy@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company401", ThemeId = 62, WebSite = "https://margaretta.name" },
                        new { Id = 72, ContactNumber = "600.684.6398 x721", CreatedByUserId = "d9ce076a-0d67-4c33-863c-d1e30204e18b", Description = "Quo iusto nostrum laborum laboriosam id. Impedit labore iusto dicta rerum voluptas odit.", Email = "Kay_Tremblay63@gmail.com", IsActive = true, IsDeleted = false, Name = "Company701", ThemeId = 64, WebSite = "https://barbara.net" },
                        new { Id = 73, ContactNumber = "359.833.4126", CreatedByUserId = "e72237ee-c095-4e57-8376-42a1b3844a49", Description = "Hic et rerum pariatur harum. Omnis vero enim tempore voluptatum et sit sequi.", Email = "Hillard_Keeling@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company101", ThemeId = 70, WebSite = "http://shanna.info" },
                        new { Id = 74, ContactNumber = "(490) 476-9035 x5261", CreatedByUserId = "60aa555a-833a-468f-9371-e3b3c8a17b8f", Description = "Cupiditate iure non non et incidunt nihil aut libero qui. Qui quas facere eaque dolorem qui aperiam corrupti dolores. Et placeat perferendis architecto odit.", Email = "Monte.Thiel@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company348", ThemeId = 65, WebSite = "https://marilou.info" },
                        new { Id = 75, ContactNumber = "213-998-4565 x316", CreatedByUserId = "82bef09d-3035-4ce5-9f99-7cf6740c8020", Description = "Sunt voluptates quidem. Vero eos voluptatum maiores aut in et dolores quia rerum. In esse culpa officia nihil natus neque tempora placeat neque.", Email = "Litzy_Goodwin@gmail.com", IsActive = true, IsDeleted = false, Name = "Company830", ThemeId = 66, WebSite = "http://neoma.name" },
                        new { Id = 76, ContactNumber = "759-419-5735 x69950", CreatedByUserId = "82bef09d-3035-4ce5-9f99-7cf6740c8020", Description = "", Email = "Brown16@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company144", ThemeId = 65, WebSite = "https://shakira.net" },
                        new { Id = 77, ContactNumber = "1-207-958-2869", CreatedByUserId = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045", Description = "Dignissimos voluptatem a et.", Email = "Dovie5@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company683", ThemeId = 66, WebSite = "http://devante.org" },
                        new { Id = 78, ContactNumber = "(975) 753-6513", CreatedByUserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", Description = "Ex earum nihil ducimus rerum enim perferendis fuga fugiat. Rerum nam ea. Reprehenderit reprehenderit necessitatibus dolorem dolores.", Email = "Libbie93@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company597", ThemeId = 66, WebSite = "http://hildegard.net" },
                        new { Id = 79, ContactNumber = "1-861-572-7414 x87022", CreatedByUserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", Description = "Libero aliquid at eius. Omnis modi consequuntur itaque. Totam veritatis ullam saepe labore placeat minus sunt quo quo. Qui provident quisquam aperiam.", Email = "Joesph_OConner32@gmail.com", IsActive = true, IsDeleted = false, Name = "Company578", ThemeId = 62, WebSite = "https://renee.biz" },
                        new { Id = 80, ContactNumber = "1-640-783-3385 x5936", CreatedByUserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", Description = "Repellat cupiditate illum magni. Id fuga suscipit sunt.", Email = "Harmon8@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company887", ThemeId = 66, WebSite = "http://jaren.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 11, 8, 32, 5, 557, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Sunt perferendis quo quaerat nostrum eaque adipisci non nulla earum.", UserId = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 9, 19, 2, 311, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Necessitatibus consequatur molestiae ea et rerum.", UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 19, 13, 48, 871, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Ratione architecto voluptatum et pariatur dolorum unde aut aut.", UserId = "e72237ee-c095-4e57-8376-42a1b3844a49" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 3, 18, 39, 209, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Qui neque id harum at ipsa ut vitae non.", UserId = "60aa555a-833a-468f-9371-e3b3c8a17b8f" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 20, 45, 42, 508, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Explicabo consequatur voluptatem veniam ut aut aut necessitatibus.", UserId = "d9ce076a-0d67-4c33-863c-d1e30204e18b" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 11, 22, 4, 31, 202, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Vitae modi qui illum reiciendis.", UserId = "d9ce076a-0d67-4c33-863c-d1e30204e18b" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 5, 40, 32, 659, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Aut velit voluptatem magnam id facilis commodi.", UserId = "d9ce076a-0d67-4c33-863c-d1e30204e18b" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 11, 14, 54, 26, 88, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Ut ratione non dolor repellendus qui eum dolore.", UserId = "3fff5aa8-3c50-40d7-90a1-3de1d905b016" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 20, 53, 8, 606, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Eaque ea assumenda illum ratione ut tenetur dolor rem incidunt.", UserId = "e72237ee-c095-4e57-8376-42a1b3844a49" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 23, 17, 16, 926, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Aperiam est labore maxime ratione eveniet maiores quo.", UserId = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme214" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme32" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme256" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme825" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme450" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme409" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme220" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme441" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme832" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme706" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "e2d35c72-f927-4bf3-90c9-455abd1ca397", CreatedAt = new DateTime(2018, 9, 11, 10, 13, 28, 699, DateTimeKind.Local), DisplayName = "Christopher", Email = "Charity_Bartoletti69@gmail.com", FirstName = "Theron", IsActive = true, IsDeleted = false, LastName = "Schowalter", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg", RoleId = 1 },
                        new { Id = "e72237ee-c095-4e57-8376-42a1b3844a49", CreatedAt = new DateTime(2018, 9, 11, 9, 8, 40, 83, DateTimeKind.Local), DisplayName = "Jacky", Email = "Violette_Armstrong@gmail.com", FirstName = "Bell", IsActive = true, IsDeleted = false, LastName = "Abbott", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg", RoleId = 2 },
                        new { Id = "d9ce076a-0d67-4c33-863c-d1e30204e18b", CreatedAt = new DateTime(2018, 9, 11, 5, 45, 55, 917, DateTimeKind.Local), DisplayName = "Jerome", Email = "Dario.Wehner@gmail.com", FirstName = "Jennings", IsActive = true, IsDeleted = false, LastName = "Braun", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg", RoleId = 2 },
                        new { Id = "12f88475-329b-412a-8eef-b5c9c9a246e0", CreatedAt = new DateTime(2018, 9, 11, 22, 50, 40, 597, DateTimeKind.Local), DisplayName = "Mohamed", Email = "Fabiola_Cormier@yahoo.com", FirstName = "Kyle", IsActive = true, IsDeleted = false, LastName = "Shields", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg", RoleId = 2 },
                        new { Id = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", CreatedAt = new DateTime(2018, 9, 11, 15, 38, 25, 835, DateTimeKind.Local), DisplayName = "Tavares", Email = "Van_Jast38@yahoo.com", FirstName = "Dennis", IsActive = true, IsDeleted = false, LastName = "Marvin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg", RoleId = 1 },
                        new { Id = "82bef09d-3035-4ce5-9f99-7cf6740c8020", CreatedAt = new DateTime(2018, 9, 11, 9, 11, 35, 251, DateTimeKind.Local), DisplayName = "Marilou", Email = "Leonard94@hotmail.com", FirstName = "Maud", IsActive = true, IsDeleted = false, LastName = "Bosco", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg", RoleId = 1 },
                        new { Id = "d11f0865-34fa-4778-b88e-d9d1bfd37327", CreatedAt = new DateTime(2018, 9, 11, 10, 38, 46, 601, DateTimeKind.Local), DisplayName = "Juwan", Email = "Marcelino.Hettinger52@yahoo.com", FirstName = "Hassan", IsActive = true, IsDeleted = false, LastName = "Murazik", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg", RoleId = 2 },
                        new { Id = "60aa555a-833a-468f-9371-e3b3c8a17b8f", CreatedAt = new DateTime(2018, 9, 11, 17, 14, 57, 962, DateTimeKind.Local), DisplayName = "Samson", Email = "Amani35@hotmail.com", FirstName = "Thad", IsActive = true, IsDeleted = false, LastName = "Feest", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg", RoleId = 2 },
                        new { Id = "3fff5aa8-3c50-40d7-90a1-3de1d905b016", CreatedAt = new DateTime(2018, 9, 11, 13, 27, 41, 120, DateTimeKind.Local), DisplayName = "Manuel", Email = "Yazmin.Treutel41@gmail.com", FirstName = "Alexander", IsActive = true, IsDeleted = false, LastName = "Glover", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg", RoleId = 1 },
                        new { Id = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045", CreatedAt = new DateTime(2018, 9, 11, 19, 37, 57, 245, DateTimeKind.Local), DisplayName = "Raheem", Email = "Fidel79@gmail.com", FirstName = "Myles", IsActive = true, IsDeleted = false, LastName = "Johnson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "e2d35c72-f927-4bf3-90c9-455abd1ca397", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "e72237ee-c095-4e57-8376-42a1b3844a49", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "d9ce076a-0d67-4c33-863c-d1e30204e18b", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "12f88475-329b-412a-8eef-b5c9c9a246e0", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "63c8fee6-55b5-4a26-bed7-5ac84f06f23d", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "82bef09d-3035-4ce5-9f99-7cf6740c8020", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "d11f0865-34fa-4778-b88e-d9d1bfd37327", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "60aa555a-833a-468f-9371-e3b3c8a17b8f", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "3fff5aa8-3c50-40d7-90a1-3de1d905b016", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "bb203ff7-7405-4ba1-b9a3-5c24b9e2a045", OrganizationId = 79, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
