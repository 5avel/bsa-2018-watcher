// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180901205242_RemoveNotificationFromOrganization")]
    partial class RemoveNotificationFromOrganization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 92, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 35, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 93, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 21, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 83, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 26, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 59, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 30, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 45, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71", IsDeleted = false, Name = "voluptatibus", Type = 0 },
                        new { Id = 22, CreatedById = "047c0189-76a6-4446-8294-3d5e0d3e5d9c", IsDeleted = false, Name = "facilis", Type = 0 },
                        new { Id = 23, CreatedById = "2984b34d-5667-4986-8eef-ec4e17658c33", IsDeleted = false, Name = "cum", Type = 0 },
                        new { Id = 24, CreatedById = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", IsDeleted = false, Name = "dolorem", Type = 0 },
                        new { Id = 25, CreatedById = "37cdecd7-aaac-4dc2-9c84-7e7289b521c4", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 26, CreatedById = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", IsDeleted = false, Name = "esse", Type = 0 },
                        new { Id = 27, CreatedById = "37cdecd7-aaac-4dc2-9c84-7e7289b521c4", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 28, CreatedById = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", IsDeleted = false, Name = "perferendis", Type = 0 },
                        new { Id = 29, CreatedById = "b2afb5d0-3114-42ab-806c-1f127173d81f", IsDeleted = false, Name = "asperiores", Type = 0 },
                        new { Id = 30, CreatedById = "8948ed9a-bc9b-4fa4-bd76-e196ae717a71", IsDeleted = false, Name = "odit", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 1, 22, 13, 46, 552, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title393" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 1, 9, 14, 42, 744, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title649" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 1, 15, 31, 10, 63, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title369" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 1, 22, 10, 28, 226, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title718" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 1, 0, 46, 17, 771, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title472" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 1, 12, 37, 15, 617, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title404" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 1, 4, 35, 12, 8, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title804" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 1, 1, 27, 43, 183, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title641" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 1, 18, 15, 52, 397, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title322" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 1, 10, 34, 41, 251, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title953" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 1, 20, 53, 14, 78, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Numquam eveniet quo sed.", UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 1, 0, 49, 17, 251, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur libero et ut facere ullam quibusdam natus id sunt.", UserId = "8948ed9a-bc9b-4fa4-bd76-e196ae717a71", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 1, 19, 14, 56, 746, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Mollitia recusandae ut ab facere earum sed dolores.", UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 1, 20, 27, 52, 8, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Officia cum consequuntur similique dolorem eos et eaque maiores eos.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 1, 8, 28, 21, 616, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Rem voluptate minus libero.", UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 1, 8, 46, 42, 91, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Laboriosam ea velit error veniam.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 1, 5, 24, 16, 360, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sit quibusdam quos vel corrupti.", UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 1, 9, 31, 32, 496, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ipsum tempora id.", UserId = "37cdecd7-aaac-4dc2-9c84-7e7289b521c4", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 1, 23, 36, 19, 108, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Magnam officiis blanditiis voluptatem odit in ut non accusamus at.", UserId = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 1, 3, 19, 30, 190, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Amet voluptatem error quis adipisci voluptatum ut.", UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "b4:19:1b:2e:8a:be", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance159" },
                        new { Id = 82, Address = "81:0f:9d:6e:dc:ac", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance74" },
                        new { Id = 83, Address = "5f:b5:e2:dd:06:44", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance22" },
                        new { Id = 84, Address = "92:bb:36:33:cf:da", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance441" },
                        new { Id = 85, Address = "83:4f:14:bc:d7:58", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", Title = "Instance820" },
                        new { Id = 86, Address = "2b:c0:da:2b:c7:ff", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance617" },
                        new { Id = 87, Address = "89:5b:c4:b0:49:c5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", Title = "Instance153" },
                        new { Id = 88, Address = "89:cc:7b:80:7a:10", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance619" },
                        new { Id = 89, Address = "34:92:85:5c:37:d1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", Title = "Instance22" },
                        new { Id = 90, Address = "a3:e5:3a:8c:fb:27", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", Title = "Instance418" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 24, CreatedAt = new DateTime(2018, 9, 1, 6, 41, 58, 762, DateTimeKind.Local), IsDeleted = false, Text = "Qui eum laudantium ratione suscipit consequatur qui nulla voluptates.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761", WasRead = false },
                        new { Id = 32, ChatId = 27, CreatedAt = new DateTime(2018, 9, 1, 0, 19, 48, 931, DateTimeKind.Local), IsDeleted = false, Text = "Consequatur et minus quia qui fuga quia omnis.", UserId = "538a13da-2a85-426a-80fb-3388aa78c68a", WasRead = false },
                        new { Id = 33, ChatId = 21, CreatedAt = new DateTime(2018, 9, 1, 9, 43, 41, 791, DateTimeKind.Local), IsDeleted = false, Text = "Sed sed consequatur ad id magni.", UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", WasRead = false },
                        new { Id = 34, ChatId = 23, CreatedAt = new DateTime(2018, 9, 1, 5, 14, 7, 727, DateTimeKind.Local), IsDeleted = false, Text = "Nisi laborum molestiae unde consectetur non cumque.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761", WasRead = true },
                        new { Id = 35, ChatId = 23, CreatedAt = new DateTime(2018, 9, 1, 11, 44, 0, 426, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatem inventore et rerum minus et eaque.", UserId = "2984b34d-5667-4986-8eef-ec4e17658c33", WasRead = true },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 9, 1, 23, 9, 29, 927, DateTimeKind.Local), IsDeleted = false, Text = "Qui et et reiciendis.", UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", WasRead = true },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 9, 1, 16, 15, 49, 192, DateTimeKind.Local), IsDeleted = false, Text = "Fugit omnis voluptas velit sunt qui in veniam.", UserId = "2133e14e-a893-4630-9c75-b8f41dce4c1c", WasRead = false },
                        new { Id = 38, ChatId = 22, CreatedAt = new DateTime(2018, 9, 1, 21, 12, 29, 577, DateTimeKind.Local), IsDeleted = false, Text = "Maxime numquam vitae corrupti repudiandae aut repellat.", UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", WasRead = false },
                        new { Id = 39, ChatId = 22, CreatedAt = new DateTime(2018, 9, 1, 5, 57, 18, 812, DateTimeKind.Local), IsDeleted = false, Text = "Qui quis dolor quisquam.", UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", WasRead = false },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 9, 1, 16, 37, 59, 517, DateTimeKind.Local), IsDeleted = false, Text = "Ratione veniam vel odio nesciunt doloremque laudantium sed sint.", UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 1, 6, 57, 34, 661, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Omnis corrupti ut aliquid tempore sint ab non.", UserId = "37cdecd7-aaac-4dc2-9c84-7e7289b521c4", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 1, 14, 21, 20, 774, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Consectetur velit laudantium delectus et.", UserId = "2133e14e-a893-4630-9c75-b8f41dce4c1c", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 1, 3, 24, 55, 38, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Illum labore ex.", UserId = "2984b34d-5667-4986-8eef-ec4e17658c33", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 1, 17, 55, 23, 113, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Aut voluptas consequatur qui dolorem expedita corrupti et laborum illo.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 1, 2, 41, 46, 334, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Et rem quibusdam quae laborum iste ex corrupti.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 1, 10, 45, 16, 740, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Expedita sapiente dolore.", UserId = "2984b34d-5667-4986-8eef-ec4e17658c33", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 1, 10, 20, 26, 742, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Architecto voluptas autem laborum soluta corrupti sed et distinctio aliquid.", UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 1, 14, 27, 21, 972, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Aliquid neque voluptas natus aut qui vel fuga.", UserId = "2984b34d-5667-4986-8eef-ec4e17658c33", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 1, 17, 13, 10, 179, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Vel repellat non omnis et iste consequatur nobis dolores vel.", UserId = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 1, 17, 7, 26, 469, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Beatae harum eligendi eos voluptatem blanditiis itaque.", UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "538a13da-2a85-426a-80fb-3388aa78c68a" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "f7a272fa-80ff-48b3-a78a-a800be071761" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "37cdecd7-aaac-4dc2-9c84-7e7289b521c4" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "047c0189-76a6-4446-8294-3d5e0d3e5d9c" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "047c0189-76a6-4446-8294-3d5e0d3e5d9c" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "8948ed9a-bc9b-4fa4-bd76-e196ae717a71" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(577) 691-9767", CreatedByUserId = "047c0189-76a6-4446-8294-3d5e0d3e5d9c", Description = "Aut consequatur quos. Eos omnis labore sint tenetur sunt voluptas dolorem blanditiis.", Email = "Amina36@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company845", ThemeId = 66, WebSite = "https://malcolm.info" },
                        new { Id = 72, ContactNumber = "(867) 873-0725 x4204", CreatedByUserId = "8948ed9a-bc9b-4fa4-bd76-e196ae717a71", Description = "Molestiae nulla est. Modi cum eveniet culpa dolores. Voluptatibus explicabo et ut aspernatur harum cumque debitis iure optio. Est consequatur at ducimus et.", Email = "Mozelle_Lockman57@gmail.com", IsActive = true, IsDeleted = false, Name = "Company24", ThemeId = 65, WebSite = "http://caroline.info" },
                        new { Id = 73, ContactNumber = "(313) 973-9204 x851", CreatedByUserId = "8948ed9a-bc9b-4fa4-bd76-e196ae717a71", Description = "", Email = "Brad_Bashirian@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company728", ThemeId = 69, WebSite = "https://katlynn.com" },
                        new { Id = 74, ContactNumber = "(255) 205-4271 x42556", CreatedByUserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", Description = "Sint iusto occaecati dicta illum harum dolores impedit autem voluptas.", Email = "Riley.Gutkowski@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company153", ThemeId = 68, WebSite = "https://justus.biz" },
                        new { Id = 75, ContactNumber = "1-866-552-3615 x9077", CreatedByUserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", Description = "Dicta voluptas veniam non enim dignissimos.", Email = "Jaclyn.Krajcik42@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company450", ThemeId = 70, WebSite = "https://moshe.org" },
                        new { Id = 76, ContactNumber = "915.804.6936", CreatedByUserId = "047c0189-76a6-4446-8294-3d5e0d3e5d9c", Description = "Dolorum saepe laboriosam aut ducimus omnis rem vel. Assumenda asperiores illum. Et voluptas ipsam unde.", Email = "Margarete_Hegmann18@gmail.com", IsActive = true, IsDeleted = false, Name = "Company691", ThemeId = 67, WebSite = "http://omer.biz" },
                        new { Id = 77, ContactNumber = "230.244.8763 x821", CreatedByUserId = "2133e14e-a893-4630-9c75-b8f41dce4c1c", Description = "Ex in ratione nemo commodi. Aperiam expedita velit omnis qui veritatis quis. Deserunt cum natus cumque ipsum voluptatibus cumque eos. Officiis dolorem libero perferendis ut quo fuga.", Email = "Ignacio_Gorczany18@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company14", ThemeId = 63, WebSite = "https://reid.info" },
                        new { Id = 78, ContactNumber = "1-445-200-6350", CreatedByUserId = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71", Description = "Quos qui ad atque optio iste veritatis. In neque amet animi recusandae nisi aut accusantium ipsa est. Consequatur et est quis. Qui nesciunt asperiores necessitatibus sunt exercitationem aperiam voluptatem harum.", Email = "Ozella.OConner@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company464", ThemeId = 69, WebSite = "http://wilford.info" },
                        new { Id = 79, ContactNumber = "752.498.8375 x405", CreatedByUserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", Description = "At minima magni et. Sunt laudantium voluptas est aut exercitationem nam sunt quisquam neque.", Email = "Fidel_Krajcik56@gmail.com", IsActive = true, IsDeleted = false, Name = "Company965", ThemeId = 61, WebSite = "http://rebeca.net" },
                        new { Id = 80, ContactNumber = "1-598-997-6208", CreatedByUserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", Description = "Numquam iusto hic enim dolorum adipisci. Et est quis ex sint tenetur et natus. Voluptatem aut occaecati sequi animi. Voluptate soluta veritatis deleniti facere.", Email = "Lesly11@gmail.com", IsActive = true, IsDeleted = false, Name = "Company568", ThemeId = 61, WebSite = "http://raina.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 1, 10, 26, 11, 135, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Sit consequuntur reprehenderit explicabo sit.", UserId = "2984b34d-5667-4986-8eef-ec4e17658c33" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 1, 21, 50, 23, 857, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Velit quam voluptatem sed aut sapiente cupiditate.", UserId = "538a13da-2a85-426a-80fb-3388aa78c68a" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 1, 7, 43, 44, 409, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Rerum et expedita tempora adipisci consequatur est earum ut quia.", UserId = "538a13da-2a85-426a-80fb-3388aa78c68a" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 1, 1, 9, 30, 814, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Quia consectetur porro atque perferendis est molestiae.", UserId = "2984b34d-5667-4986-8eef-ec4e17658c33" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 1, 16, 8, 33, 965, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Aperiam qui blanditiis.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 1, 19, 56, 4, 316, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Rerum quaerat qui provident rem.", UserId = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 1, 9, 28, 59, 3, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Dolores commodi praesentium id aliquid dicta aperiam maiores est aut.", UserId = "538a13da-2a85-426a-80fb-3388aa78c68a" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 1, 20, 8, 35, 688, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Eligendi quis ut aut nesciunt vitae.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 1, 12, 3, 22, 131, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Nihil sit aut omnis deserunt quisquam omnis qui.", UserId = "f7a272fa-80ff-48b3-a78a-a800be071761" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 1, 3, 6, 3, 911, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Delectus soluta assumenda rerum eligendi totam unde.", UserId = "047c0189-76a6-4446-8294-3d5e0d3e5d9c" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme563" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme236" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme795" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme315" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme390" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme511" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme406" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme389" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme938" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme741" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "538a13da-2a85-426a-80fb-3388aa78c68a", CreatedAt = new DateTime(2018, 9, 1, 0, 28, 48, 302, DateTimeKind.Local), DisplayName = "Laney", Email = "Destany.Walker@yahoo.com", FirstName = "Kareem", IsActive = true, IsDeleted = false, LastName = "Predovic", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg", RoleId = 1 },
                        new { Id = "b2afb5d0-3114-42ab-806c-1f127173d81f", CreatedAt = new DateTime(2018, 9, 1, 12, 8, 4, 251, DateTimeKind.Local), DisplayName = "Deshaun", Email = "Kiera_Gusikowski@hotmail.com", FirstName = "Dangelo", IsActive = true, IsDeleted = false, LastName = "Upton", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg", RoleId = 2 },
                        new { Id = "8948ed9a-bc9b-4fa4-bd76-e196ae717a71", CreatedAt = new DateTime(2018, 9, 1, 10, 27, 25, 47, DateTimeKind.Local), DisplayName = "Shayna", Email = "Hayden.Buckridge62@yahoo.com", FirstName = "Vernice", IsActive = true, IsDeleted = false, LastName = "Hettinger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg", RoleId = 1 },
                        new { Id = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", CreatedAt = new DateTime(2018, 9, 1, 22, 15, 38, 588, DateTimeKind.Local), DisplayName = "Madelynn", Email = "Bailee.Hudson47@hotmail.com", FirstName = "Gabrielle", IsActive = true, IsDeleted = false, LastName = "Romaguera", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg", RoleId = 2 },
                        new { Id = "2984b34d-5667-4986-8eef-ec4e17658c33", CreatedAt = new DateTime(2018, 9, 1, 6, 8, 46, 241, DateTimeKind.Local), DisplayName = "Ettie", Email = "Ora_Ferry42@yahoo.com", FirstName = "Jewel", IsActive = true, IsDeleted = false, LastName = "Heathcote", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg", RoleId = 1 },
                        new { Id = "2133e14e-a893-4630-9c75-b8f41dce4c1c", CreatedAt = new DateTime(2018, 9, 1, 10, 42, 5, 898, DateTimeKind.Local), DisplayName = "Jodie", Email = "Helene_Pfannerstill@yahoo.com", FirstName = "Lemuel", IsActive = true, IsDeleted = false, LastName = "Olson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg", RoleId = 2 },
                        new { Id = "f7a272fa-80ff-48b3-a78a-a800be071761", CreatedAt = new DateTime(2018, 9, 1, 16, 45, 38, 815, DateTimeKind.Local), DisplayName = "Eudora", Email = "Lavinia32@yahoo.com", FirstName = "Tessie", IsActive = true, IsDeleted = false, LastName = "VonRueden", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg", RoleId = 1 },
                        new { Id = "047c0189-76a6-4446-8294-3d5e0d3e5d9c", CreatedAt = new DateTime(2018, 9, 1, 23, 31, 24, 903, DateTimeKind.Local), DisplayName = "Orion", Email = "Leatha.Hoeger92@yahoo.com", FirstName = "Austin", IsActive = true, IsDeleted = false, LastName = "Bernier", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg", RoleId = 1 },
                        new { Id = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71", CreatedAt = new DateTime(2018, 9, 1, 1, 1, 26, 128, DateTimeKind.Local), DisplayName = "Shawna", Email = "Sophia.Schiller@gmail.com", FirstName = "Flo", IsActive = true, IsDeleted = false, LastName = "Kertzmann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg", RoleId = 1 },
                        new { Id = "37cdecd7-aaac-4dc2-9c84-7e7289b521c4", CreatedAt = new DateTime(2018, 9, 1, 1, 31, 45, 433, DateTimeKind.Local), DisplayName = "Hyman", Email = "Bernard40@hotmail.com", FirstName = "Haylie", IsActive = true, IsDeleted = false, LastName = "Kulas", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "538a13da-2a85-426a-80fb-3388aa78c68a", OrganizationId = 75 },
                        new { UserId = "b2afb5d0-3114-42ab-806c-1f127173d81f", OrganizationId = 79 },
                        new { UserId = "8948ed9a-bc9b-4fa4-bd76-e196ae717a71", OrganizationId = 77 },
                        new { UserId = "e8354a9d-9f70-454a-8fb6-bf15ca19cf85", OrganizationId = 74 },
                        new { UserId = "2984b34d-5667-4986-8eef-ec4e17658c33", OrganizationId = 76 },
                        new { UserId = "2133e14e-a893-4630-9c75-b8f41dce4c1c", OrganizationId = 75 },
                        new { UserId = "f7a272fa-80ff-48b3-a78a-a800be071761", OrganizationId = 79 },
                        new { UserId = "047c0189-76a6-4446-8294-3d5e0d3e5d9c", OrganizationId = 79 },
                        new { UserId = "ef5a2a7b-5dee-4d0e-b815-0cac1135cf71", OrganizationId = 78 },
                        new { UserId = "37cdecd7-aaac-4dc2-9c84-7e7289b521c4", OrganizationId = 77 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
