// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180911134658_AddedStatusCheckedAtToInstance")]
    partial class AddedStatusCheckedAtToInstance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 64, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 62, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 89, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 90, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 91, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 86, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 28, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 93, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 42, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 100, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 94, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 54, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "886b78f3-1a13-4eda-bd05-da5f9ceb3359", IsDeleted = false, Name = "explicabo", Type = 0 },
                        new { Id = 22, CreatedById = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", IsDeleted = false, Name = "quod", Type = 0 },
                        new { Id = 23, CreatedById = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", IsDeleted = false, Name = "iste", Type = 0 },
                        new { Id = 24, CreatedById = "dfc5a668-78f7-4868-bb28-5fb599184b2f", IsDeleted = false, Name = "magni", Type = 0 },
                        new { Id = 25, CreatedById = "d5027330-edba-46bd-87e8-5d17cafec535", IsDeleted = false, Name = "at", Type = 0 },
                        new { Id = 26, CreatedById = "e52db057-e8ba-4a30-b771-e5b3982d6721", IsDeleted = false, Name = "laboriosam", Type = 0 },
                        new { Id = 27, CreatedById = "dfc5a668-78f7-4868-bb28-5fb599184b2f", IsDeleted = false, Name = "necessitatibus", Type = 0 },
                        new { Id = 28, CreatedById = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", IsDeleted = false, Name = "dolor", Type = 0 },
                        new { Id = 29, CreatedById = "d8deb96d-e4ec-4100-9238-de69c5786c38", IsDeleted = false, Name = "rem", Type = 0 },
                        new { Id = 30, CreatedById = "886b78f3-1a13-4eda-bd05-da5f9ceb3359", IsDeleted = false, Name = "et", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 10, 18, 36, 18, 521, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title928" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 11, 3, 4, 45, 687, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title211" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 10, 21, 27, 13, 408, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title629" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 11, 14, 3, 4, 925, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title221" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 11, 11, 42, 1, 329, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title792" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 11, 2, 30, 27, 674, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title27" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 10, 21, 25, 6, 376, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title881" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 11, 13, 26, 47, 181, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title663" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 11, 14, 32, 26, 389, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title667" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 10, 21, 1, 21, 413, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title177" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 10, 24, 36, 622, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consectetur quisquam maxime sed placeat dolores quasi nobis.", UserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 10, 17, 45, 42, 533, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eum vel et quis reprehenderit laborum minus.", UserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 7, 14, 21, 644, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui mollitia rerum sed a eum quis recusandae velit.", UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 2, 41, 5, 898, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Non qui tempore voluptate ad quos voluptatem quas rerum voluptas.", UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 11, 4, 36, 46, 356, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Velit corporis ad rem similique.", UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 11, 15, 13, 6, 928, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et praesentium quia quibusdam repudiandae temporibus corporis optio facere.", UserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 11, 3, 53, 945, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Praesentium pariatur quibusdam cumque maiores suscipit.", UserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 11, 5, 43, 35, 281, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et sapiente aut ut non unde non aspernatur.", UserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 12, 7, 39, 77, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Perferendis consequuntur distinctio ea unde est ea nihil a aut.", UserId = "dfc5a668-78f7-4868-bb28-5fb599184b2f", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 5, 7, 26, 841, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Harum illum natus molestias sunt.", UserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "5e:94:b4:e7:82:a0", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance543" },
                        new { Id = 82, Address = "7b:0d:d6:76:9c:ad", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance457" },
                        new { Id = 83, Address = "7a:d6:1c:2f:a6:b8", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance357" },
                        new { Id = 84, Address = "d3:52:74:5d:97:79", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance938" },
                        new { Id = 85, Address = "1c:72:d1:c1:15:30", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance398" },
                        new { Id = 86, Address = "14:2b:e6:be:3f:87", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance710" },
                        new { Id = 87, Address = "26:16:32:e3:40:29", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance254" },
                        new { Id = 88, Address = "e9:73:bf:18:b0:07", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance868" },
                        new { Id = 89, Address = "08:f0:35:2b:7c:a8", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance101" },
                        new { Id = 90, Address = "01:3f:47:9b:1b:05", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Instance114" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 29, CreatedAt = new DateTime(2018, 9, 11, 11, 20, 48, 66, DateTimeKind.Local), IsDeleted = false, Text = "Veritatis voluptatibus similique qui quia voluptate error et.", UserId = "e52db057-e8ba-4a30-b771-e5b3982d6721", WasRead = true },
                        new { Id = 32, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 2, 35, 33, 108, DateTimeKind.Local), IsDeleted = false, Text = "Laboriosam aut libero amet occaecati est non qui deserunt sit.", UserId = "d5027330-edba-46bd-87e8-5d17cafec535", WasRead = true },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 9, 10, 20, 58, 8, 197, DateTimeKind.Local), IsDeleted = false, Text = "Impedit rerum odio est iusto vel.", UserId = "e52db057-e8ba-4a30-b771-e5b3982d6721", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 9, 10, 17, 57, 19, 38, DateTimeKind.Local), IsDeleted = false, Text = "Quia error pariatur maxime impedit dolores.", UserId = "e52db057-e8ba-4a30-b771-e5b3982d6721", WasRead = false },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 6, 56, 13, 366, DateTimeKind.Local), IsDeleted = false, Text = "Veniam distinctio aut cum sed totam sapiente molestiae.", UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38", WasRead = false },
                        new { Id = 36, ChatId = 30, CreatedAt = new DateTime(2018, 9, 11, 9, 25, 26, 742, DateTimeKind.Local), IsDeleted = false, Text = "Totam repellendus ut hic.", UserId = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", WasRead = false },
                        new { Id = 37, ChatId = 24, CreatedAt = new DateTime(2018, 9, 10, 17, 25, 19, 87, DateTimeKind.Local), IsDeleted = false, Text = "Sunt atque facilis exercitationem pariatur nemo rerum et voluptas perspiciatis.", UserId = "dfc5a668-78f7-4868-bb28-5fb599184b2f", WasRead = true },
                        new { Id = 38, ChatId = 24, CreatedAt = new DateTime(2018, 9, 10, 21, 37, 31, 599, DateTimeKind.Local), IsDeleted = false, Text = "Omnis voluptas error eos maxime facere.", UserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", WasRead = true },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 10, 59, 20, 267, DateTimeKind.Local), IsDeleted = false, Text = "Molestiae voluptatem aut reprehenderit voluptatem.", UserId = "14fb8ee9-92d8-4aec-811c-f12481229d30", WasRead = true },
                        new { Id = 40, ChatId = 22, CreatedAt = new DateTime(2018, 9, 11, 11, 2, 45, 166, DateTimeKind.Local), IsDeleted = false, Text = "Doloremque et dolorum expedita temporibus et est et.", UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 4, 9, 6, 351, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Aliquam dolore fugiat est quis sunt.", UserId = "14fb8ee9-92d8-4aec-811c-f12481229d30", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 11, 6, 0, 13, 886, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Asperiores sequi aut quam sed quia ea hic quibusdam enim.", UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 11, 15, 26, 24, 508, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Natus et sapiente eveniet molestias maiores unde.", UserId = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 10, 20, 23, 2, 53, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Consectetur ea voluptas repellat qui eos necessitatibus.", UserId = "e52db057-e8ba-4a30-b771-e5b3982d6721", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 11, 13, 57, 18, 496, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Sapiente sint ipsa deserunt eos esse sit tenetur sit.", UserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 11, 2, 49, 36, 149, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Consequatur consequuntur et quae.", UserId = "e52db057-e8ba-4a30-b771-e5b3982d6721", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 11, 3, 19, 52, 686, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Officia illum aut omnis quidem hic et voluptate.", UserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 10, 20, 29, 52, 641, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Temporibus sapiente dignissimos vero repudiandae.", UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 11, 11, 11, 21, 969, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Consequatur atque sunt sed quidem harum animi.", UserId = "886b78f3-1a13-4eda-bd05-da5f9ceb3359", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 11, 5, 47, 59, 598, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Corporis aut quis cumque doloremque fugiat et laudantium voluptatem unde.", UserId = "886b78f3-1a13-4eda-bd05-da5f9ceb3359", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "d5027330-edba-46bd-87e8-5d17cafec535" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "d5027330-edba-46bd-87e8-5d17cafec535" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "14fb8ee9-92d8-4aec-811c-f12481229d30" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "e52db057-e8ba-4a30-b771-e5b3982d6721" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "333.479.5985", CreatedByUserId = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", Description = "Recusandae voluptatem et. A aut ut aliquid. Voluptatem vel quidem voluptas et eos qui.", Email = "Bessie48@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company224", ThemeId = 61, WebSite = "http://kitty.name" },
                        new { Id = 72, ContactNumber = "1-594-664-9805 x46251", CreatedByUserId = "d8deb96d-e4ec-4100-9238-de69c5786c38", Description = "Quasi optio illo a omnis omnis qui excepturi. Sed ab sed ab porro dolores vitae. Voluptatem ducimus odio non cumque harum. Porro ut error quis est numquam et reiciendis qui iusto.", Email = "Gordon.Boyle@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company829", ThemeId = 70, WebSite = "http://margarete.net" },
                        new { Id = 73, ContactNumber = "484-665-5301 x22139", CreatedByUserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", Description = "Architecto est laborum omnis nesciunt voluptatem corrupti veniam.", Email = "Ralph.Durgan89@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company763", ThemeId = 63, WebSite = "https://nelda.com" },
                        new { Id = 74, ContactNumber = "497.896.7668", CreatedByUserId = "dfc5a668-78f7-4868-bb28-5fb599184b2f", Description = "", Email = "Wilson75@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company300", ThemeId = 62, WebSite = "http://adrain.info" },
                        new { Id = 75, ContactNumber = "712-484-3893", CreatedByUserId = "14fb8ee9-92d8-4aec-811c-f12481229d30", Description = "Nobis facere et quo omnis fuga accusantium eum exercitationem necessitatibus. Qui rerum saepe corrupti rerum id accusantium. Ad sed est ab.", Email = "Devyn34@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company840", ThemeId = 65, WebSite = "http://alexandrine.biz" },
                        new { Id = 76, ContactNumber = "1-650-699-8703 x99419", CreatedByUserId = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", Description = "", Email = "Kari_Bruen7@gmail.com", IsActive = true, IsDeleted = false, Name = "Company434", ThemeId = 64, WebSite = "http://myah.name" },
                        new { Id = 77, ContactNumber = "(899) 314-6268", CreatedByUserId = "886b78f3-1a13-4eda-bd05-da5f9ceb3359", Description = "", Email = "Doug_Heaney84@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company960", ThemeId = 65, WebSite = "http://billy.net" },
                        new { Id = 78, ContactNumber = "(461) 307-7995", CreatedByUserId = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", Description = "Blanditiis reiciendis voluptatum molestias eius quod ratione excepturi vel accusamus. Vitae et quisquam modi. Ipsum deleniti alias eum sit. Rerum tempora maiores consequuntur sint dicta praesentium aut.", Email = "Bo_Williamson58@gmail.com", IsActive = true, IsDeleted = false, Name = "Company103", ThemeId = 66, WebSite = "https://oral.net" },
                        new { Id = 79, ContactNumber = "(554) 935-4745 x477", CreatedByUserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2", Description = "", Email = "Wilfrid36@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company931", ThemeId = 66, WebSite = "http://lloyd.biz" },
                        new { Id = 80, ContactNumber = "919-278-2423", CreatedByUserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0", Description = "Culpa alias sunt sapiente. Rem iusto voluptates. Fugit qui ad fugiat similique labore cupiditate asperiores quia ducimus.", Email = "Amely_Ward@gmail.com", IsActive = true, IsDeleted = false, Name = "Company93", ThemeId = 64, WebSite = "http://helmer.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 10, 19, 15, 36, 537, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Blanditiis dicta earum et fugit.", UserId = "d5027330-edba-46bd-87e8-5d17cafec535" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 7, 41, 52, 969, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Mollitia nostrum et consequatur qui sit consectetur iusto sequi.", UserId = "d5027330-edba-46bd-87e8-5d17cafec535" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 4, 12, 21, 727, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Ut qui quaerat soluta ut fugit doloribus voluptatem.", UserId = "d5027330-edba-46bd-87e8-5d17cafec535" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 5, 41, 25, 738, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Iste ipsa porro eos iusto quo autem.", UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 10, 23, 32, 9, 981, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Enim sapiente ut atque consequatur quasi quam odit aliquam minus.", UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 10, 22, 42, 28, 46, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Et et accusamus aliquam.", UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 5, 20, 26, 725, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Maxime quo nostrum.", UserId = "14fb8ee9-92d8-4aec-811c-f12481229d30" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 11, 1, 40, 26, 809, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Animi quasi omnis eligendi dolorem doloribus quisquam aperiam.", UserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 10, 20, 37, 54, 860, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Accusamus voluptatem rerum.", UserId = "886b78f3-1a13-4eda-bd05-da5f9ceb3359" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 10, 57, 32, 450, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Alias vitae quas non et dolores officia.", UserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme194" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme439" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme491" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme594" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme970" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme999" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme718" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme120" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme507" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme452" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "d35bccfa-a9f4-456c-a18f-e334c78563f0", CreatedAt = new DateTime(2018, 9, 10, 18, 4, 49, 44, DateTimeKind.Local), DisplayName = "Myles", Email = "Mikel_Pfeffer@yahoo.com", FirstName = "Jacey", IsActive = true, IsDeleted = false, LastName = "Zemlak", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg", RoleId = 1 },
                        new { Id = "d8deb96d-e4ec-4100-9238-de69c5786c38", CreatedAt = new DateTime(2018, 9, 10, 18, 48, 31, 903, DateTimeKind.Local), DisplayName = "Brady", Email = "Jamarcus80@gmail.com", FirstName = "Ursula", IsActive = true, IsDeleted = false, LastName = "Veum", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg", RoleId = 2 },
                        new { Id = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2", CreatedAt = new DateTime(2018, 9, 11, 2, 13, 36, 718, DateTimeKind.Local), DisplayName = "Judson", Email = "Ted48@hotmail.com", FirstName = "Gisselle", IsActive = true, IsDeleted = false, LastName = "Feil", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg", RoleId = 2 },
                        new { Id = "e52db057-e8ba-4a30-b771-e5b3982d6721", CreatedAt = new DateTime(2018, 9, 11, 6, 28, 39, 913, DateTimeKind.Local), DisplayName = "Neva", Email = "Carissa.Hartmann@hotmail.com", FirstName = "Obie", IsActive = true, IsDeleted = false, LastName = "Breitenberg", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg", RoleId = 1 },
                        new { Id = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", CreatedAt = new DateTime(2018, 9, 11, 6, 51, 39, 631, DateTimeKind.Local), DisplayName = "Jesus", Email = "Jamaal.Kshlerin96@hotmail.com", FirstName = "Akeem", IsActive = true, IsDeleted = false, LastName = "Gulgowski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg", RoleId = 2 },
                        new { Id = "14fb8ee9-92d8-4aec-811c-f12481229d30", CreatedAt = new DateTime(2018, 9, 11, 4, 1, 44, 410, DateTimeKind.Local), DisplayName = "Aliyah", Email = "Olga.Lakin@hotmail.com", FirstName = "Lawson", IsActive = true, IsDeleted = false, LastName = "Kuphal", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg", RoleId = 1 },
                        new { Id = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", CreatedAt = new DateTime(2018, 9, 11, 13, 56, 58, 351, DateTimeKind.Local), DisplayName = "Demetris", Email = "Cruz2@yahoo.com", FirstName = "Caden", IsActive = true, IsDeleted = false, LastName = "Auer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg", RoleId = 1 },
                        new { Id = "dfc5a668-78f7-4868-bb28-5fb599184b2f", CreatedAt = new DateTime(2018, 9, 11, 8, 17, 55, 593, DateTimeKind.Local), DisplayName = "Jaycee", Email = "Hosea.Reichel64@hotmail.com", FirstName = "Curtis", IsActive = true, IsDeleted = false, LastName = "Fahey", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg", RoleId = 1 },
                        new { Id = "886b78f3-1a13-4eda-bd05-da5f9ceb3359", CreatedAt = new DateTime(2018, 9, 11, 16, 10, 0, 811, DateTimeKind.Local), DisplayName = "Bethel", Email = "Milan.Leannon99@yahoo.com", FirstName = "Camren", IsActive = true, IsDeleted = false, LastName = "Hermann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg", RoleId = 1 },
                        new { Id = "d5027330-edba-46bd-87e8-5d17cafec535", CreatedAt = new DateTime(2018, 9, 11, 4, 14, 59, 746, DateTimeKind.Local), DisplayName = "Scot", Email = "Katelynn_OConner@yahoo.com", FirstName = "Tommie", IsActive = true, IsDeleted = false, LastName = "Effertz", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "d35bccfa-a9f4-456c-a18f-e334c78563f0", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "d8deb96d-e4ec-4100-9238-de69c5786c38", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "c5dd7424-d8cc-404d-ad1d-d3d2362130c2", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "e52db057-e8ba-4a30-b771-e5b3982d6721", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "9e6e82cd-0ccc-4be4-8f6e-479a4a58db00", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "14fb8ee9-92d8-4aec-811c-f12481229d30", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "4e50b15b-ec6b-4ee4-941e-099d059e4bb2", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "dfc5a668-78f7-4868-bb28-5fb599184b2f", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "886b78f3-1a13-4eda-bd05-da5f9ceb3359", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "d5027330-edba-46bd-87e8-5d17cafec535", OrganizationId = 72, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
