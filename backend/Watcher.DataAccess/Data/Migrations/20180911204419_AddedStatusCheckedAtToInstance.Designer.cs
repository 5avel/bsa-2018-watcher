// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180911204419_AddedStatusCheckedAtToInstance")]
    partial class AddedStatusCheckedAtToInstance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 100, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 49, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 37, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 46, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 31, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 100, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 70, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 40, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 82, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 81, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 3, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "24da036f-3088-4cb6-9e7d-07beb16991c1", IsDeleted = false, Name = "quia", Type = 0 },
                        new { Id = 22, CreatedById = "024f3656-21af-43b6-a989-218f35300913", IsDeleted = false, Name = "maxime", Type = 0 },
                        new { Id = 23, CreatedById = "024f3656-21af-43b6-a989-218f35300913", IsDeleted = false, Name = "eos", Type = 0 },
                        new { Id = 24, CreatedById = "a39dd024-76e2-4401-89cf-2e74899e2448", IsDeleted = false, Name = "illo", Type = 0 },
                        new { Id = 25, CreatedById = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6", IsDeleted = false, Name = "eos", Type = 0 },
                        new { Id = 26, CreatedById = "9c91f9de-85da-4ea4-8c5b-181976d6362c", IsDeleted = false, Name = "accusamus", Type = 0 },
                        new { Id = 27, CreatedById = "a7c1dd4b-ca32-4977-aeb8-133be150c795", IsDeleted = false, Name = "magni", Type = 0 },
                        new { Id = 28, CreatedById = "f8496351-6630-4b31-8f73-15324b1e9866", IsDeleted = false, Name = "non", Type = 0 },
                        new { Id = 29, CreatedById = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6", IsDeleted = false, Name = "doloremque", Type = 0 },
                        new { Id = 30, CreatedById = "9c91f9de-85da-4ea4-8c5b-181976d6362c", IsDeleted = false, Name = "ut", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 11, 4, 12, 11, 872, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title807" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 11, 7, 44, 20, 150, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title518" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 11, 2, 43, 33, 973, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title379" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 11, 1, 59, 5, 201, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title341" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 11, 12, 53, 13, 807, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title633" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 11, 19, 24, 54, 624, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title38" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 11, 9, 0, 58, 904, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title589" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 11, 1, 33, 29, 814, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title571" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 11, 6, 51, 1, 310, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title828" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 11, 15, 17, 11, 687, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title648" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 22, 42, 43, 337, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eligendi commodi et consequatur qui est autem.", UserId = "24da036f-3088-4cb6-9e7d-07beb16991c1", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 15, 45, 1, 192, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nihil optio quaerat et ea quaerat enim earum et.", UserId = "f8496351-6630-4b31-8f73-15324b1e9866", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 5, 48, 9, 855, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "In esse eum libero omnis architecto.", UserId = "a39dd024-76e2-4401-89cf-2e74899e2448", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 17, 53, 1, 89, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Tenetur quas occaecati voluptas eos laboriosam voluptas dolores.", UserId = "24da036f-3088-4cb6-9e7d-07beb16991c1", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 11, 14, 50, 59, 854, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Animi officia aut et doloribus perferendis officiis rerum rem minus.", UserId = "f8496351-6630-4b31-8f73-15324b1e9866", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 11, 16, 38, 52, 138, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Corporis sapiente iure dolorum voluptatum eius quisquam.", UserId = "9c91f9de-85da-4ea4-8c5b-181976d6362c", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 4, 15, 59, 700, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Totam adipisci quod.", UserId = "024f3656-21af-43b6-a989-218f35300913", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 11, 10, 50, 0, 195, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Rerum aut distinctio occaecati delectus temporibus vel provident possimus cum.", UserId = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 9, 59, 51, 483, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Enim repellat qui.", UserId = "f8496351-6630-4b31-8f73-15324b1e9866", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 9, 59, 15, 286, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eveniet tenetur nihil distinctio accusantium explicabo et.", UserId = "024f3656-21af-43b6-a989-218f35300913", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "a0:84:9b:fb:20:f6", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance361" },
                        new { Id = 82, Address = "3f:c3:86:0c:11:e7", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance737" },
                        new { Id = 83, Address = "e7:98:b0:49:b5:19", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance774" },
                        new { Id = 84, Address = "ce:3b:57:d0:3b:1a", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance71" },
                        new { Id = 85, Address = "dc:9c:15:c4:d3:11", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance481" },
                        new { Id = 86, Address = "27:b4:98:82:a2:07", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance631" },
                        new { Id = 87, Address = "24:b3:02:46:47:03", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance273" },
                        new { Id = 88, Address = "14:c5:60:b8:fd:4b", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance816" },
                        new { Id = 89, Address = "de:b1:29:f8:4f:19", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance462" },
                        new { Id = 90, Address = "46:81:a7:74:e8:29", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance177" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 11, 0, 49, 422, DateTimeKind.Local), IsDeleted = false, Text = "Quis asperiores ducimus quia necessitatibus doloremque doloremque reprehenderit velit.", UserId = "a7c1dd4b-ca32-4977-aeb8-133be150c795", WasRead = true },
                        new { Id = 32, ChatId = 30, CreatedAt = new DateTime(2018, 9, 11, 10, 21, 21, 587, DateTimeKind.Local), IsDeleted = false, Text = "Adipisci laudantium architecto iusto autem eius sapiente quasi.", UserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c", WasRead = false },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 9, 11, 2, 57, 48, 148, DateTimeKind.Local), IsDeleted = false, Text = "Sed ad tempore et rem vitae dolore.", UserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0", WasRead = false },
                        new { Id = 34, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 0, 49, 34, 288, DateTimeKind.Local), IsDeleted = false, Text = "Atque accusantium suscipit nam quae laboriosam aut maxime nobis id.", UserId = "024f3656-21af-43b6-a989-218f35300913", WasRead = false },
                        new { Id = 35, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 6, 33, 58, 18, DateTimeKind.Local), IsDeleted = false, Text = "Eveniet corporis nisi necessitatibus adipisci sed odio quos fugit.", UserId = "f8496351-6630-4b31-8f73-15324b1e9866", WasRead = false },
                        new { Id = 36, ChatId = 22, CreatedAt = new DateTime(2018, 9, 11, 16, 23, 4, 226, DateTimeKind.Local), IsDeleted = false, Text = "Eligendi voluptas ipsum est.", UserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c", WasRead = true },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 6, 27, 38, 873, DateTimeKind.Local), IsDeleted = false, Text = "Id eius et itaque voluptates et.", UserId = "f8496351-6630-4b31-8f73-15324b1e9866", WasRead = false },
                        new { Id = 38, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 5, 19, 11, 18, DateTimeKind.Local), IsDeleted = false, Text = "Ut est occaecati ea.", UserId = "024f3656-21af-43b6-a989-218f35300913", WasRead = true },
                        new { Id = 39, ChatId = 25, CreatedAt = new DateTime(2018, 9, 10, 23, 55, 15, 92, DateTimeKind.Local), IsDeleted = false, Text = "Qui sit minima perferendis.", UserId = "a7c1dd4b-ca32-4977-aeb8-133be150c795", WasRead = false },
                        new { Id = 40, ChatId = 23, CreatedAt = new DateTime(2018, 9, 11, 7, 36, 30, 890, DateTimeKind.Local), IsDeleted = false, Text = "Quia dolore libero ad ut.", UserId = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 3, 1, 55, 854, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Non voluptatem et aut fuga ex quia magni.", UserId = "0f31f24b-d6b2-454a-9914-581c5fd42469", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 11, 2, 16, 16, 834, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Consequatur soluta sint et libero quis optio et amet accusamus.", UserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 11, 5, 5, 52, 816, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Eum sunt rem aut ut dolorem.", UserId = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 10, 23, 46, 7, 707, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Non nesciunt omnis impedit atque occaecati tenetur aliquid.", UserId = "a39dd024-76e2-4401-89cf-2e74899e2448", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 11, 11, 26, 49, 957, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Non deserunt consequatur eaque repudiandae nam.", UserId = "9c91f9de-85da-4ea4-8c5b-181976d6362c", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 11, 18, 25, 34, 916, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Quisquam magni ut harum expedita inventore.", UserId = "a7c1dd4b-ca32-4977-aeb8-133be150c795", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 11, 11, 26, 8, 862, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Repudiandae vero ut.", UserId = "024f3656-21af-43b6-a989-218f35300913", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 11, 7, 31, 20, 779, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Libero repudiandae perspiciatis dignissimos.", UserId = "9c91f9de-85da-4ea4-8c5b-181976d6362c", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 11, 1, 51, 57, 116, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Aut iusto et.", UserId = "0f31f24b-d6b2-454a-9914-581c5fd42469", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 11, 20, 36, 23, 816, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Incidunt ab iusto facilis id at et saepe.", UserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "a39dd024-76e2-4401-89cf-2e74899e2448" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "24da036f-3088-4cb6-9e7d-07beb16991c1" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 4, UserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "f8496351-6630-4b31-8f73-15324b1e9866" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "0f31f24b-d6b2-454a-9914-581c5fd42469" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(530) 921-7377 x422", CreatedByUserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c", Description = "Architecto aut ipsum et beatae iusto dolorem saepe velit aliquam. Optio nemo minima fugiat.", Email = "Rachel26@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company14", ThemeId = 63, WebSite = "http://amelia.info" },
                        new { Id = 72, ContactNumber = "281-637-1398 x30691", CreatedByUserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c", Description = "Dolores laudantium odit. Beatae aliquam placeat deserunt provident expedita enim autem velit minus. Vitae alias eum cum et accusantium. Unde dolores ducimus nam et dicta.", Email = "Ellis97@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company465", ThemeId = 63, WebSite = "https://lew.info" },
                        new { Id = 73, ContactNumber = "(618) 857-0996", CreatedByUserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0", Description = "", Email = "Veda24@gmail.com", IsActive = true, IsDeleted = false, Name = "Company318", ThemeId = 64, WebSite = "https://wilma.biz" },
                        new { Id = 74, ContactNumber = "1-727-638-1843", CreatedByUserId = "024f3656-21af-43b6-a989-218f35300913", Description = "Ducimus ullam vero necessitatibus ex ipsum cum. Neque modi eveniet sapiente saepe labore enim ex.", Email = "Watson_Lang@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company991", ThemeId = 65, WebSite = "https://tyrel.biz" },
                        new { Id = 75, ContactNumber = "1-405-254-6654 x425", CreatedByUserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0", Description = "", Email = "Norris52@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company409", ThemeId = 67, WebSite = "http://lelah.com" },
                        new { Id = 76, ContactNumber = "(239) 855-1818 x4375", CreatedByUserId = "024f3656-21af-43b6-a989-218f35300913", Description = "Reiciendis repudiandae aliquid. Officia maxime qui labore sed provident sunt minus doloremque inventore. Est dolores temporibus.", Email = "Kendall96@gmail.com", IsActive = true, IsDeleted = false, Name = "Company286", ThemeId = 69, WebSite = "https://ronaldo.com" },
                        new { Id = 77, ContactNumber = "1-929-204-0033", CreatedByUserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0", Description = "", Email = "Modesta23@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company162", ThemeId = 61, WebSite = "https://rupert.info" },
                        new { Id = 78, ContactNumber = "1-942-757-3026 x670", CreatedByUserId = "0f31f24b-d6b2-454a-9914-581c5fd42469", Description = "", Email = "Brisa_Schoen98@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company972", ThemeId = 65, WebSite = "http://ricardo.org" },
                        new { Id = 79, ContactNumber = "1-692-434-0858", CreatedByUserId = "f8496351-6630-4b31-8f73-15324b1e9866", Description = "Quod autem consequatur consequatur id aperiam et. Perspiciatis ducimus quis eos veniam quo quos dicta debitis. Est voluptate assumenda enim dolores eveniet. In molestiae mollitia voluptatibus laboriosam pariatur accusamus ipsam.", Email = "Alison_Ankunding7@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company694", ThemeId = 63, WebSite = "http://bailey.org" },
                        new { Id = 80, ContactNumber = "(999) 691-0484", CreatedByUserId = "24da036f-3088-4cb6-9e7d-07beb16991c1", Description = "Nobis suscipit est totam autem quia mollitia esse perspiciatis ea. Vero repellat quos beatae ipsam quis id. Ex vero dolorum et et est sit ex. Qui vero architecto fugiat possimus dolor cumque consequatur.", Email = "Evangeline16@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company636", ThemeId = 66, WebSite = "https://brody.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 11, 1, 27, 16, 802, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Iusto dolore sed sit quisquam cupiditate.", UserId = "a39dd024-76e2-4401-89cf-2e74899e2448" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 6, 29, 51, 300, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Excepturi ratione at et quibusdam soluta occaecati consectetur.", UserId = "9c91f9de-85da-4ea4-8c5b-181976d6362c" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 13, 32, 59, 720, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Fugiat enim facilis delectus labore qui quidem.", UserId = "a7c1dd4b-ca32-4977-aeb8-133be150c795" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 14, 30, 0, 481, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Sed quia et suscipit accusamus.", UserId = "a39dd024-76e2-4401-89cf-2e74899e2448" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 12, 34, 33, 574, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Nesciunt voluptatem doloremque facere aspernatur voluptas eos nisi in.", UserId = "24da036f-3088-4cb6-9e7d-07beb16991c1" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 11, 21, 57, 2, 15, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Vel velit recusandae est possimus quis repellendus.", UserId = "f8496351-6630-4b31-8f73-15324b1e9866" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 8, 9, 35, 152, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Rerum minus ut consequatur ut.", UserId = "24da036f-3088-4cb6-9e7d-07beb16991c1" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 11, 3, 22, 37, 180, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Aut praesentium sunt labore necessitatibus et in minima nostrum pariatur.", UserId = "a7c1dd4b-ca32-4977-aeb8-133be150c795" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 4, 33, 20, 426, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Molestias sit in sit et et quis.", UserId = "0f31f24b-d6b2-454a-9914-581c5fd42469" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 10, 22, 52, 422, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Et commodi ullam dolores repellat molestiae distinctio et.", UserId = "024f3656-21af-43b6-a989-218f35300913" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme841" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme887" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme481" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme34" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme174" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme288" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme500" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme924" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme70" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme386" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "9c91f9de-85da-4ea4-8c5b-181976d6362c", CreatedAt = new DateTime(2018, 9, 11, 18, 56, 5, 142, DateTimeKind.Local), DisplayName = "Sierra", Email = "Autumn75@hotmail.com", FirstName = "Alec", IsActive = true, IsDeleted = false, LastName = "Block", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg", RoleId = 1 },
                        new { Id = "0f31f24b-d6b2-454a-9914-581c5fd42469", CreatedAt = new DateTime(2018, 9, 11, 19, 3, 6, 935, DateTimeKind.Local), DisplayName = "Hipolito", Email = "Ricardo71@hotmail.com", FirstName = "Hattie", IsActive = true, IsDeleted = false, LastName = "Zemlak", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg", RoleId = 2 },
                        new { Id = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6", CreatedAt = new DateTime(2018, 9, 11, 9, 9, 15, 541, DateTimeKind.Local), DisplayName = "Coy", Email = "Kiera.Schmeler42@yahoo.com", FirstName = "Freddie", IsActive = true, IsDeleted = false, LastName = "Gerlach", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg", RoleId = 2 },
                        new { Id = "a7c1dd4b-ca32-4977-aeb8-133be150c795", CreatedAt = new DateTime(2018, 9, 11, 18, 32, 13, 66, DateTimeKind.Local), DisplayName = "Greyson", Email = "Kendra_Rau@gmail.com", FirstName = "Jane", IsActive = true, IsDeleted = false, LastName = "Marvin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg", RoleId = 1 },
                        new { Id = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0", CreatedAt = new DateTime(2018, 9, 11, 20, 27, 2, 500, DateTimeKind.Local), DisplayName = "Emiliano", Email = "Stanford62@yahoo.com", FirstName = "Dewitt", IsActive = true, IsDeleted = false, LastName = "Kuhic", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg", RoleId = 1 },
                        new { Id = "024f3656-21af-43b6-a989-218f35300913", CreatedAt = new DateTime(2018, 9, 11, 2, 26, 44, 376, DateTimeKind.Local), DisplayName = "Jewell", Email = "Akeem6@yahoo.com", FirstName = "Michaela", IsActive = true, IsDeleted = false, LastName = "Murazik", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg", RoleId = 2 },
                        new { Id = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c", CreatedAt = new DateTime(2018, 9, 11, 20, 10, 20, 608, DateTimeKind.Local), DisplayName = "Genesis", Email = "Chadrick.Mosciski51@yahoo.com", FirstName = "Aleen", IsActive = true, IsDeleted = false, LastName = "Willms", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg", RoleId = 1 },
                        new { Id = "a39dd024-76e2-4401-89cf-2e74899e2448", CreatedAt = new DateTime(2018, 9, 11, 3, 50, 36, 778, DateTimeKind.Local), DisplayName = "Deshawn", Email = "Rebekah59@gmail.com", FirstName = "Vada", IsActive = true, IsDeleted = false, LastName = "Buckridge", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg", RoleId = 1 },
                        new { Id = "24da036f-3088-4cb6-9e7d-07beb16991c1", CreatedAt = new DateTime(2018, 9, 11, 18, 39, 5, 763, DateTimeKind.Local), DisplayName = "Retta", Email = "Maudie.Brown@gmail.com", FirstName = "Sabrina", IsActive = true, IsDeleted = false, LastName = "Rutherford", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg", RoleId = 1 },
                        new { Id = "f8496351-6630-4b31-8f73-15324b1e9866", CreatedAt = new DateTime(2018, 9, 11, 7, 15, 4, 473, DateTimeKind.Local), DisplayName = "Dayne", Email = "Joel_OKon@yahoo.com", FirstName = "Jailyn", IsActive = true, IsDeleted = false, LastName = "Hermann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "9c91f9de-85da-4ea4-8c5b-181976d6362c", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "0f31f24b-d6b2-454a-9914-581c5fd42469", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "841fb6c1-cd08-491c-b1e8-72cd41e43ff6", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "a7c1dd4b-ca32-4977-aeb8-133be150c795", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "b4ae49d7-9ab4-4803-a3db-65c31b0d0bf0", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "024f3656-21af-43b6-a989-218f35300913", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "d8693e92-5cf4-4cd9-9eba-db70b2eb013c", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "a39dd024-76e2-4401-89cf-2e74899e2448", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "24da036f-3088-4cb6-9e7d-07beb16991c1", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "f8496351-6630-4b31-8f73-15324b1e9866", OrganizationId = 72, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
