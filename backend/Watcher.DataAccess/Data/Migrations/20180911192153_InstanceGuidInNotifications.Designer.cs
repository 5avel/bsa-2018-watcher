// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180911192153_InstanceGuidInNotifications")]
    partial class InstanceGuidInNotifications
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 9, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 96, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 92, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 93, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 1, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 96, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 8, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 46, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 4, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 69, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 98, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 39, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 100, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "ca176e61-f550-4e6e-a6a9-b69ba461f707", IsDeleted = false, Name = "nostrum", Type = 0 },
                        new { Id = 22, CreatedById = "bedb5749-96a4-4e19-9c54-fe32499e9fa8", IsDeleted = false, Name = "sunt", Type = 0 },
                        new { Id = 23, CreatedById = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", IsDeleted = false, Name = "dicta", Type = 0 },
                        new { Id = 24, CreatedById = "ca176e61-f550-4e6e-a6a9-b69ba461f707", IsDeleted = false, Name = "omnis", Type = 0 },
                        new { Id = 25, CreatedById = "790dbe85-4e53-4302-9a95-3df7ac88f84f", IsDeleted = false, Name = "id", Type = 0 },
                        new { Id = 26, CreatedById = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 27, CreatedById = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", IsDeleted = false, Name = "iusto", Type = 0 },
                        new { Id = 28, CreatedById = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", IsDeleted = false, Name = "saepe", Type = 0 },
                        new { Id = 29, CreatedById = "ca176e61-f550-4e6e-a6a9-b69ba461f707", IsDeleted = false, Name = "dolorem", Type = 0 },
                        new { Id = 30, CreatedById = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", IsDeleted = false, Name = "praesentium", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 11, 3, 17, 43, 317, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title611" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 11, 11, 6, 21, 167, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title271" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 11, 11, 25, 41, 605, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title795" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 11, 2, 50, 58, 122, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title953" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 11, 7, 11, 44, 262, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title598" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 11, 11, 21, 18, 214, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title64" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 11, 1, 9, 12, 737, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title255" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 11, 13, 5, 50, 583, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title900" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 11, 20, 2, 34, 510, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title652" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 10, 23, 26, 39, 479, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title500" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 5, 16, 9, 753, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Repudiandae illo totam eum.", UserId = "6b2e411e-c208-4c9a-b571-7c1824a2c621", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 4, 5, 30, 436, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Iure soluta aperiam dolorum sint quis.", UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 13, 26, 29, 807, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eum delectus molestiae ad aspernatur consequatur.", UserId = "9557c516-6909-4918-ad95-d8476651c115", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 10, 22, 43, 31, 707, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Enim qui deserunt accusantium suscipit.", UserId = "9557c516-6909-4918-ad95-d8476651c115", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 11, 3, 55, 28, 545, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aliquid consequatur sit quia iusto qui provident.", UserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 11, 9, 32, 5, 677, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Esse iure voluptas et quam quibusdam ut quia.", UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 5, 24, 59, 304, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aut aut nobis.", UserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 10, 23, 28, 0, 552, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Labore eveniet commodi nisi ab saepe.", UserId = "38b090b8-5212-4be8-8271-107f26f0137b", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 13, 22, 14, 663, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quidem dolore qui dolorem qui molestias ut architecto a.", UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 19, 12, 59, 37, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Est quibusdam illo.", UserId = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "a0:6c:b6:e8:b4:c5", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance625" },
                        new { Id = 82, Address = "20:28:47:fd:00:60", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance158" },
                        new { Id = 83, Address = "32:d8:e7:e2:75:22", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance928" },
                        new { Id = 84, Address = "0e:54:67:a5:f1:59", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance679" },
                        new { Id = 85, Address = "b6:ed:23:32:97:9c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance341" },
                        new { Id = 86, Address = "77:3b:f5:e8:39:c7", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance124" },
                        new { Id = 87, Address = "b6:5b:63:87:48:cc", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance448" },
                        new { Id = 88, Address = "b9:ab:27:80:01:45", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance46" },
                        new { Id = 89, Address = "39:15:90:52:2a:d2", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance294" },
                        new { Id = 90, Address = "d3:d3:48:c4:b6:5a", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance420" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 4, 34, 0, 647, DateTimeKind.Local), IsDeleted = false, Text = "Et sunt ullam qui libero provident.", UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f", WasRead = false },
                        new { Id = 32, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 1, 13, 2, 708, DateTimeKind.Local), IsDeleted = false, Text = "Eum omnis et fugiat libero voluptates voluptates.", UserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", WasRead = true },
                        new { Id = 33, ChatId = 27, CreatedAt = new DateTime(2018, 9, 11, 4, 39, 50, 963, DateTimeKind.Local), IsDeleted = false, Text = "Voluptas omnis aliquid.", UserId = "38b090b8-5212-4be8-8271-107f26f0137b", WasRead = false },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 22, 13, 51, 879, DateTimeKind.Local), IsDeleted = false, Text = "Ut ducimus et eum optio autem tempore quam quam dolor.", UserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", WasRead = true },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 20, 52, 37, 820, DateTimeKind.Local), IsDeleted = false, Text = "Aut architecto inventore voluptatem repudiandae nemo ducimus est.", UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", WasRead = true },
                        new { Id = 36, ChatId = 23, CreatedAt = new DateTime(2018, 9, 11, 1, 19, 42, 702, DateTimeKind.Local), IsDeleted = false, Text = "Ipsam sed vero quia iste soluta voluptatem eum molestiae cupiditate.", UserId = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", WasRead = true },
                        new { Id = 37, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 6, 3, 4, 785, DateTimeKind.Local), IsDeleted = false, Text = "Cumque voluptas voluptas illo occaecati saepe rem.", UserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8", WasRead = false },
                        new { Id = 38, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 14, 38, 59, 640, DateTimeKind.Local), IsDeleted = false, Text = "Qui quo non quia tempora qui assumenda odit.", UserId = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", WasRead = false },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 9, 11, 6, 9, 7, 195, DateTimeKind.Local), IsDeleted = false, Text = "Atque ad a omnis sint.", UserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", WasRead = true },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 10, 20, 35, 453, DateTimeKind.Local), IsDeleted = false, Text = "Aliquam modi esse qui consequatur nulla laborum dolor voluptas nihil.", UserId = "6b2e411e-c208-4c9a-b571-7c1824a2c621", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("InstanceGuidId");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 2, 0, 3, 814, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Autem vel id cumque sapiente quo explicabo quaerat.", UserId = "6b2e411e-c208-4c9a-b571-7c1824a2c621", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 11, 16, 20, 11, 250, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Eveniet aut blanditiis delectus a ab.", UserId = "6b2e411e-c208-4c9a-b571-7c1824a2c621", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 11, 21, 36, 58, 358, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Asperiores voluptatem beatae.", UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 10, 23, 46, 36, 788, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Aliquam quod vero.", UserId = "6b2e411e-c208-4c9a-b571-7c1824a2c621", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 11, 17, 8, 47, 102, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Quia impedit qui tenetur nesciunt sapiente consequuntur soluta eveniet.", UserId = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 11, 14, 46, 27, 562, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Ea aperiam distinctio quaerat.", UserId = "8b970bea-dde1-410a-9e85-a46d31bd73a3", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 11, 11, 35, 40, 362, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Laboriosam dolorum recusandae aut incidunt sequi deserunt mollitia ad.", UserId = "8b970bea-dde1-410a-9e85-a46d31bd73a3", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 11, 13, 33, 50, 531, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Voluptas dolore quia ullam amet quis doloribus ipsam.", UserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 11, 8, 2, 42, 555, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Et cumque eius beatae.", UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 11, 9, 34, 42, 656, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Consequatur dolor sunt quibusdam voluptas molestiae aut.", UserId = "38b090b8-5212-4be8-8271-107f26f0137b", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "38b090b8-5212-4be8-8271-107f26f0137b" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "38b090b8-5212-4be8-8271-107f26f0137b" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "ca176e61-f550-4e6e-a6a9-b69ba461f707" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "9557c516-6909-4918-ad95-d8476651c115" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "629.535.2439 x84979", CreatedByUserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f", Description = "Ducimus error qui quia nemo in. Quia et sit aut eum fugiat sed nemo omnis et. A est iure aut voluptate perferendis dolor.", Email = "Carole.Spencer27@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company614", ThemeId = 67, WebSite = "https://jake.biz" },
                        new { Id = 72, ContactNumber = "(877) 311-0545", CreatedByUserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8", Description = "Quia perferendis dicta explicabo. Sequi vel nisi libero molestiae molestias non. Modi aut harum eaque quia voluptate. Molestiae corporis dicta consequatur tempore fugit eius officiis maxime.", Email = "Bernita_Altenwerth41@gmail.com", IsActive = true, IsDeleted = false, Name = "Company476", ThemeId = 63, WebSite = "https://pamela.org" },
                        new { Id = 73, ContactNumber = "1-677-939-0443 x112", CreatedByUserId = "ca176e61-f550-4e6e-a6a9-b69ba461f707", Description = "Porro quam qui itaque molestias mollitia iste optio perspiciatis cupiditate. Quis odit ut laboriosam minima. Ea reprehenderit porro qui quidem necessitatibus est dolore. Laboriosam fuga molestiae vero corporis qui veritatis et rerum.", Email = "Tre_Ziemann@gmail.com", IsActive = true, IsDeleted = false, Name = "Company962", ThemeId = 64, WebSite = "https://nayeli.info" },
                        new { Id = 74, ContactNumber = "347-281-7056 x662", CreatedByUserId = "38b090b8-5212-4be8-8271-107f26f0137b", Description = "Est modi unde modi eaque accusantium veritatis necessitatibus at. Blanditiis est saepe dignissimos et quibusdam. Eveniet voluptates voluptatum ut velit natus maiores. Minima eos maxime quo quia eius cum aspernatur rem et.", Email = "Alexa26@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company810", ThemeId = 65, WebSite = "https://marlene.org" },
                        new { Id = 75, ContactNumber = "917-934-8265 x3713", CreatedByUserId = "9557c516-6909-4918-ad95-d8476651c115", Description = "", Email = "Ashleigh.Collier@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company463", ThemeId = 63, WebSite = "http://jamel.org" },
                        new { Id = 76, ContactNumber = "864.432.8894 x3652", CreatedByUserId = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", Description = "Voluptatem eos et assumenda a eos doloremque animi debitis.", Email = "Tyrell.McGlynn@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company778", ThemeId = 67, WebSite = "http://jillian.info" },
                        new { Id = 77, ContactNumber = "(443) 978-4987 x25982", CreatedByUserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", Description = "A magnam consequatur similique sint non occaecati voluptatem delectus. Atque culpa quos assumenda repellat voluptates veniam assumenda. Nostrum est consequuntur modi sequi.", Email = "Oscar10@gmail.com", IsActive = true, IsDeleted = false, Name = "Company316", ThemeId = 67, WebSite = "http://gene.org" },
                        new { Id = 78, ContactNumber = "1-449-507-1933 x92560", CreatedByUserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", Description = "Velit fugiat accusantium pariatur harum. Iste esse enim rerum id. Dolores velit ad officiis sapiente maiores ipsam rerum suscipit culpa. Quasi consectetur sunt voluptatem voluptatem.", Email = "Armand.VonRueden@gmail.com", IsActive = true, IsDeleted = false, Name = "Company972", ThemeId = 65, WebSite = "http://jerome.com" },
                        new { Id = 79, ContactNumber = "(684) 702-1636 x67096", CreatedByUserId = "6b2e411e-c208-4c9a-b571-7c1824a2c621", Description = "Distinctio veritatis tenetur sed occaecati ut totam repudiandae ad perferendis. Laborum est eos.", Email = "Blake.Boyer@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company417", ThemeId = 62, WebSite = "http://manuela.biz" },
                        new { Id = 80, ContactNumber = "751.241.1462 x3084", CreatedByUserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", Description = "Numquam doloremque et similique est commodi rerum ab velit. Asperiores ullam sed quisquam voluptas amet sapiente consequuntur minus.", Email = "Javon34@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company28", ThemeId = 68, WebSite = "http://ezra.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 11, 6, 46, 3, 800, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Odio dolore ut.", UserId = "8b970bea-dde1-410a-9e85-a46d31bd73a3" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 6, 27, 35, 510, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Nostrum accusamus totam reprehenderit commodi quos autem modi.", UserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 10, 1, 14, 704, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Impedit tempora et fugiat accusantium est sit amet esse.", UserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 1, 52, 58, 653, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Animi autem excepturi est.", UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 3, 13, 17, 977, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Consequuntur aut quidem.", UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 11, 1, 22, 6, 743, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Natus et veritatis quidem suscipit voluptatem quod debitis dolorem velit.", UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 18, 27, 28, 847, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Minima omnis assumenda.", UserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 10, 22, 50, 35, 843, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Eos qui consequatur ipsum aut qui culpa quia.", UserId = "38b090b8-5212-4be8-8271-107f26f0137b" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 11, 12, 51, 880, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Qui et et qui.", UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 1, 36, 18, 542, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Repudiandae est ea reiciendis veritatis culpa a nulla quia.", UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme826" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme251" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme159" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme531" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme664" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme283" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme94" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme770" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme402" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme932" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "38b090b8-5212-4be8-8271-107f26f0137b", CreatedAt = new DateTime(2018, 9, 11, 12, 42, 29, 445, DateTimeKind.Local), DisplayName = "Angeline", Email = "Mireya_Williamson@yahoo.com", FirstName = "Katrina", IsActive = true, IsDeleted = false, LastName = "Zboncak", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg", RoleId = 2 },
                        new { Id = "bedb5749-96a4-4e19-9c54-fe32499e9fa8", CreatedAt = new DateTime(2018, 9, 11, 4, 39, 53, 274, DateTimeKind.Local), DisplayName = "Autumn", Email = "Erika_Brown5@yahoo.com", FirstName = "Xander", IsActive = true, IsDeleted = false, LastName = "Marks", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg", RoleId = 2 },
                        new { Id = "ca176e61-f550-4e6e-a6a9-b69ba461f707", CreatedAt = new DateTime(2018, 9, 11, 12, 7, 39, 673, DateTimeKind.Local), DisplayName = "Isaac", Email = "Janessa.Romaguera@gmail.com", FirstName = "Cora", IsActive = true, IsDeleted = false, LastName = "Heathcote", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg", RoleId = 1 },
                        new { Id = "6b2e411e-c208-4c9a-b571-7c1824a2c621", CreatedAt = new DateTime(2018, 9, 11, 17, 55, 15, 257, DateTimeKind.Local), DisplayName = "Jose", Email = "Prince.Weber@gmail.com", FirstName = "Felicita", IsActive = true, IsDeleted = false, LastName = "Macejkovic", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg", RoleId = 1 },
                        new { Id = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", CreatedAt = new DateTime(2018, 9, 11, 12, 35, 47, 475, DateTimeKind.Local), DisplayName = "Bonita", Email = "Stacy.Ankunding@gmail.com", FirstName = "Quinton", IsActive = true, IsDeleted = false, LastName = "Flatley", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg", RoleId = 2 },
                        new { Id = "8b970bea-dde1-410a-9e85-a46d31bd73a3", CreatedAt = new DateTime(2018, 9, 11, 4, 50, 22, 331, DateTimeKind.Local), DisplayName = "Amelie", Email = "Magnus64@gmail.com", FirstName = "Brian", IsActive = true, IsDeleted = false, LastName = "Steuber", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg", RoleId = 2 },
                        new { Id = "790dbe85-4e53-4302-9a95-3df7ac88f84f", CreatedAt = new DateTime(2018, 9, 11, 15, 46, 9, 117, DateTimeKind.Local), DisplayName = "Roslyn", Email = "Addison.Tillman@hotmail.com", FirstName = "Johnson", IsActive = true, IsDeleted = false, LastName = "Rodriguez", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg", RoleId = 2 },
                        new { Id = "9557c516-6909-4918-ad95-d8476651c115", CreatedAt = new DateTime(2018, 9, 11, 1, 31, 2, 656, DateTimeKind.Local), DisplayName = "Collin", Email = "Jana_Steuber@gmail.com", FirstName = "Roxane", IsActive = true, IsDeleted = false, LastName = "Lind", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg", RoleId = 2 },
                        new { Id = "91427d15-02cf-4321-91a4-ee64f69d18d9", CreatedAt = new DateTime(2018, 9, 11, 18, 31, 58, 577, DateTimeKind.Local), DisplayName = "Maida", Email = "Judy.Goodwin@gmail.com", FirstName = "Kailee", IsActive = true, IsDeleted = false, LastName = "Kassulke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg", RoleId = 2 },
                        new { Id = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", CreatedAt = new DateTime(2018, 9, 11, 7, 34, 21, 462, DateTimeKind.Local), DisplayName = "Garry", Email = "Ashlee_Abshire@gmail.com", FirstName = "Dejah", IsActive = true, IsDeleted = false, LastName = "Renner", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "38b090b8-5212-4be8-8271-107f26f0137b", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "bedb5749-96a4-4e19-9c54-fe32499e9fa8", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "ca176e61-f550-4e6e-a6a9-b69ba461f707", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "6b2e411e-c208-4c9a-b571-7c1824a2c621", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "c8c48ce7-7e59-4b3c-8eca-e262d1ede5b0", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "8b970bea-dde1-410a-9e85-a46d31bd73a3", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "790dbe85-4e53-4302-9a95-3df7ac88f84f", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "9557c516-6909-4918-ad95-d8476651c115", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "91427d15-02cf-4321-91a4-ee64f69d18d9", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "f5debfb9-dfc8-4f26-8583-7f91f2940f22", OrganizationId = 72, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
