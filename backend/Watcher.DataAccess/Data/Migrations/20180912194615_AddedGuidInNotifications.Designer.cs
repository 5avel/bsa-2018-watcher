// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180912194615_AddedGuidInNotifications")]
    partial class AddedGuidInNotifications
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 16, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 36, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 84, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 42, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 90, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 55, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 81, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 88, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 90, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 50, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 84, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 52, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 84, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 4, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 81, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 52, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 81, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 13, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", IsDeleted = false, Name = "eum", Type = 0 },
                        new { Id = 22, CreatedById = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", IsDeleted = false, Name = "ipsa", Type = 0 },
                        new { Id = 23, CreatedById = "6eaef575-0500-4c20-b59b-03f452842bdf", IsDeleted = false, Name = "eveniet", Type = 0 },
                        new { Id = 24, CreatedById = "c7cb6c73-9895-498f-a06b-33597f76d4c5", IsDeleted = false, Name = "ipsam", Type = 0 },
                        new { Id = 25, CreatedById = "f8a2257c-6f5b-420f-b475-716fa7dccd4a", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 26, CreatedById = "6eaef575-0500-4c20-b59b-03f452842bdf", IsDeleted = false, Name = "facilis", Type = 0 },
                        new { Id = 27, CreatedById = "c7cb6c73-9895-498f-a06b-33597f76d4c5", IsDeleted = false, Name = "dolor", Type = 0 },
                        new { Id = 28, CreatedById = "c7cb6c73-9895-498f-a06b-33597f76d4c5", IsDeleted = false, Name = "maiores", Type = 0 },
                        new { Id = 29, CreatedById = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", IsDeleted = false, Name = "ipsum", Type = 0 },
                        new { Id = 30, CreatedById = "f8a2257c-6f5b-420f-b475-716fa7dccd4a", IsDeleted = false, Name = "ipsam", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 12, 18, 34, 2, 582, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title12" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 12, 10, 8, 15, 837, DateTimeKind.Local), InstanceId = 75, IsDeleted = false, Title = "Title152" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 12, 0, 10, 51, 655, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title228" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 12, 0, 19, 24, 710, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title530" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 12, 22, 7, 15, 746, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title932" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 12, 11, 41, 14, 50, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title391" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 12, 9, 6, 51, 911, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title634" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 12, 18, 1, 43, 921, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title541" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 12, 1, 48, 40, 992, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title657" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 12, 22, 29, 43, 414, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title52" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 12, 13, 10, 11, 930, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ea deleniti sunt ab sequi dicta omnis animi libero.", UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 12, 9, 27, 54, 149, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Autem impedit unde.", UserId = "f8a2257c-6f5b-420f-b475-716fa7dccd4a", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 12, 9, 20, 47, 457, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Accusamus culpa natus.", UserId = "c7cb6c73-9895-498f-a06b-33597f76d4c5", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 12, 6, 1, 41, 243, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "At optio et et id modi beatae saepe.", UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 12, 10, 23, 15, 754, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aliquid saepe quia.", UserId = "6eaef575-0500-4c20-b59b-03f452842bdf", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 12, 15, 57, 39, 171, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut quasi quos commodi aut.", UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 12, 18, 2, 4, 113, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Rerum laudantium nisi dignissimos enim voluptatem nulla accusamus ex.", UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 12, 1, 26, 43, 287, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quo et dignissimos quia aut eum.", UserId = "c7cb6c73-9895-498f-a06b-33597f76d4c5", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 12, 14, 54, 21, 959, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Distinctio aut non dolores.", UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 12, 2, 19, 29, 359, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sed quis quae velit sequi veritatis.", UserId = "50593a1b-bc00-4fae-8ad9-7077d3fe19ee", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "28:af:d8:73:a1:8d", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance528" },
                        new { Id = 72, Address = "d9:8d:eb:c0:1c:e2", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 67, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance487" },
                        new { Id = 73, Address = "8a:5a:d4:d0:c1:ef", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance891" },
                        new { Id = 74, Address = "d2:6f:73:4c:7e:36", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance408" },
                        new { Id = 75, Address = "29:c8:77:e7:96:fd", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance493" },
                        new { Id = 76, Address = "43:b6:21:fc:4a:ce", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance425" },
                        new { Id = 77, Address = "20:70:9e:74:92:69", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance695" },
                        new { Id = 78, Address = "b2:08:ff:30:61:c2", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance256" },
                        new { Id = 79, Address = "2a:19:b1:39:c5:1b", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance227" },
                        new { Id = 80, Address = "5a:27:e9:cc:93:b8", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance11" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 25, CreatedAt = new DateTime(2018, 9, 12, 17, 30, 43, 314, DateTimeKind.Local), IsDeleted = false, Text = "Ut magnam et vitae ullam voluptatibus non.", UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", WasRead = false },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 9, 12, 9, 59, 0, 410, DateTimeKind.Local), IsDeleted = false, Text = "Culpa corporis velit quo ut enim nam optio.", UserId = "c7cb6c73-9895-498f-a06b-33597f76d4c5", WasRead = true },
                        new { Id = 33, ChatId = 21, CreatedAt = new DateTime(2018, 9, 12, 2, 9, 18, 727, DateTimeKind.Local), IsDeleted = false, Text = "Quis aut sed sequi est.", UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", WasRead = false },
                        new { Id = 34, ChatId = 28, CreatedAt = new DateTime(2018, 9, 12, 20, 15, 50, 881, DateTimeKind.Local), IsDeleted = false, Text = "Illum quia sapiente mollitia.", UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a", WasRead = true },
                        new { Id = 35, ChatId = 28, CreatedAt = new DateTime(2018, 9, 12, 14, 50, 30, 385, DateTimeKind.Local), IsDeleted = false, Text = "Sunt iste animi quia temporibus reiciendis ut odit est.", UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", WasRead = true },
                        new { Id = 36, ChatId = 29, CreatedAt = new DateTime(2018, 9, 12, 10, 56, 42, 72, DateTimeKind.Local), IsDeleted = false, Text = "Temporibus molestiae officiis sunt.", UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a", WasRead = false },
                        new { Id = 37, ChatId = 26, CreatedAt = new DateTime(2018, 9, 12, 15, 34, 37, 300, DateTimeKind.Local), IsDeleted = false, Text = "Occaecati sequi vel sed nemo porro sit deserunt.", UserId = "f8a2257c-6f5b-420f-b475-716fa7dccd4a", WasRead = false },
                        new { Id = 38, ChatId = 29, CreatedAt = new DateTime(2018, 9, 12, 12, 3, 4, 782, DateTimeKind.Local), IsDeleted = false, Text = "Est repellendus sit dolor qui totam non deserunt.", UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", WasRead = false },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 9, 12, 1, 19, 21, 784, DateTimeKind.Local), IsDeleted = false, Text = "Libero praesentium perferendis hic.", UserId = "64f2bf53-0184-44f6-b778-c46ebd040968", WasRead = false },
                        new { Id = 40, ChatId = 24, CreatedAt = new DateTime(2018, 9, 12, 13, 25, 50, 989, DateTimeKind.Local), IsDeleted = false, Text = "Ipsum voluptate odio.", UserId = "64f2bf53-0184-44f6-b778-c46ebd040968", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("InstanceGuidId");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 12, 0, 31, 10, 134, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Aut consequuntur amet qui.", UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 12, 1, 45, 18, 155, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Ut porro maiores et totam cupiditate amet quibusdam iusto.", UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 12, 19, 45, 44, 290, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Porro architecto id et facere unde reprehenderit.", UserId = "f8a2257c-6f5b-420f-b475-716fa7dccd4a", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 11, 23, 41, 52, 544, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Atque esse cumque at facere.", UserId = "cca3fb1b-6b17-4629-bb52-b06163ed3252", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 12, 21, 32, 53, 964, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Quia molestias et voluptas odio.", UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 12, 18, 34, 30, 371, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Cumque consectetur nihil eos qui dicta illo qui modi.", UserId = "cca3fb1b-6b17-4629-bb52-b06163ed3252", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 12, 11, 20, 7, 143, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Ut repudiandae distinctio dolores ab dolorem sit ipsa.", UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 12, 16, 11, 40, 211, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Quam non dignissimos quo deleniti cumque quasi repellat.", UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 12, 5, 0, 16, 63, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Dolorum eum laborum quibusdam ipsum id esse.", UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 12, 7, 6, 17, 978, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Porro odit nemo repellat.", UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 3, UserId = "cca3fb1b-6b17-4629-bb52-b06163ed3252" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "6eaef575-0500-4c20-b59b-03f452842bdf" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "f8a2257c-6f5b-420f-b475-716fa7dccd4a" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "50593a1b-bc00-4fae-8ad9-7077d3fe19ee" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 4, UserId = "f8a2257c-6f5b-420f-b475-716fa7dccd4a" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "1-796-420-5948 x57950", CreatedByUserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", Description = "Quibusdam veritatis similique odio commodi. Dolorem recusandae molestiae at blanditiis. Consequatur enim autem. Ipsa rerum illo atque consequatur.", Email = "Juston.Ward@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company865", ThemeId = 1, WebSite = "http://dorthy.info" },
                        new { Id = 62, ContactNumber = "674.339.8732 x1845", CreatedByUserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", Description = "", Email = "Georgiana47@gmail.com", IsActive = true, IsDeleted = false, Name = "Company365", ThemeId = 2, WebSite = "http://sabina.net" },
                        new { Id = 63, ContactNumber = "553-827-1455 x1666", CreatedByUserId = "64f2bf53-0184-44f6-b778-c46ebd040968", Description = "Est est eum labore vero. Commodi nulla ipsam et maxime quia culpa. Aut asperiores perferendis beatae necessitatibus iure. Praesentium incidunt consequatur delectus ut vel beatae.", Email = "Yasmeen.Schaden99@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company641", ThemeId = 2, WebSite = "http://tressa.net" },
                        new { Id = 64, ContactNumber = "1-298-580-5165 x7571", CreatedByUserId = "cfdc2394-bcac-467f-9bd1-b099c449549a", Description = "Ad necessitatibus dolorem.", Email = "Trey.Hudson55@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company325", ThemeId = 2, WebSite = "https://summer.info" },
                        new { Id = 65, ContactNumber = "938.881.0357 x07341", CreatedByUserId = "50593a1b-bc00-4fae-8ad9-7077d3fe19ee", Description = "Dicta quis debitis id velit.", Email = "Frances30@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company593", ThemeId = 1, WebSite = "https://jacinto.biz" },
                        new { Id = 66, ContactNumber = "952-818-8715 x7294", CreatedByUserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", Description = "Aut ipsum et dolore nihil sapiente molestiae aut ducimus est. Consequatur veniam sed vero rem sed dolor amet corrupti. Debitis eos veritatis saepe iusto et itaque velit et. Et explicabo quaerat molestiae aperiam quo unde.", Email = "Destany23@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company935", ThemeId = 1, WebSite = "http://donato.net" },
                        new { Id = 67, ContactNumber = "332.490.3323 x9631", CreatedByUserId = "cfdc2394-bcac-467f-9bd1-b099c449549a", Description = "", Email = "Jerrell.Abshire@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company830", ThemeId = 1, WebSite = "https://margarete.biz" },
                        new { Id = 68, ContactNumber = "(592) 993-3570", CreatedByUserId = "64f2bf53-0184-44f6-b778-c46ebd040968", Description = "Laudantium adipisci nam. Nulla asperiores autem vel asperiores sed blanditiis ut.", Email = "Yadira65@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company105", ThemeId = 2, WebSite = "http://bobby.name" },
                        new { Id = 69, ContactNumber = "1-774-259-6817 x1480", CreatedByUserId = "c7cb6c73-9895-498f-a06b-33597f76d4c5", Description = "Veritatis numquam et molestiae quam. Provident illo voluptate aut repudiandae. Et ratione voluptatem aliquid nemo consequuntur magnam ullam.", Email = "Mertie.Cassin31@gmail.com", IsActive = true, IsDeleted = false, Name = "Company772", ThemeId = 2, WebSite = "https://elvera.info" },
                        new { Id = 70, ContactNumber = "1-489-724-5605", CreatedByUserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", Description = "", Email = "Aleen.Koch65@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company655", ThemeId = 1, WebSite = "https://alexandre.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 12, 1, 3, 30, 652, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Qui eum facilis velit atque sed molestiae inventore.", UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 12, 3, 15, 24, 889, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Ipsum quaerat quam qui quibusdam distinctio modi blanditiis.", UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 12, 19, 10, 6, 401, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Ex placeat voluptatibus.", UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 12, 20, 47, 19, 554, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Aut nobis officia et repellat et laudantium quo consequuntur.", UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 12, 0, 38, 39, 152, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Qui eos rerum aut fuga sit ea in et corporis.", UserId = "cca3fb1b-6b17-4629-bb52-b06163ed3252" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 12, 11, 26, 46, 596, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Nulla id iste omnis aut deserunt rerum.", UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 12, 14, 13, 39, 574, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Nihil voluptatem suscipit hic aspernatur autem laboriosam.", UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 12, 13, 34, 44, 680, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Et accusamus cupiditate doloremque tenetur autem.", UserId = "6eaef575-0500-4c20-b59b-03f452842bdf" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 12, 9, 4, 24, 54, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Animi est et reiciendis.", UserId = "6eaef575-0500-4c20-b59b-03f452842bdf" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 12, 14, 4, 46, 919, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Ad quaerat et.", UserId = "cca3fb1b-6b17-4629-bb52-b06163ed3252" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", CreatedAt = new DateTime(2018, 9, 12, 9, 19, 0, 813, DateTimeKind.Local), DisplayName = "Tessie", Email = "Malinda_Grady@gmail.com", FirstName = "Phoebe", IsActive = true, IsDeleted = false, LastName = "O'Connell", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg", RoleId = 2 },
                        new { Id = "f8a2257c-6f5b-420f-b475-716fa7dccd4a", CreatedAt = new DateTime(2018, 9, 12, 18, 18, 8, 358, DateTimeKind.Local), DisplayName = "Adolphus", Email = "Arden_Cormier37@hotmail.com", FirstName = "Doris", IsActive = true, IsDeleted = false, LastName = "Will", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg", RoleId = 1 },
                        new { Id = "cfdc2394-bcac-467f-9bd1-b099c449549a", CreatedAt = new DateTime(2018, 9, 12, 6, 44, 34, 502, DateTimeKind.Local), DisplayName = "Federico", Email = "Garrett_Franecki@hotmail.com", FirstName = "Gerhard", IsActive = true, IsDeleted = false, LastName = "Keebler", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg", RoleId = 2 },
                        new { Id = "6eaef575-0500-4c20-b59b-03f452842bdf", CreatedAt = new DateTime(2018, 9, 12, 5, 47, 33, 413, DateTimeKind.Local), DisplayName = "Jensen", Email = "Vida_Skiles@hotmail.com", FirstName = "Lamar", IsActive = true, IsDeleted = false, LastName = "Hilpert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg", RoleId = 2 },
                        new { Id = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", CreatedAt = new DateTime(2018, 9, 12, 8, 25, 32, 805, DateTimeKind.Local), DisplayName = "Merritt", Email = "Colleen86@hotmail.com", FirstName = "Madonna", IsActive = true, IsDeleted = false, LastName = "Ortiz", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg", RoleId = 2 },
                        new { Id = "cca3fb1b-6b17-4629-bb52-b06163ed3252", CreatedAt = new DateTime(2018, 9, 12, 8, 13, 10, 827, DateTimeKind.Local), DisplayName = "Raleigh", Email = "Joanne_Becker78@gmail.com", FirstName = "Estrella", IsActive = true, IsDeleted = false, LastName = "Lesch", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg", RoleId = 1 },
                        new { Id = "c7cb6c73-9895-498f-a06b-33597f76d4c5", CreatedAt = new DateTime(2018, 9, 12, 3, 54, 14, 502, DateTimeKind.Local), DisplayName = "Krystina", Email = "Rosalinda_Schaefer38@gmail.com", FirstName = "Heloise", IsActive = true, IsDeleted = false, LastName = "Larkin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg", RoleId = 2 },
                        new { Id = "50593a1b-bc00-4fae-8ad9-7077d3fe19ee", CreatedAt = new DateTime(2018, 9, 11, 23, 16, 59, 455, DateTimeKind.Local), DisplayName = "Jed", Email = "Merl29@gmail.com", FirstName = "Marina", IsActive = true, IsDeleted = false, LastName = "Bergstrom", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg", RoleId = 1 },
                        new { Id = "64f2bf53-0184-44f6-b778-c46ebd040968", CreatedAt = new DateTime(2018, 9, 12, 21, 32, 35, 621, DateTimeKind.Local), DisplayName = "Lurline", Email = "Kathryne92@gmail.com", FirstName = "Vernice", IsActive = true, IsDeleted = false, LastName = "Bahringer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg", RoleId = 1 },
                        new { Id = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", CreatedAt = new DateTime(2018, 9, 12, 5, 16, 17, 701, DateTimeKind.Local), DisplayName = "Lexie", Email = "Jadon_Block@yahoo.com", FirstName = "Edythe", IsActive = true, IsDeleted = false, LastName = "Hilpert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "06b58a0c-8fd7-4176-a2c7-b6cfd371c19c", OrganizationId = 63, OrganizationRoleId = 1 },
                        new { UserId = "f8a2257c-6f5b-420f-b475-716fa7dccd4a", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "cfdc2394-bcac-467f-9bd1-b099c449549a", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "6eaef575-0500-4c20-b59b-03f452842bdf", OrganizationId = 62, OrganizationRoleId = 1 },
                        new { UserId = "26de10ee-aa98-4b31-b719-b1bb4fb57d8d", OrganizationId = 62, OrganizationRoleId = 1 },
                        new { UserId = "cca3fb1b-6b17-4629-bb52-b06163ed3252", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "c7cb6c73-9895-498f-a06b-33597f76d4c5", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "50593a1b-bc00-4fae-8ad9-7077d3fe19ee", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "64f2bf53-0184-44f6-b778-c46ebd040968", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "6b0096c5-69ef-4d81-93a2-7dbe4abbdf07", OrganizationId = 65, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
