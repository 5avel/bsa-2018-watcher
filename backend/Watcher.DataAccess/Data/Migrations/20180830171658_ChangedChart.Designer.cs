// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180830171658_ChangedChart")]
    partial class ChangedChart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 96, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 97, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 43, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 99, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 100, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 15, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 93, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 36, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 93, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 12, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 92, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 57, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 99, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 68, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 93, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 94, Gradient = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = true, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 72, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "7221ab73-0b1e-474a-912b-9aa7ace94fdf", Name = "quis", Type = 0 },
                        new { Id = 22, CreatedById = "0cc0334a-a604-4fef-89b6-677392e535c1", Name = "eligendi", Type = 0 },
                        new { Id = 23, CreatedById = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2", Name = "nisi", Type = 0 },
                        new { Id = 24, CreatedById = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", Name = "voluptas", Type = 0 },
                        new { Id = 25, CreatedById = "7221ab73-0b1e-474a-912b-9aa7ace94fdf", Name = "dolorem", Type = 0 },
                        new { Id = 26, CreatedById = "0cc0334a-a604-4fef-89b6-677392e535c1", Name = "aut", Type = 0 },
                        new { Id = 27, CreatedById = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2", Name = "qui", Type = 0 },
                        new { Id = 28, CreatedById = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", Name = "beatae", Type = 0 },
                        new { Id = 29, CreatedById = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", Name = "omnis", Type = 0 },
                        new { Id = 30, CreatedById = "45c5b61c-04f3-410b-a4bb-70c0b3d71dab", Name = "ea", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 30, 18, 29, 21, 278, DateTimeKind.Local), InstanceId = 86, Title = "Title150" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 30, 16, 53, 8, 623, DateTimeKind.Local), InstanceId = 90, Title = "Title277" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 29, 23, 29, 33, 969, DateTimeKind.Local), InstanceId = 82, Title = "Title629" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 30, 16, 54, 43, 857, DateTimeKind.Local), InstanceId = 85, Title = "Title750" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 30, 6, 22, 30, 557, DateTimeKind.Local), InstanceId = 90, Title = "Title536" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 30, 16, 40, 53, 305, DateTimeKind.Local), InstanceId = 82, Title = "Title286" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 30, 6, 27, 30, 216, DateTimeKind.Local), InstanceId = 82, Title = "Title975" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 30, 18, 44, 51, 22, DateTimeKind.Local), InstanceId = 88, Title = "Title696" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 30, 17, 43, 42, 651, DateTimeKind.Local), InstanceId = 86, Title = "Title106" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 30, 16, 48, 35, 540, DateTimeKind.Local), InstanceId = 89, Title = "Title912" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 30, 2, 46, 13, 987, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Qui consequuntur corrupti cumque minus minus soluta fugit.", UserId = "9022ac94-1cd8-46cc-a0a8-b24258800d30", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 30, 9, 21, 5, 834, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nihil aut aut animi odit nobis expedita voluptatum molestiae est.", UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 30, 13, 21, 30, 794, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Eos praesentium minima sequi.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 30, 18, 55, 39, 779, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Sit illo inventore beatae.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 30, 1, 53, 17, 853, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Et molestias quis neque quis ut rerum sint.", UserId = "45c5b61c-04f3-410b-a4bb-70c0b3d71dab", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 30, 12, 20, 12, 949, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Omnis ut ipsam enim sed quae ad sit.", UserId = "8a65aa2c-1690-4985-b55a-52cad5015049", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 29, 21, 36, 7, 217, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Qui cupiditate dolorem aliquid enim.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 30, 18, 17, 14, 36, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Est perspiciatis omnis ut consequatur ut qui atque.", UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 30, 10, 24, 38, 797, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Ut eligendi deserunt molestias id.", UserId = "8a65aa2c-1690-4985-b55a-52cad5015049", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 30, 2, 2, 36, 399, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Sint aut aut eaque repellat officiis vel illo.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "73:ec:19:cd:61:fe", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Windows", Title = "Instance582" },
                        new { Id = 82, Address = "11:45:22:0c:0f:e4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 71, Platform = "Linux", Title = "Instance224" },
                        new { Id = 83, Address = "0f:96:40:a1:31:b6", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 77, Platform = "Linux", Title = "Instance74" },
                        new { Id = 84, Address = "86:7f:ad:1e:2a:c6", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 79, Platform = "Windows", Title = "Instance648" },
                        new { Id = 85, Address = "a5:b7:54:b8:a5:1f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Linux", Title = "Instance262" },
                        new { Id = 86, Address = "dd:f3:15:0f:17:dc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 77, Platform = "Linux", Title = "Instance428" },
                        new { Id = 87, Address = "60:e0:e2:2d:b9:91", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Windows", Title = "Instance607" },
                        new { Id = 88, Address = "0f:3c:a8:37:e0:57", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Windows", Title = "Instance880" },
                        new { Id = 89, Address = "6c:cc:e5:99:2e:93", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 75, Platform = "Linux", Title = "Instance987" },
                        new { Id = 90, Address = "1a:5d:3d:98:7a:c4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 79, Platform = "Linux", Title = "Instance27" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 29, CreatedAt = new DateTime(2018, 8, 30, 1, 13, 15, 226, DateTimeKind.Local), Text = "Consectetur architecto vel expedita vel possimus velit.", UserId = "f0a5b62a-da54-4712-9452-6440ef65945d", WasRead = false },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 8, 30, 6, 7, 14, 616, DateTimeKind.Local), Text = "Vitae soluta non eum.", UserId = "45c5b61c-04f3-410b-a4bb-70c0b3d71dab", WasRead = false },
                        new { Id = 33, ChatId = 26, CreatedAt = new DateTime(2018, 8, 30, 7, 29, 34, 528, DateTimeKind.Local), Text = "Vel earum impedit et incidunt aut amet laudantium iusto ut.", UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", WasRead = true },
                        new { Id = 34, ChatId = 24, CreatedAt = new DateTime(2018, 8, 30, 14, 41, 42, 17, DateTimeKind.Local), Text = "Debitis molestiae non dolor.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", WasRead = true },
                        new { Id = 35, ChatId = 21, CreatedAt = new DateTime(2018, 8, 30, 2, 22, 49, 985, DateTimeKind.Local), Text = "Nulla enim repudiandae.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", WasRead = true },
                        new { Id = 36, ChatId = 27, CreatedAt = new DateTime(2018, 8, 30, 11, 43, 20, 406, DateTimeKind.Local), Text = "Repellat qui vel dolores odit doloremque culpa placeat perferendis.", UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf", WasRead = true },
                        new { Id = 37, ChatId = 26, CreatedAt = new DateTime(2018, 8, 30, 9, 43, 41, 380, DateTimeKind.Local), Text = "Quos et voluptas quas beatae veritatis omnis sunt.", UserId = "45c5b61c-04f3-410b-a4bb-70c0b3d71dab", WasRead = false },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 8, 30, 19, 30, 35, 606, DateTimeKind.Local), Text = "Et explicabo eaque porro reprehenderit molestiae iste sed consequatur.", UserId = "9022ac94-1cd8-46cc-a0a8-b24258800d30", WasRead = false },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 8, 29, 21, 7, 12, 67, DateTimeKind.Local), Text = "Doloremque fugit assumenda sit possimus consequatur sit illum velit eum.", UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", WasRead = true },
                        new { Id = 40, ChatId = 28, CreatedAt = new DateTime(2018, 8, 29, 20, 55, 59, 223, DateTimeKind.Local), Text = "Pariatur itaque sunt quos dolore expedita.", UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 30, 10, 12, 42, 808, DateTimeKind.Local), NotificationSettingId = 11, Text = "Asperiores doloribus at dolores quibusdam ipsam repudiandae illo.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 30, 15, 58, 3, 482, DateTimeKind.Local), NotificationSettingId = 19, Text = "Ea quia quo magnam.", UserId = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 30, 7, 55, 46, 613, DateTimeKind.Local), NotificationSettingId = 18, Text = "Reiciendis enim perferendis qui atque quod atque ut.", UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 30, 14, 56, 13, 279, DateTimeKind.Local), NotificationSettingId = 14, Text = "Perspiciatis repudiandae sunt alias dolore.", UserId = "9022ac94-1cd8-46cc-a0a8-b24258800d30", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 30, 6, 27, 9, 834, DateTimeKind.Local), NotificationSettingId = 17, Text = "Vel consectetur sit tempore cum vero corrupti.", UserId = "9022ac94-1cd8-46cc-a0a8-b24258800d30", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 30, 6, 40, 20, 724, DateTimeKind.Local), NotificationSettingId = 12, Text = "Explicabo magnam quo nobis reiciendis ut aut illo fugiat.", UserId = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 30, 17, 5, 15, 812, DateTimeKind.Local), NotificationSettingId = 12, Text = "Possimus expedita ducimus placeat impedit alias a.", UserId = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 29, 23, 7, 42, 543, DateTimeKind.Local), NotificationSettingId = 18, Text = "Sed fugiat repudiandae consequatur.", UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 30, 13, 16, 34, 10, DateTimeKind.Local), NotificationSettingId = 19, Text = "Et alias amet.", UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 30, 7, 38, 13, 219, DateTimeKind.Local), NotificationSettingId = 13, Text = "Voluptatibus non autem.", UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788" },
                        new { Id = 12, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "45c5b61c-04f3-410b-a4bb-70c0b3d71dab" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "9022ac94-1cd8-46cc-a0a8-b24258800d30" },
                        new { Id = 14, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521" },
                        new { Id = 15, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2" },
                        new { Id = 16, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788" },
                        new { Id = 18, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf" },
                        new { Id = 19, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf" },
                        new { Id = 20, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-975-536-0633", CreatedByUserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", Description = "Perspiciatis veritatis ullam tenetur maxime voluptates nam molestias error non.", Email = "Bernadine39@yahoo.com", IsActive = true, Name = "Company506", ThemeId = 69, WebSite = "https://keara.net" },
                        new { Id = 72, ContactNumber = "474.995.9541", CreatedByUserId = "f0a5b62a-da54-4712-9452-6440ef65945d", Description = "Quae nostrum autem facilis earum saepe ipsam possimus ipsa. Officiis est officia nobis excepturi et. Ut sunt est pariatur eveniet. Beatae consequatur velit.", Email = "Kathlyn78@hotmail.com", IsActive = true, Name = "Company741", ThemeId = 70, WebSite = "http://enrique.net" },
                        new { Id = 73, ContactNumber = "1-218-909-9203", CreatedByUserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", Description = "Dicta voluptatem accusantium ratione nostrum ullam rerum provident ratione vel.", Email = "Maryse_Weissnat25@yahoo.com", IsActive = true, Name = "Company631", ThemeId = 67, WebSite = "https://javonte.org" },
                        new { Id = 74, ContactNumber = "910-805-5830 x5678", CreatedByUserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", Description = "Iure quo enim sed et vel laudantium dolorem illum magni. Corrupti consequatur ea excepturi. Nisi molestias fugit consequatur.", Email = "Moises94@hotmail.com", IsActive = true, Name = "Company995", ThemeId = 63, WebSite = "https://maurice.net" },
                        new { Id = 75, ContactNumber = "493.650.0332 x93009", CreatedByUserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", Description = "Voluptatem veniam est nihil at neque. Quis sunt sed perferendis.", Email = "Joelle.Schmeler@yahoo.com", IsActive = true, Name = "Company598", ThemeId = 65, WebSite = "https://allene.org" },
                        new { Id = 76, ContactNumber = "(867) 964-8993", CreatedByUserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", Description = "Provident iusto reprehenderit optio. Sapiente eveniet vitae. Molestiae perferendis qui doloremque quos perspiciatis.", Email = "Kaci_Leannon81@gmail.com", IsActive = true, Name = "Company242", ThemeId = 61, WebSite = "https://jensen.com" },
                        new { Id = 77, ContactNumber = "(349) 931-0048 x7859", CreatedByUserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", Description = "Tenetur et tempore fugit eveniet tempore sapiente voluptate eos. Blanditiis neque nisi velit ratione molestias repellat modi eveniet atque. Dicta quos eveniet quos laudantium placeat.", Email = "Melany19@hotmail.com", IsActive = true, Name = "Company590", ThemeId = 69, WebSite = "https://kylie.org" },
                        new { Id = 78, ContactNumber = "1-903-268-7272 x830", CreatedByUserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", Description = "", Email = "Mohammad68@hotmail.com", IsActive = true, Name = "Company608", ThemeId = 69, WebSite = "https://ross.net" },
                        new { Id = 79, ContactNumber = "(951) 543-5401", CreatedByUserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", Description = "Quisquam provident ea nam omnis dolorem minus error.", Email = "Houston_Walsh25@yahoo.com", IsActive = true, Name = "Company376", ThemeId = 64, WebSite = "https://marjorie.info" },
                        new { Id = 80, ContactNumber = "726.469.6688", CreatedByUserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", Description = "Aut quo reprehenderit nihil accusamus quos rerum.", Email = "Evie48@gmail.com", IsActive = true, Name = "Company308", ThemeId = 69, WebSite = "https://laurel.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 30, 19, 47, 54, 169, DateTimeKind.Local), FeedbackId = 42, Text = "Expedita earum ratione.", UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 30, 6, 24, 58, 385, DateTimeKind.Local), FeedbackId = 41, Text = "Repellat enim corporis qui error consectetur aut veritatis quos.", UserId = "8a65aa2c-1690-4985-b55a-52cad5015049" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 29, 23, 51, 24, 388, DateTimeKind.Local), FeedbackId = 50, Text = "Itaque corrupti adipisci.", UserId = "f0a5b62a-da54-4712-9452-6440ef65945d" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 30, 8, 46, 23, 207, DateTimeKind.Local), FeedbackId = 42, Text = "Dolor explicabo et repudiandae eum ratione veritatis.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 30, 5, 33, 59, 556, DateTimeKind.Local), FeedbackId = 50, Text = "Harum voluptate delectus velit sint ducimus quia ducimus.", UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 30, 2, 25, 55, 312, DateTimeKind.Local), FeedbackId = 43, Text = "Et adipisci quod dolore vitae ipsum.", UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 30, 3, 52, 42, 102, DateTimeKind.Local), FeedbackId = 41, Text = "Mollitia doloribus ut.", UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 30, 5, 38, 8, 581, DateTimeKind.Local), FeedbackId = 46, Text = "Magni in qui exercitationem et tempora.", UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 29, 22, 42, 18, 681, DateTimeKind.Local), FeedbackId = 44, Text = "Placeat qui quis nemo nisi nulla quo dolorem quisquam rerum.", UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 30, 18, 52, 29, 591, DateTimeKind.Local), FeedbackId = 41, Text = "Ut iure officia consequatur aut excepturi fugiat.", UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme482" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme897" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme558" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme998" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme189" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme516" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme394" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme150" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme615" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme637" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "0cc0334a-a604-4fef-89b6-677392e535c1", CreatedAt = new DateTime(2018, 8, 30, 0, 49, 14, 925, DateTimeKind.Local), DisplayName = "Dessie", Email = "Louvenia.Dietrich@gmail.com", FirstName = "Ford", IsActive = true, LastName = "Kassulke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg", RoleId = 2 },
                        new { Id = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", CreatedAt = new DateTime(2018, 8, 29, 21, 12, 30, 563, DateTimeKind.Local), DisplayName = "Amani", Email = "Yolanda.Ruecker27@yahoo.com", FirstName = "Yesenia", IsActive = true, LastName = "Labadie", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg", RoleId = 1 },
                        new { Id = "7221ab73-0b1e-474a-912b-9aa7ace94fdf", CreatedAt = new DateTime(2018, 8, 30, 14, 5, 13, 34, DateTimeKind.Local), DisplayName = "Billy", Email = "Godfrey_Douglas86@yahoo.com", FirstName = "Gwen", IsActive = true, LastName = "McCullough", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg", RoleId = 1 },
                        new { Id = "f851c462-8fe4-48e6-bb81-4d9cfb740521", CreatedAt = new DateTime(2018, 8, 29, 22, 41, 9, 135, DateTimeKind.Local), DisplayName = "Christa", Email = "Kitty.Schiller3@yahoo.com", FirstName = "Elena", IsActive = true, LastName = "Stamm", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg", RoleId = 2 },
                        new { Id = "9022ac94-1cd8-46cc-a0a8-b24258800d30", CreatedAt = new DateTime(2018, 8, 30, 15, 24, 23, 341, DateTimeKind.Local), DisplayName = "Dusty", Email = "Orrin65@yahoo.com", FirstName = "Jadyn", IsActive = true, LastName = "Bogan", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg", RoleId = 2 },
                        new { Id = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2", CreatedAt = new DateTime(2018, 8, 30, 14, 19, 48, 547, DateTimeKind.Local), DisplayName = "Nona", Email = "Sean83@hotmail.com", FirstName = "Jamison", IsActive = true, LastName = "Leannon", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg", RoleId = 2 },
                        new { Id = "45c5b61c-04f3-410b-a4bb-70c0b3d71dab", CreatedAt = new DateTime(2018, 8, 30, 9, 34, 26, 103, DateTimeKind.Local), DisplayName = "Kolby", Email = "Kailyn86@yahoo.com", FirstName = "Eldred", IsActive = true, LastName = "Conroy", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg", RoleId = 2 },
                        new { Id = "f0a5b62a-da54-4712-9452-6440ef65945d", CreatedAt = new DateTime(2018, 8, 30, 3, 26, 41, 214, DateTimeKind.Local), DisplayName = "Elsie", Email = "Candace.Sporer@hotmail.com", FirstName = "Lexie", IsActive = true, LastName = "Wiza", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg", RoleId = 1 },
                        new { Id = "8a65aa2c-1690-4985-b55a-52cad5015049", CreatedAt = new DateTime(2018, 8, 30, 14, 25, 52, 791, DateTimeKind.Local), DisplayName = "Willow", Email = "Quincy_Weber@hotmail.com", FirstName = "Zion", IsActive = true, LastName = "Rau", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg", RoleId = 1 },
                        new { Id = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", CreatedAt = new DateTime(2018, 8, 30, 10, 34, 39, 193, DateTimeKind.Local), DisplayName = "Brielle", Email = "Elvie_Wiegand53@gmail.com", FirstName = "Johnathan", IsActive = true, LastName = "Schiller", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "0cc0334a-a604-4fef-89b6-677392e535c1", OrganizationId = 71 },
                        new { UserId = "cf19e2fd-f01a-4d18-bf12-fd1be10a4299", OrganizationId = 76 },
                        new { UserId = "7221ab73-0b1e-474a-912b-9aa7ace94fdf", OrganizationId = 79 },
                        new { UserId = "f851c462-8fe4-48e6-bb81-4d9cfb740521", OrganizationId = 71 },
                        new { UserId = "9022ac94-1cd8-46cc-a0a8-b24258800d30", OrganizationId = 74 },
                        new { UserId = "30a6915f-cdcd-4b0c-8e2a-c5dc980d73e2", OrganizationId = 77 },
                        new { UserId = "45c5b61c-04f3-410b-a4bb-70c0b3d71dab", OrganizationId = 78 },
                        new { UserId = "f0a5b62a-da54-4712-9452-6440ef65945d", OrganizationId = 75 },
                        new { UserId = "8a65aa2c-1690-4985-b55a-52cad5015049", OrganizationId = 77 },
                        new { UserId = "e70eb5f2-9f73-4b6f-a9d3-bdd0c9413788", OrganizationId = 76 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
