// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180909232926_ExtendedThemeEntity")]
    partial class ExtendedThemeEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 89, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 36, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 82, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 100, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 87, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 70, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 84, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 99, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 84, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 70, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 85, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 3, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 87, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 84, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 90, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 26, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 82, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 66, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 81, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 32, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "c93d5042-5283-4883-bc08-0b707273edbb", IsDeleted = false, Name = "temporibus", Type = 0 },
                        new { Id = 22, CreatedById = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", IsDeleted = false, Name = "ex", Type = 0 },
                        new { Id = 23, CreatedById = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", IsDeleted = false, Name = "blanditiis", Type = 0 },
                        new { Id = 24, CreatedById = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad", IsDeleted = false, Name = "esse", Type = 0 },
                        new { Id = 25, CreatedById = "56c50529-8f61-4811-ad6b-014632e81bc3", IsDeleted = false, Name = "ducimus", Type = 0 },
                        new { Id = 26, CreatedById = "56c50529-8f61-4811-ad6b-014632e81bc3", IsDeleted = false, Name = "voluptas", Type = 0 },
                        new { Id = 27, CreatedById = "15b2e656-c73d-4f52-9de5-4da521a7c5f7", IsDeleted = false, Name = "velit", Type = 0 },
                        new { Id = 28, CreatedById = "25163190-bc6d-4a00-9bef-9daa1f48c357", IsDeleted = false, Name = "eum", Type = 0 },
                        new { Id = 29, CreatedById = "ef405225-ec6a-41a1-bcda-793467d67aa6", IsDeleted = false, Name = "nihil", Type = 0 },
                        new { Id = 30, CreatedById = "15b2e656-c73d-4f52-9de5-4da521a7c5f7", IsDeleted = false, Name = "nisi", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 9, 22, 6, 57, 584, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title709" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 10, 0, 18, 55, 587, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title168" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 9, 15, 50, 2, 286, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title998" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 9, 8, 17, 19, 813, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title328" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 9, 5, 18, 40, 524, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title477" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 9, 19, 25, 23, 612, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title550" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 10, 1, 2, 49, 366, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title941" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 9, 9, 9, 8, 451, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title348" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 10, 1, 17, 52, 944, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title526" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 9, 10, 52, 20, 762, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title474" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 9, 16, 1, 17, 90, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptate sequi laboriosam dolor quaerat.", UserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 10, 0, 9, 41, 515, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Fugiat vero non dolorem.", UserId = "080a477e-414e-409c-8ae6-60935915d212", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 9, 6, 6, 27, 567, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Impedit hic et eum eveniet sunt praesentium quia nihil.", UserId = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 9, 23, 35, 48, 191, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Molestiae enim minus voluptatem et blanditiis illum.", UserId = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 9, 9, 44, 24, 387, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Iure consequuntur error tempore quo dolore tenetur aut tenetur hic.", UserId = "25163190-bc6d-4a00-9bef-9daa1f48c357", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 9, 20, 35, 5, 31, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Provident sed quod eos.", UserId = "c93d5042-5283-4883-bc08-0b707273edbb", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 9, 19, 48, 19, 429, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Repudiandae non tenetur accusamus et ut aut sed velit impedit.", UserId = "25163190-bc6d-4a00-9bef-9daa1f48c357", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 9, 21, 23, 53, 951, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Porro error itaque ut modi aliquam.", UserId = "15b2e656-c73d-4f52-9de5-4da521a7c5f7", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 9, 21, 42, 30, 157, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eveniet ex accusamus vel aut.", UserId = "82f7755a-c076-486d-9ec3-8c8482c04551", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 9, 18, 25, 17, 968, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatem sunt ipsum.", UserId = "ef405225-ec6a-41a1-bcda-793467d67aa6", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "28:5e:9b:40:7d:1a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Windows", Title = "Instance603" },
                        new { Id = 72, Address = "cb:4a:62:d9:11:e1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Windows", Title = "Instance604" },
                        new { Id = 73, Address = "43:17:d9:1d:67:5d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Windows", Title = "Instance232" },
                        new { Id = 74, Address = "48:84:df:00:6d:fa", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", Title = "Instance703" },
                        new { Id = 75, Address = "28:8a:54:15:75:07", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Linux", Title = "Instance326" },
                        new { Id = 76, Address = "d4:7b:12:65:0c:11", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Linux", Title = "Instance180" },
                        new { Id = 77, Address = "bb:a2:63:9f:18:47", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Windows", Title = "Instance849" },
                        new { Id = 78, Address = "de:d5:ec:a1:0c:b8", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Windows", Title = "Instance420" },
                        new { Id = 79, Address = "d1:d9:72:d6:26:cd", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Linux", Title = "Instance657" },
                        new { Id = 80, Address = "75:85:e8:33:de:85", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", Title = "Instance955" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 25, CreatedAt = new DateTime(2018, 9, 9, 11, 8, 54, 341, DateTimeKind.Local), IsDeleted = false, Text = "Eos voluptas corrupti ea quidem.", UserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b", WasRead = false },
                        new { Id = 32, ChatId = 24, CreatedAt = new DateTime(2018, 9, 9, 8, 25, 19, 392, DateTimeKind.Local), IsDeleted = false, Text = "Quo id dolores ut voluptatibus a vel.", UserId = "25163190-bc6d-4a00-9bef-9daa1f48c357", WasRead = false },
                        new { Id = 33, ChatId = 28, CreatedAt = new DateTime(2018, 9, 9, 10, 51, 1, 556, DateTimeKind.Local), IsDeleted = false, Text = "Nihil aut ducimus aperiam qui ut doloribus nihil tempore.", UserId = "080a477e-414e-409c-8ae6-60935915d212", WasRead = false },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 9, 9, 11, 45, 39, 693, DateTimeKind.Local), IsDeleted = false, Text = "Et veritatis qui aut omnis non officia.", UserId = "c93d5042-5283-4883-bc08-0b707273edbb", WasRead = true },
                        new { Id = 35, ChatId = 21, CreatedAt = new DateTime(2018, 9, 9, 12, 1, 33, 335, DateTimeKind.Local), IsDeleted = false, Text = "In deserunt voluptas dolores officia et dolor ullam dolorum id.", UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", WasRead = false },
                        new { Id = 36, ChatId = 24, CreatedAt = new DateTime(2018, 9, 10, 0, 17, 45, 692, DateTimeKind.Local), IsDeleted = false, Text = "Iusto hic eos dicta placeat laborum.", UserId = "ef405225-ec6a-41a1-bcda-793467d67aa6", WasRead = true },
                        new { Id = 37, ChatId = 26, CreatedAt = new DateTime(2018, 9, 10, 0, 8, 36, 460, DateTimeKind.Local), IsDeleted = false, Text = "Qui distinctio magnam tempora ut eaque sed qui fugiat.", UserId = "c93d5042-5283-4883-bc08-0b707273edbb", WasRead = true },
                        new { Id = 38, ChatId = 26, CreatedAt = new DateTime(2018, 9, 9, 22, 46, 57, 563, DateTimeKind.Local), IsDeleted = false, Text = "Ut aliquid sapiente voluptatem ratione eius et quis.", UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", WasRead = true },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 9, 9, 7, 0, 56, 632, DateTimeKind.Local), IsDeleted = false, Text = "Dolorem iure alias quas consequatur.", UserId = "56c50529-8f61-4811-ad6b-014632e81bc3", WasRead = true },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 9, 9, 12, 2, 59, 136, DateTimeKind.Local), IsDeleted = false, Text = "Qui laboriosam debitis.", UserId = "ef405225-ec6a-41a1-bcda-793467d67aa6", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 10, 0, 34, 5, 12, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Aut recusandae distinctio dolores dolorem est consectetur delectus vel.", UserId = "56c50529-8f61-4811-ad6b-014632e81bc3", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 9, 18, 38, 25, 28, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Porro ut adipisci beatae velit ipsam corporis et temporibus porro.", UserId = "82f7755a-c076-486d-9ec3-8c8482c04551", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 9, 2, 49, 21, 140, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Quas saepe et facilis excepturi vero hic accusantium cupiditate.", UserId = "25163190-bc6d-4a00-9bef-9daa1f48c357", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 9, 20, 47, 23, 394, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Harum quibusdam ducimus et incidunt harum placeat velit non excepturi.", UserId = "080a477e-414e-409c-8ae6-60935915d212", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 9, 9, 58, 11, 317, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Non modi eius suscipit repellendus culpa repudiandae.", UserId = "ef405225-ec6a-41a1-bcda-793467d67aa6", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 9, 14, 26, 3, 428, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Et incidunt a est autem quia.", UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 9, 17, 20, 49, 231, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Quasi laboriosam consequatur explicabo beatae dolores dignissimos sunt.", UserId = "080a477e-414e-409c-8ae6-60935915d212", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 9, 13, 4, 23, 23, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Ut sit aut corporis et autem molestiae repellat earum qui.", UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 9, 23, 38, 27, 204, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Temporibus est omnis corporis id ut.", UserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 9, 5, 17, 34, 98, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Voluptate labore nihil dicta totam fugit est quia molestiae et.", UserId = "c93d5042-5283-4883-bc08-0b707273edbb", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "25163190-bc6d-4a00-9bef-9daa1f48c357" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "080a477e-414e-409c-8ae6-60935915d212" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "c93d5042-5283-4883-bc08-0b707273edbb" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "080a477e-414e-409c-8ae6-60935915d212" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "080a477e-414e-409c-8ae6-60935915d212" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "c93d5042-5283-4883-bc08-0b707273edbb" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "(251) 958-8736 x160", CreatedByUserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b", Description = "Nulla quo minus qui velit eius.", Email = "Marie_Weimann60@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company847", ThemeId = 1, WebSite = "http://alice.name" },
                        new { Id = 62, ContactNumber = "320-369-8202 x276", CreatedByUserId = "25163190-bc6d-4a00-9bef-9daa1f48c357", Description = "Sint voluptas placeat qui blanditiis incidunt. Optio ad necessitatibus quas. Dolorum provident in rerum excepturi vitae fuga veritatis enim.", Email = "Amber96@gmail.com", IsActive = true, IsDeleted = false, Name = "Company295", ThemeId = 2, WebSite = "https://mackenzie.name" },
                        new { Id = 63, ContactNumber = "491-301-9491 x11276", CreatedByUserId = "56c50529-8f61-4811-ad6b-014632e81bc3", Description = "Facilis perferendis et aspernatur voluptas a nobis et.", Email = "Tom8@gmail.com", IsActive = true, IsDeleted = false, Name = "Company63", ThemeId = 1, WebSite = "http://isabella.info" },
                        new { Id = 64, ContactNumber = "1-908-566-8501", CreatedByUserId = "c93d5042-5283-4883-bc08-0b707273edbb", Description = "Reprehenderit voluptas et qui quo delectus labore magnam in.", Email = "Gustave_Beier@gmail.com", IsActive = true, IsDeleted = false, Name = "Company360", ThemeId = 2, WebSite = "http://connor.com" },
                        new { Id = 65, ContactNumber = "752.672.7201", CreatedByUserId = "82f7755a-c076-486d-9ec3-8c8482c04551", Description = "", Email = "Moshe.Braun@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company638", ThemeId = 2, WebSite = "https://gustave.biz" },
                        new { Id = 66, ContactNumber = "878.966.8501 x81429", CreatedByUserId = "56c50529-8f61-4811-ad6b-014632e81bc3", Description = "Necessitatibus possimus quos beatae. Dolorem deleniti earum aliquid magnam odio et laudantium dolorum sit.", Email = "Axel_Gleichner91@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company566", ThemeId = 1, WebSite = "http://kayli.info" },
                        new { Id = 67, ContactNumber = "600.727.1898 x8739", CreatedByUserId = "56c50529-8f61-4811-ad6b-014632e81bc3", Description = "Consequatur et perspiciatis similique voluptas sit.", Email = "Gunnar.Klocko@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company908", ThemeId = 1, WebSite = "http://ottilie.info" },
                        new { Id = 68, ContactNumber = "742.364.2240", CreatedByUserId = "82f7755a-c076-486d-9ec3-8c8482c04551", Description = "Deleniti velit architecto ut dolorem labore vel molestiae. Unde est quam illum veritatis impedit occaecati.", Email = "Hobart84@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company597", ThemeId = 1, WebSite = "http://pansy.net" },
                        new { Id = 69, ContactNumber = "820-782-2216 x9978", CreatedByUserId = "25163190-bc6d-4a00-9bef-9daa1f48c357", Description = "", Email = "Karianne94@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company597", ThemeId = 1, WebSite = "https://sandrine.com" },
                        new { Id = 70, ContactNumber = "933-272-7844 x0843", CreatedByUserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", Description = "Dolorum aut illum nihil nihil. Itaque laudantium aliquam voluptatem non consequatur magnam maxime.", Email = "Maurice.Kertzmann@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company392", ThemeId = 2, WebSite = "https://annette.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 9, 9, 39, 25, 392, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Ipsum optio assumenda itaque ratione quam.", UserId = "15b2e656-c73d-4f52-9de5-4da521a7c5f7" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 9, 12, 8, 5, 399, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Quasi ducimus delectus.", UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 9, 18, 6, 47, 308, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Id voluptas animi aperiam animi repellat cupiditate quibusdam ut facere.", UserId = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 9, 18, 51, 46, 694, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Eos facilis aut assumenda similique blanditiis.", UserId = "ef405225-ec6a-41a1-bcda-793467d67aa6" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 9, 12, 25, 5, 598, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Et nobis placeat enim et incidunt amet.", UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 9, 23, 9, 57, 915, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Sunt rem quam similique cumque et.", UserId = "15b2e656-c73d-4f52-9de5-4da521a7c5f7" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 9, 5, 55, 50, 732, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "At delectus porro recusandae aut.", UserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 9, 20, 29, 35, 933, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Tempore libero delectus doloribus eum sint.", UserId = "15b2e656-c73d-4f52-9de5-4da521a7c5f7" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 9, 21, 42, 18, 675, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Similique omnis doloribus consequuntur aut similique ipsum est.", UserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 9, 9, 16, 10, 129, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Dolorem magni quaerat quibusdam.", UserId = "ef405225-ec6a-41a1-bcda-793467d67aa6" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC !global", ButtonFontSize = "14px !global", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "none", ThemeSecondaryColor = "none" },
                        new { Id = 2, BodyColor = "#F8FAFC !global", ButtonFontSize = "16px !global", ControlsHeight = "38px", IsDeleted = false, Name = "Pink", ThemePrimaryColor = "#ff5a5f", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.Property<int?>("ThemeId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "ef405225-ec6a-41a1-bcda-793467d67aa6", CreatedAt = new DateTime(2018, 9, 9, 19, 11, 5, 723, DateTimeKind.Local), DisplayName = "Marcelino", Email = "Trey.Hegmann@gmail.com", FirstName = "Loyal", IsActive = true, IsDeleted = false, LastName = "Stracke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg", RoleId = 2, ThemeId = 1 },
                        new { Id = "56c50529-8f61-4811-ad6b-014632e81bc3", CreatedAt = new DateTime(2018, 9, 9, 23, 55, 20, 77, DateTimeKind.Local), DisplayName = "Robbie", Email = "Mina18@gmail.com", FirstName = "Sydnee", IsActive = true, IsDeleted = false, LastName = "Crooks", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg", RoleId = 1, ThemeId = 2 },
                        new { Id = "15b2e656-c73d-4f52-9de5-4da521a7c5f7", CreatedAt = new DateTime(2018, 9, 10, 0, 34, 45, 992, DateTimeKind.Local), DisplayName = "Brock", Email = "Nicklaus.Lubowitz10@yahoo.com", FirstName = "Jess", IsActive = true, IsDeleted = false, LastName = "Monahan", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg", RoleId = 2, ThemeId = 1 },
                        new { Id = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad", CreatedAt = new DateTime(2018, 9, 9, 4, 23, 40, 199, DateTimeKind.Local), DisplayName = "Judson", Email = "Amiya.Baumbach@gmail.com", FirstName = "Adrienne", IsActive = true, IsDeleted = false, LastName = "Williamson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg", RoleId = 2, ThemeId = 2 },
                        new { Id = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", CreatedAt = new DateTime(2018, 9, 9, 11, 14, 32, 754, DateTimeKind.Local), DisplayName = "Patsy", Email = "Dejah_Schroeder@hotmail.com", FirstName = "Dion", IsActive = true, IsDeleted = false, LastName = "Wiza", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg", RoleId = 1, ThemeId = 1 },
                        new { Id = "25163190-bc6d-4a00-9bef-9daa1f48c357", CreatedAt = new DateTime(2018, 9, 9, 9, 33, 52, 683, DateTimeKind.Local), DisplayName = "Abigale", Email = "Hal.Vandervort94@yahoo.com", FirstName = "Willy", IsActive = true, IsDeleted = false, LastName = "Kihn", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg", RoleId = 1, ThemeId = 2 },
                        new { Id = "080a477e-414e-409c-8ae6-60935915d212", CreatedAt = new DateTime(2018, 9, 9, 12, 36, 29, 445, DateTimeKind.Local), DisplayName = "Anibal", Email = "Cristian.Fahey49@yahoo.com", FirstName = "Arianna", IsActive = true, IsDeleted = false, LastName = "Jast", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg", RoleId = 1, ThemeId = 1 },
                        new { Id = "82f7755a-c076-486d-9ec3-8c8482c04551", CreatedAt = new DateTime(2018, 9, 9, 11, 51, 31, 810, DateTimeKind.Local), DisplayName = "Katarina", Email = "Caesar.Hoeger@gmail.com", FirstName = "Sadye", IsActive = true, IsDeleted = false, LastName = "Hermiston", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg", RoleId = 1, ThemeId = 1 },
                        new { Id = "3a411cc8-95ea-4496-8528-a6ea6e6d596b", CreatedAt = new DateTime(2018, 9, 9, 22, 28, 57, 291, DateTimeKind.Local), DisplayName = "Cheyenne", Email = "Theodore72@hotmail.com", FirstName = "Tristian", IsActive = true, IsDeleted = false, LastName = "Hessel", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg", RoleId = 1, ThemeId = 1 },
                        new { Id = "c93d5042-5283-4883-bc08-0b707273edbb", CreatedAt = new DateTime(2018, 9, 10, 1, 19, 27, 352, DateTimeKind.Local), DisplayName = "Hal", Email = "Adolphus.Kuhlman21@yahoo.com", FirstName = "Alia", IsActive = true, IsDeleted = false, LastName = "Toy", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg", RoleId = 1, ThemeId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "ef405225-ec6a-41a1-bcda-793467d67aa6", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "56c50529-8f61-4811-ad6b-014632e81bc3", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "15b2e656-c73d-4f52-9de5-4da521a7c5f7", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "ac52a4d8-01e7-4d0b-8537-19fe1b95b8ad", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "312c4307-f729-4d41-888b-e8e4a5b3cd9a", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "25163190-bc6d-4a00-9bef-9daa1f48c357", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "080a477e-414e-409c-8ae6-60935915d212", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "82f7755a-c076-486d-9ec3-8c8482c04551", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "3a411cc8-95ea-4496-8528-a6ea6e6d596b", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "c93d5042-5283-4883-bc08-0b707273edbb", OrganizationId = 65, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
