// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 47, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 55, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 70, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 46, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 94, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 42, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 27, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 67, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 44, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 94, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", IsDeleted = false, Name = "aspernatur", Type = 0 },
                        new { Id = 22, CreatedById = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", IsDeleted = false, Name = "reprehenderit", Type = 0 },
                        new { Id = 23, CreatedById = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", IsDeleted = false, Name = "earum", Type = 0 },
                        new { Id = 24, CreatedById = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 25, CreatedById = "7f5cb4d2-a78b-4210-9720-a33e01a768c1", IsDeleted = false, Name = "id", Type = 0 },
                        new { Id = 26, CreatedById = "85ecd13b-bea8-41c2-ab16-19d393693093", IsDeleted = false, Name = "deserunt", Type = 0 },
                        new { Id = 27, CreatedById = "797183d6-15f0-4fc3-a80c-f4a32e0d0ca9", IsDeleted = false, Name = "error", Type = 0 },
                        new { Id = 28, CreatedById = "efb7a095-74a7-430c-a647-23054ed25b36", IsDeleted = false, Name = "sit", Type = 0 },
                        new { Id = 29, CreatedById = "efb7a095-74a7-430c-a647-23054ed25b36", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 30, CreatedById = "85ecd13b-bea8-41c2-ab16-19d393693093", IsDeleted = false, Name = "nulla", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 5, 4, 53, 46, 147, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title113" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 5, 2, 22, 4, 906, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title54" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 5, 14, 15, 56, 318, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title57" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 5, 4, 21, 49, 775, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title213" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 5, 4, 57, 29, 620, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title694" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 5, 5, 58, 48, 822, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title707" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 5, 3, 25, 10, 210, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title893" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 5, 7, 42, 24, 365, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title122" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 5, 15, 6, 55, 214, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title835" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 5, 4, 24, 47, 496, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title940" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 5, 8, 33, 17, 763, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Corporis quia quis aut odio itaque.", UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 5, 3, 11, 34, 819, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Optio minima voluptatem omnis ut.", UserId = "efb7a095-74a7-430c-a647-23054ed25b36", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 4, 21, 52, 49, 473, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sint totam nemo quidem ea error ut tempora repudiandae ratione.", UserId = "efb7a095-74a7-430c-a647-23054ed25b36", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 5, 7, 4, 55, 799, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Cupiditate nemo et quo quia.", UserId = "6c0b1a42-427c-43a6-889c-cd19e3729593", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 5, 15, 4, 16, 5, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Atque quaerat quas.", UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 5, 15, 0, 29, 616, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Distinctio consequuntur adipisci nihil voluptatum dolorum ipsum.", UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 4, 17, 54, 21, 777, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quo ut natus eum aut non temporibus iste.", UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 5, 11, 19, 23, 842, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut eum quo repudiandae.", UserId = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 5, 4, 33, 43, 87, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et non aut harum eligendi aut aut aspernatur quisquam.", UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 5, 10, 21, 8, 861, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolor sint autem quod repellat nihil dolor porro.", UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "33:62:99:7b:7a:6d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", Title = "Instance981" },
                        new { Id = 82, Address = "b5:90:ec:4c:91:c9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance909" },
                        new { Id = 83, Address = "bb:54:bd:03:39:5a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance78" },
                        new { Id = 84, Address = "ec:7e:2e:21:d6:28", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", Title = "Instance103" },
                        new { Id = 85, Address = "8a:99:36:8b:a4:a9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance125" },
                        new { Id = 86, Address = "5c:31:65:b0:58:df", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", Title = "Instance946" },
                        new { Id = 87, Address = "fb:9f:72:19:1d:36", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Linux", Title = "Instance256" },
                        new { Id = 88, Address = "a9:4d:50:5b:c0:22", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", Title = "Instance458" },
                        new { Id = 89, Address = "81:8e:02:bd:73:bb", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance370" },
                        new { Id = 90, Address = "82:8a:64:ff:bd:ea", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance784" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 29, CreatedAt = new DateTime(2018, 9, 4, 16, 33, 36, 47, DateTimeKind.Local), IsDeleted = false, Text = "Optio enim consequuntur alias corporis enim incidunt rerum a.", UserId = "85ecd13b-bea8-41c2-ab16-19d393693093", WasRead = false },
                        new { Id = 32, ChatId = 28, CreatedAt = new DateTime(2018, 9, 5, 6, 23, 10, 257, DateTimeKind.Local), IsDeleted = false, Text = "Velit consequatur sint laborum aspernatur.", UserId = "85ecd13b-bea8-41c2-ab16-19d393693093", WasRead = true },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 9, 5, 11, 39, 31, 33, DateTimeKind.Local), IsDeleted = false, Text = "Velit commodi quae doloremque accusamus necessitatibus pariatur.", UserId = "7f5cb4d2-a78b-4210-9720-a33e01a768c1", WasRead = false },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 9, 5, 7, 6, 59, 395, DateTimeKind.Local), IsDeleted = false, Text = "Ut saepe quidem sunt quidem eius dolor excepturi.", UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0", WasRead = false },
                        new { Id = 35, ChatId = 22, CreatedAt = new DateTime(2018, 9, 5, 8, 54, 22, 540, DateTimeKind.Local), IsDeleted = false, Text = "Accusantium modi possimus placeat quod ea molestiae architecto est aut.", UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0", WasRead = false },
                        new { Id = 36, ChatId = 28, CreatedAt = new DateTime(2018, 9, 4, 18, 52, 27, 788, DateTimeKind.Local), IsDeleted = false, Text = "Dicta suscipit quo.", UserId = "797183d6-15f0-4fc3-a80c-f4a32e0d0ca9", WasRead = false },
                        new { Id = 37, ChatId = 27, CreatedAt = new DateTime(2018, 9, 4, 15, 27, 37, 373, DateTimeKind.Local), IsDeleted = false, Text = "Reiciendis cupiditate minus.", UserId = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", WasRead = true },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 9, 5, 0, 28, 36, 0, DateTimeKind.Local), IsDeleted = false, Text = "Sapiente minima aut nulla nam sunt eos voluptate illum.", UserId = "797183d6-15f0-4fc3-a80c-f4a32e0d0ca9", WasRead = true },
                        new { Id = 39, ChatId = 30, CreatedAt = new DateTime(2018, 9, 5, 10, 31, 22, 940, DateTimeKind.Local), IsDeleted = false, Text = "Enim iusto ducimus quo nihil ipsam fuga praesentium.", UserId = "85ecd13b-bea8-41c2-ab16-19d393693093", WasRead = false },
                        new { Id = 40, ChatId = 25, CreatedAt = new DateTime(2018, 9, 4, 16, 59, 8, 36, DateTimeKind.Local), IsDeleted = false, Text = "Modi consequatur aliquam itaque iure maxime earum reiciendis voluptatibus.", UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 4, 23, 55, 21, 637, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Fuga ut ea sit quo blanditiis et minima.", UserId = "7f5cb4d2-a78b-4210-9720-a33e01a768c1", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 4, 20, 38, 13, 844, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Quis ab nostrum quia aut nesciunt.", UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 4, 16, 41, 5, 428, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Quae est distinctio autem dolor.", UserId = "291b2e40-05f0-40d2-9162-3cb46c10055b", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 5, 7, 55, 0, 750, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Optio non ut et molestias voluptas sed.", UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 4, 21, 11, 50, 671, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Esse rerum aspernatur illum rem.", UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 4, 18, 41, 4, 825, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Autem omnis suscipit quia ea.", UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 5, 2, 49, 16, 46, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Tempore nemo facilis.", UserId = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 4, 18, 41, 12, 124, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "In qui dolor dignissimos necessitatibus.", UserId = "6c0b1a42-427c-43a6-889c-cd19e3729593", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 5, 14, 27, 39, 747, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Pariatur nesciunt excepturi voluptas quia.", UserId = "797183d6-15f0-4fc3-a80c-f4a32e0d0ca9", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 5, 2, 13, 0, 789, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Consectetur recusandae debitis voluptas nostrum et ut mollitia quaerat.", UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "efb7a095-74a7-430c-a647-23054ed25b36" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "85ecd13b-bea8-41c2-ab16-19d393693093" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "6c0b1a42-427c-43a6-889c-cd19e3729593" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "291b2e40-05f0-40d2-9162-3cb46c10055b" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "efb7a095-74a7-430c-a647-23054ed25b36" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(496) 233-0408", CreatedByUserId = "7f5cb4d2-a78b-4210-9720-a33e01a768c1", Description = "Aut necessitatibus culpa accusantium nihil. Quasi minus eaque nesciunt eos adipisci praesentium explicabo est voluptas.", Email = "Trey.Morissette@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company919", ThemeId = 61, WebSite = "http://pinkie.name" },
                        new { Id = 72, ContactNumber = "1-303-268-0066 x2780", CreatedByUserId = "85ecd13b-bea8-41c2-ab16-19d393693093", Description = "", Email = "Ricardo_Welch@gmail.com", IsActive = true, IsDeleted = false, Name = "Company156", ThemeId = 68, WebSite = "https://kallie.org" },
                        new { Id = 73, ContactNumber = "1-394-300-7078 x82678", CreatedByUserId = "1f91fc25-7cfd-4922-8e0f-36618e422329", Description = "Error ad vel dolor modi eaque natus suscipit ex nihil.", Email = "Eino73@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company152", ThemeId = 61, WebSite = "http://avery.biz" },
                        new { Id = 74, ContactNumber = "292-499-5168", CreatedByUserId = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", Description = "Totam dolorem voluptatibus sequi et et maxime mollitia culpa. Totam placeat ut. In eveniet dignissimos assumenda alias non in officia tempore.", Email = "Juana.Bradtke62@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company332", ThemeId = 61, WebSite = "https://lorena.org" },
                        new { Id = 75, ContactNumber = "1-818-482-6082 x91367", CreatedByUserId = "291b2e40-05f0-40d2-9162-3cb46c10055b", Description = "Assumenda nihil aut dolores fugit quasi ipsum facilis sit. Unde est doloribus ea nam porro rerum quae. In consectetur ipsa sed. In reiciendis debitis ipsam minima quae adipisci corporis laudantium et.", Email = "Ryleigh.Barton@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company263", ThemeId = 63, WebSite = "http://marlon.com" },
                        new { Id = 76, ContactNumber = "1-847-465-3673 x99118", CreatedByUserId = "efb7a095-74a7-430c-a647-23054ed25b36", Description = "Ut et amet ea quod.", Email = "Christ55@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company171", ThemeId = 66, WebSite = "https://avis.info" },
                        new { Id = 77, ContactNumber = "235-871-9892", CreatedByUserId = "291b2e40-05f0-40d2-9162-3cb46c10055b", Description = "Doloribus ipsum quibusdam enim alias at quaerat. Odit rerum rerum occaecati enim provident est.", Email = "Katlyn_Balistreri@gmail.com", IsActive = true, IsDeleted = false, Name = "Company202", ThemeId = 63, WebSite = "https://braulio.com" },
                        new { Id = 78, ContactNumber = "836.570.3225", CreatedByUserId = "efb7a095-74a7-430c-a647-23054ed25b36", Description = "Ut molestiae ratione delectus quibusdam ut tempora ea sit. Tempora qui qui unde fugiat aliquid minima corporis. Consequatur quia qui. Dignissimos in quo est sint.", Email = "Anabel_Cronin96@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company732", ThemeId = 65, WebSite = "https://jazlyn.com" },
                        new { Id = 79, ContactNumber = "(722) 219-1109", CreatedByUserId = "7f5cb4d2-a78b-4210-9720-a33e01a768c1", Description = "Fuga nam qui tempore nihil reprehenderit sapiente. Quo delectus non est veritatis quae aut doloremque. Cum est dolores laboriosam aut excepturi vitae. Incidunt voluptate aut.", Email = "Thalia67@gmail.com", IsActive = true, IsDeleted = false, Name = "Company35", ThemeId = 64, WebSite = "https://cayla.net" },
                        new { Id = 80, ContactNumber = "271-661-1115", CreatedByUserId = "efb7a095-74a7-430c-a647-23054ed25b36", Description = "Est amet sint voluptatem.", Email = "Lorenza12@gmail.com", IsActive = true, IsDeleted = false, Name = "Company365", ThemeId = 67, WebSite = "https://vladimir.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 5, 3, 42, 13, 54, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Hic sed omnis vel est exercitationem.", UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 4, 19, 50, 16, 842, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Laboriosam in quisquam aut quia quia unde hic repellendus.", UserId = "efb7a095-74a7-430c-a647-23054ed25b36" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 4, 22, 4, 2, 846, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Assumenda distinctio deserunt dicta.", UserId = "7f5cb4d2-a78b-4210-9720-a33e01a768c1" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 4, 18, 41, 40, 835, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Et voluptatum maxime.", UserId = "6c0b1a42-427c-43a6-889c-cd19e3729593" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 4, 23, 31, 48, 709, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Consectetur aut labore et recusandae eveniet voluptas itaque.", UserId = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 5, 12, 18, 20, 617, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Incidunt assumenda quam voluptatem.", UserId = "291b2e40-05f0-40d2-9162-3cb46c10055b" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 5, 14, 32, 10, 168, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Quisquam explicabo quia voluptas ullam recusandae quo quo aut reiciendis.", UserId = "291b2e40-05f0-40d2-9162-3cb46c10055b" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 4, 17, 7, 0, 762, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Omnis reiciendis similique eligendi autem minima molestiae quisquam earum tempora.", UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 4, 16, 40, 33, 932, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Non quia fuga numquam in.", UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 4, 19, 15, 14, 95, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Voluptatum aliquid alias amet magni quo cum.", UserId = "85ecd13b-bea8-41c2-ab16-19d393693093" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme310" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme427" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme996" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme29" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme778" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme333" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme90" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme798" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme818" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme770" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "797183d6-15f0-4fc3-a80c-f4a32e0d0ca9", CreatedAt = new DateTime(2018, 9, 4, 15, 54, 28, 996, DateTimeKind.Local), DisplayName = "Estell", Email = "Franz70@hotmail.com", FirstName = "Destany", IsActive = true, IsDeleted = false, LastName = "Kassulke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg", RoleId = 1 },
                        new { Id = "85ecd13b-bea8-41c2-ab16-19d393693093", CreatedAt = new DateTime(2018, 9, 5, 12, 38, 4, 446, DateTimeKind.Local), DisplayName = "Kraig", Email = "Garrett35@yahoo.com", FirstName = "Delbert", IsActive = true, IsDeleted = false, LastName = "Toy", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg", RoleId = 2 },
                        new { Id = "1f91fc25-7cfd-4922-8e0f-36618e422329", CreatedAt = new DateTime(2018, 9, 5, 5, 49, 29, 693, DateTimeKind.Local), DisplayName = "Marilie", Email = "Agnes35@gmail.com", FirstName = "Garnett", IsActive = true, IsDeleted = false, LastName = "Gleason", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg", RoleId = 1 },
                        new { Id = "efb7a095-74a7-430c-a647-23054ed25b36", CreatedAt = new DateTime(2018, 9, 5, 3, 15, 29, 29, DateTimeKind.Local), DisplayName = "Oswaldo", Email = "Raheem.Blick77@gmail.com", FirstName = "Felicia", IsActive = true, IsDeleted = false, LastName = "Larkin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg", RoleId = 1 },
                        new { Id = "7f5cb4d2-a78b-4210-9720-a33e01a768c1", CreatedAt = new DateTime(2018, 9, 5, 5, 27, 46, 483, DateTimeKind.Local), DisplayName = "Alysson", Email = "Federico_Nienow3@hotmail.com", FirstName = "Alana", IsActive = true, IsDeleted = false, LastName = "Williamson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg", RoleId = 1 },
                        new { Id = "6c0b1a42-427c-43a6-889c-cd19e3729593", CreatedAt = new DateTime(2018, 9, 4, 16, 16, 48, 125, DateTimeKind.Local), DisplayName = "Arvel", Email = "Stone85@hotmail.com", FirstName = "Annamae", IsActive = true, IsDeleted = false, LastName = "Buckridge", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg", RoleId = 2 },
                        new { Id = "291b2e40-05f0-40d2-9162-3cb46c10055b", CreatedAt = new DateTime(2018, 9, 4, 18, 10, 18, 264, DateTimeKind.Local), DisplayName = "Anne", Email = "Yesenia33@gmail.com", FirstName = "Aniya", IsActive = true, IsDeleted = false, LastName = "Okuneva", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg", RoleId = 2 },
                        new { Id = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0", CreatedAt = new DateTime(2018, 9, 5, 5, 54, 31, 411, DateTimeKind.Local), DisplayName = "Vivien", Email = "Marietta65@gmail.com", FirstName = "Mae", IsActive = true, IsDeleted = false, LastName = "Hammes", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg", RoleId = 1 },
                        new { Id = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", CreatedAt = new DateTime(2018, 9, 5, 4, 48, 14, 968, DateTimeKind.Local), DisplayName = "Matilda", Email = "Daphne71@hotmail.com", FirstName = "Morris", IsActive = true, IsDeleted = false, LastName = "Ferry", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg", RoleId = 1 },
                        new { Id = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", CreatedAt = new DateTime(2018, 9, 5, 8, 6, 48, 880, DateTimeKind.Local), DisplayName = "Calista", Email = "Lea87@gmail.com", FirstName = "Hayden", IsActive = true, IsDeleted = false, LastName = "Wyman", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "797183d6-15f0-4fc3-a80c-f4a32e0d0ca9", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "85ecd13b-bea8-41c2-ab16-19d393693093", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "1f91fc25-7cfd-4922-8e0f-36618e422329", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "efb7a095-74a7-430c-a647-23054ed25b36", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "7f5cb4d2-a78b-4210-9720-a33e01a768c1", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "6c0b1a42-427c-43a6-889c-cd19e3729593", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "291b2e40-05f0-40d2-9162-3cb46c10055b", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "ca11cfd9-0022-4285-85a6-b14c84a5a0c0", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "15bdceaa-9bb4-4ef1-8c85-c7aed863fa60", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "2e669749-08c5-4bf0-a7f1-e70c416c44ee", OrganizationId = 75, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
