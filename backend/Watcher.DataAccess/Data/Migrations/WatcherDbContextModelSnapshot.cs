// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 97, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 5, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 92, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 78, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 37, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 38, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 95, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 52, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 6, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "d65d8522-a0e6-41ed-af72-52b85ea1e523", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 22, CreatedById = "f07d7131-08d8-4381-96af-7fcd543c9f41", IsDeleted = false, Name = "accusamus", Type = 0 },
                        new { Id = 23, CreatedById = "e9afaf96-7110-42c2-abf6-2c900a02badb", IsDeleted = false, Name = "sed", Type = 0 },
                        new { Id = 24, CreatedById = "104e789a-998a-478b-8240-46925d8eb289", IsDeleted = false, Name = "ullam", Type = 0 },
                        new { Id = 25, CreatedById = "cd91ae36-8dd0-484f-b488-0eec3b81dbe5", IsDeleted = false, Name = "quo", Type = 0 },
                        new { Id = 26, CreatedById = "c317a221-686e-4211-8402-be5800f50db3", IsDeleted = false, Name = "nobis", Type = 0 },
                        new { Id = 27, CreatedById = "361b7f86-2f9f-4278-af42-a49bc5187139", IsDeleted = false, Name = "laudantium", Type = 0 },
                        new { Id = 28, CreatedById = "e9afaf96-7110-42c2-abf6-2c900a02badb", IsDeleted = false, Name = "eveniet", Type = 0 },
                        new { Id = 29, CreatedById = "d65d8522-a0e6-41ed-af72-52b85ea1e523", IsDeleted = false, Name = "maxime", Type = 0 },
                        new { Id = 30, CreatedById = "72c4d158-c9f9-4bb1-8279-86c127637cfa", IsDeleted = false, Name = "alias", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 8, 13, 53, 16, 363, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title478" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 8, 7, 15, 55, 197, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title876" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 7, 14, 53, 23, 647, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title467" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 8, 1, 40, 37, 983, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title360" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 7, 22, 40, 58, 709, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title173" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 7, 16, 1, 11, 279, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title477" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 8, 4, 37, 43, 331, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title774" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 8, 4, 39, 20, 468, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title785" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 8, 9, 28, 13, 134, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title696" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 8, 8, 32, 24, 330, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title849" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 7, 19, 46, 29, 445, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nulla et facere architecto non placeat voluptatem tenetur qui.", UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 7, 22, 47, 10, 241, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Maxime cupiditate tempora numquam veritatis.", UserId = "c317a221-686e-4211-8402-be5800f50db3", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 8, 5, 36, 9, 856, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nam facere corporis.", UserId = "c317a221-686e-4211-8402-be5800f50db3", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 7, 16, 24, 59, 250, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dicta earum in.", UserId = "361b7f86-2f9f-4278-af42-a49bc5187139", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 7, 20, 7, 14, 365, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolorum eveniet consequatur ipsum dolor.", UserId = "361b7f86-2f9f-4278-af42-a49bc5187139", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 8, 6, 28, 44, 938, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Velit dolorem error qui illum eum.", UserId = "104e789a-998a-478b-8240-46925d8eb289", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 8, 7, 3, 20, 589, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quaerat architecto sed possimus non dolor explicabo animi autem.", UserId = "104e789a-998a-478b-8240-46925d8eb289", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 8, 13, 18, 39, 445, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Beatae autem numquam qui eos quo pariatur sint.", UserId = "d65d8522-a0e6-41ed-af72-52b85ea1e523", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 7, 16, 52, 21, 34, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Praesentium laboriosam qui voluptas amet.", UserId = "104e789a-998a-478b-8240-46925d8eb289", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 8, 1, 2, 39, 319, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Distinctio occaecati dicta voluptatem at dicta dolores eligendi porro repudiandae.", UserId = "e9afaf96-7110-42c2-abf6-2c900a02badb", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "5f:09:fd:43:0c:90", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance182" },
                        new { Id = 82, Address = "ad:72:b0:c0:ed:f3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance400" },
                        new { Id = 83, Address = "39:84:d2:b4:08:24", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", Title = "Instance328" },
                        new { Id = 84, Address = "cb:e4:34:8e:18:77", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance971" },
                        new { Id = 85, Address = "b3:a6:d2:25:d2:f9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", Title = "Instance218" },
                        new { Id = 86, Address = "ae:e8:fc:bd:ef:db", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance770" },
                        new { Id = 87, Address = "e3:a6:b3:57:d5:c9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance230" },
                        new { Id = 88, Address = "39:37:bb:fe:be:93", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance658" },
                        new { Id = 89, Address = "22:38:5e:38:5f:e3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance883" },
                        new { Id = 90, Address = "40:70:f5:50:72:0c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", Title = "Instance619" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 27, CreatedAt = new DateTime(2018, 9, 8, 2, 22, 30, 156, DateTimeKind.Local), IsDeleted = false, Text = "Aut et culpa.", UserId = "e9afaf96-7110-42c2-abf6-2c900a02badb", WasRead = false },
                        new { Id = 32, ChatId = 25, CreatedAt = new DateTime(2018, 9, 7, 16, 11, 49, 696, DateTimeKind.Local), IsDeleted = false, Text = "Doloribus ad similique qui soluta.", UserId = "cd91ae36-8dd0-484f-b488-0eec3b81dbe5", WasRead = true },
                        new { Id = 33, ChatId = 25, CreatedAt = new DateTime(2018, 9, 8, 5, 41, 14, 398, DateTimeKind.Local), IsDeleted = false, Text = "Sed voluptas quam possimus minus vitae molestias.", UserId = "17303a7b-f861-4993-b650-202b9805a826", WasRead = true },
                        new { Id = 34, ChatId = 29, CreatedAt = new DateTime(2018, 9, 8, 8, 9, 8, 710, DateTimeKind.Local), IsDeleted = false, Text = "Distinctio facilis ea tempore fugit neque quis voluptas accusantium neque.", UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150", WasRead = true },
                        new { Id = 35, ChatId = 21, CreatedAt = new DateTime(2018, 9, 8, 5, 20, 28, 618, DateTimeKind.Local), IsDeleted = false, Text = "Ut repellendus sint.", UserId = "104e789a-998a-478b-8240-46925d8eb289", WasRead = false },
                        new { Id = 36, ChatId = 24, CreatedAt = new DateTime(2018, 9, 8, 7, 20, 11, 194, DateTimeKind.Local), IsDeleted = false, Text = "Eum dolorum ab quia et adipisci.", UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150", WasRead = true },
                        new { Id = 37, ChatId = 30, CreatedAt = new DateTime(2018, 9, 8, 11, 11, 30, 395, DateTimeKind.Local), IsDeleted = false, Text = "Et molestiae quae consequatur quia omnis sit voluptates atque autem.", UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150", WasRead = true },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 9, 7, 14, 59, 38, 323, DateTimeKind.Local), IsDeleted = false, Text = "Et dignissimos praesentium corrupti officia et sunt dolor voluptatem illo.", UserId = "104e789a-998a-478b-8240-46925d8eb289", WasRead = true },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 9, 8, 10, 18, 36, 796, DateTimeKind.Local), IsDeleted = false, Text = "At architecto non pariatur qui amet modi omnis.", UserId = "72c4d158-c9f9-4bb1-8279-86c127637cfa", WasRead = false },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 9, 7, 19, 54, 9, 787, DateTimeKind.Local), IsDeleted = false, Text = "Sunt vitae voluptatum.", UserId = "17303a7b-f861-4993-b650-202b9805a826", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 7, 20, 17, 3, 643, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Laboriosam et placeat voluptatum debitis.", UserId = "17303a7b-f861-4993-b650-202b9805a826", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 7, 15, 45, 15, 614, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Doloribus optio consequatur saepe quae a sapiente optio.", UserId = "f07d7131-08d8-4381-96af-7fcd543c9f41", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 7, 22, 1, 43, 796, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Eos non atque recusandae accusantium sed sed.", UserId = "f07d7131-08d8-4381-96af-7fcd543c9f41", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 7, 14, 58, 38, 961, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Expedita aut eaque animi.", UserId = "c317a221-686e-4211-8402-be5800f50db3", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 8, 8, 14, 35, 670, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Consequatur officia ut consectetur vero atque fuga adipisci.", UserId = "e9afaf96-7110-42c2-abf6-2c900a02badb", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 8, 8, 18, 9, 328, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Dolores magni minus sed aut.", UserId = "104e789a-998a-478b-8240-46925d8eb289", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 8, 2, 26, 21, 475, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Qui blanditiis voluptatem at.", UserId = "c317a221-686e-4211-8402-be5800f50db3", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 8, 12, 52, 27, 167, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Ex aut delectus.", UserId = "c317a221-686e-4211-8402-be5800f50db3", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 7, 22, 9, 37, 150, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Et suscipit et qui ea nisi ut debitis vitae eos.", UserId = "104e789a-998a-478b-8240-46925d8eb289", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 8, 6, 24, 32, 255, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Et quisquam adipisci doloremque ducimus ut magni ut laboriosam.", UserId = "c317a221-686e-4211-8402-be5800f50db3", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "104e789a-998a-478b-8240-46925d8eb289" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 4, UserId = "f07d7131-08d8-4381-96af-7fcd543c9f41" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "72c4d158-c9f9-4bb1-8279-86c127637cfa" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "d65d8522-a0e6-41ed-af72-52b85ea1e523" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "104e789a-998a-478b-8240-46925d8eb289" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(323) 396-2347", CreatedByUserId = "104e789a-998a-478b-8240-46925d8eb289", Description = "Rerum eius corporis. Similique quas quo eos autem nostrum adipisci quis.", Email = "Rupert57@gmail.com", IsActive = true, IsDeleted = false, Name = "Company325", ThemeId = 70, WebSite = "http://kathryn.info" },
                        new { Id = 72, ContactNumber = "680-498-9816 x664", CreatedByUserId = "cd91ae36-8dd0-484f-b488-0eec3b81dbe5", Description = "", Email = "Garnet68@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company48", ThemeId = 69, WebSite = "https://mckayla.info" },
                        new { Id = 73, ContactNumber = "(385) 482-0280 x4425", CreatedByUserId = "361b7f86-2f9f-4278-af42-a49bc5187139", Description = "Velit enim magnam consequatur ea. Iusto quasi aut cupiditate sint qui.", Email = "Walter.Von59@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company246", ThemeId = 63, WebSite = "http://lucio.com" },
                        new { Id = 74, ContactNumber = "924-373-3710 x372", CreatedByUserId = "f07d7131-08d8-4381-96af-7fcd543c9f41", Description = "Quibusdam quo veniam voluptas sit aut natus autem magni minus. Voluptates natus occaecati nostrum praesentium sunt nihil maiores esse veniam. Commodi aut consequuntur consequatur ut explicabo impedit voluptates voluptatibus. Aut delectus delectus.", Email = "Dorris_Morissette12@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company720", ThemeId = 66, WebSite = "https://carolina.org" },
                        new { Id = 75, ContactNumber = "923-623-5034", CreatedByUserId = "f07d7131-08d8-4381-96af-7fcd543c9f41", Description = "Iusto laudantium nam eius facere delectus odit mollitia iste rerum. Eligendi vel ut aut quas distinctio expedita quasi est error. Sed sequi laborum nam id.", Email = "Ike70@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company397", ThemeId = 64, WebSite = "https://jaunita.net" },
                        new { Id = 76, ContactNumber = "460.366.5740 x3649", CreatedByUserId = "d65d8522-a0e6-41ed-af72-52b85ea1e523", Description = "Voluptatem molestias est.", Email = "Noble97@gmail.com", IsActive = true, IsDeleted = false, Name = "Company964", ThemeId = 63, WebSite = "http://terrill.org" },
                        new { Id = 77, ContactNumber = "1-436-414-0109 x2636", CreatedByUserId = "f07d7131-08d8-4381-96af-7fcd543c9f41", Description = "Repudiandae porro id enim. Ut cum voluptatibus inventore sit eos libero laboriosam sed. Cumque animi doloribus odit porro eaque.", Email = "Renee.Schmidt53@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company696", ThemeId = 61, WebSite = "https://gisselle.net" },
                        new { Id = 78, ContactNumber = "448-875-3606 x3885", CreatedByUserId = "17303a7b-f861-4993-b650-202b9805a826", Description = "Autem in ab. Molestias est officia quo.", Email = "Dante_Purdy45@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company15", ThemeId = 64, WebSite = "http://cassie.org" },
                        new { Id = 79, ContactNumber = "316.470.3214", CreatedByUserId = "77ac325e-dfe7-4b14-835d-b20f271c9150", Description = "", Email = "Morgan.Rodriguez@gmail.com", IsActive = true, IsDeleted = false, Name = "Company970", ThemeId = 70, WebSite = "https://brionna.org" },
                        new { Id = 80, ContactNumber = "428-684-2468 x2295", CreatedByUserId = "d65d8522-a0e6-41ed-af72-52b85ea1e523", Description = "Quia blanditiis voluptas rerum quo libero ratione. Quia iure quo totam quas porro qui ut. Quos quia modi est et nihil optio quia cumque cumque.", Email = "Mekhi.Bruen@gmail.com", IsActive = true, IsDeleted = false, Name = "Company77", ThemeId = 69, WebSite = "https://sigmund.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 7, 22, 29, 31, 950, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Cum omnis sed ducimus aliquid consequatur.", UserId = "72c4d158-c9f9-4bb1-8279-86c127637cfa" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 7, 22, 53, 14, 827, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Quibusdam modi temporibus.", UserId = "f07d7131-08d8-4381-96af-7fcd543c9f41" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 8, 11, 17, 25, 563, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Et eligendi consequatur iure et.", UserId = "17303a7b-f861-4993-b650-202b9805a826" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 8, 2, 57, 49, 818, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Et rerum voluptatem magni id.", UserId = "361b7f86-2f9f-4278-af42-a49bc5187139" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 8, 7, 42, 29, 907, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Natus cumque reprehenderit quo aspernatur necessitatibus vel dolorem totam.", UserId = "d65d8522-a0e6-41ed-af72-52b85ea1e523" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 8, 13, 6, 29, 70, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Vitae culpa vel consequatur debitis asperiores.", UserId = "e9afaf96-7110-42c2-abf6-2c900a02badb" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 8, 12, 31, 23, 226, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Reprehenderit maiores enim aperiam.", UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 7, 15, 57, 42, 951, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Doloribus tenetur officiis vero velit.", UserId = "d65d8522-a0e6-41ed-af72-52b85ea1e523" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 8, 0, 21, 40, 347, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "In optio cum cumque sapiente exercitationem architecto natus dignissimos facere.", UserId = "cd91ae36-8dd0-484f-b488-0eec3b81dbe5" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 8, 14, 17, 51, 573, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Ut et sunt alias pariatur temporibus vero est et.", UserId = "17303a7b-f861-4993-b650-202b9805a826" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme109" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme432" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme491" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme427" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme647" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme749" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme837" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme67" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme717" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme335" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "d65d8522-a0e6-41ed-af72-52b85ea1e523", CreatedAt = new DateTime(2018, 9, 8, 6, 59, 40, 90, DateTimeKind.Local), DisplayName = "Alfredo", Email = "Raina_Bergnaum33@yahoo.com", FirstName = "Jody", IsActive = true, IsDeleted = false, LastName = "Greenholt", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg", RoleId = 2 },
                        new { Id = "72c4d158-c9f9-4bb1-8279-86c127637cfa", CreatedAt = new DateTime(2018, 9, 7, 21, 17, 52, 743, DateTimeKind.Local), DisplayName = "Bruce", Email = "Delpha.Donnelly50@yahoo.com", FirstName = "Murphy", IsActive = true, IsDeleted = false, LastName = "Kshlerin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg", RoleId = 2 },
                        new { Id = "361b7f86-2f9f-4278-af42-a49bc5187139", CreatedAt = new DateTime(2018, 9, 7, 21, 19, 14, 495, DateTimeKind.Local), DisplayName = "Kaci", Email = "Xzavier.Jenkins@hotmail.com", FirstName = "Elmer", IsActive = true, IsDeleted = false, LastName = "Hahn", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg", RoleId = 1 },
                        new { Id = "77ac325e-dfe7-4b14-835d-b20f271c9150", CreatedAt = new DateTime(2018, 9, 8, 4, 24, 34, 420, DateTimeKind.Local), DisplayName = "Rebecca", Email = "Amari.Kiehn48@gmail.com", FirstName = "Stone", IsActive = true, IsDeleted = false, LastName = "Satterfield", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg", RoleId = 2 },
                        new { Id = "f07d7131-08d8-4381-96af-7fcd543c9f41", CreatedAt = new DateTime(2018, 9, 8, 1, 2, 26, 556, DateTimeKind.Local), DisplayName = "Peggie", Email = "Oma_Waters@gmail.com", FirstName = "Brooks", IsActive = true, IsDeleted = false, LastName = "Kshlerin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg", RoleId = 1 },
                        new { Id = "104e789a-998a-478b-8240-46925d8eb289", CreatedAt = new DateTime(2018, 9, 8, 14, 26, 21, 99, DateTimeKind.Local), DisplayName = "Juston", Email = "Troy.VonRueden@hotmail.com", FirstName = "Doug", IsActive = true, IsDeleted = false, LastName = "Kunze", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg", RoleId = 1 },
                        new { Id = "cd91ae36-8dd0-484f-b488-0eec3b81dbe5", CreatedAt = new DateTime(2018, 9, 7, 17, 39, 36, 959, DateTimeKind.Local), DisplayName = "Hipolito", Email = "Stephanie_Romaguera24@hotmail.com", FirstName = "David", IsActive = true, IsDeleted = false, LastName = "Roob", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg", RoleId = 2 },
                        new { Id = "c317a221-686e-4211-8402-be5800f50db3", CreatedAt = new DateTime(2018, 9, 8, 1, 20, 52, 332, DateTimeKind.Local), DisplayName = "Clementina", Email = "Savion.Frami56@yahoo.com", FirstName = "Giuseppe", IsActive = true, IsDeleted = false, LastName = "Jones", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg", RoleId = 2 },
                        new { Id = "e9afaf96-7110-42c2-abf6-2c900a02badb", CreatedAt = new DateTime(2018, 9, 8, 12, 23, 25, 863, DateTimeKind.Local), DisplayName = "Karen", Email = "Carlo_Wunsch@hotmail.com", FirstName = "Pat", IsActive = true, IsDeleted = false, LastName = "Larson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg", RoleId = 1 },
                        new { Id = "17303a7b-f861-4993-b650-202b9805a826", CreatedAt = new DateTime(2018, 9, 8, 5, 6, 39, 950, DateTimeKind.Local), DisplayName = "Sabrina", Email = "Nona32@gmail.com", FirstName = "Alice", IsActive = true, IsDeleted = false, LastName = "Murazik", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "d65d8522-a0e6-41ed-af72-52b85ea1e523", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "72c4d158-c9f9-4bb1-8279-86c127637cfa", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "361b7f86-2f9f-4278-af42-a49bc5187139", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "77ac325e-dfe7-4b14-835d-b20f271c9150", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "f07d7131-08d8-4381-96af-7fcd543c9f41", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "104e789a-998a-478b-8240-46925d8eb289", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "cd91ae36-8dd0-484f-b488-0eec3b81dbe5", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "c317a221-686e-4211-8402-be5800f50db3", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "e9afaf96-7110-42c2-abf6-2c900a02badb", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "17303a7b-f861-4993-b650-202b9805a826", OrganizationId = 76, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
