// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 86, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 78, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 84, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 22, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 88, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 82, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 86, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 40, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 82, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 98, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 84, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 68, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 81, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 5, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 88, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 33, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 88, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 56, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 85, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 47, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "9eda7cac-1211-455b-803a-dc2e5b08896e", IsDeleted = false, Name = "ipsam", Type = 0 },
                        new { Id = 22, CreatedById = "482b80ab-a54b-4cd8-95f2-195e62525906", IsDeleted = false, Name = "dolorum", Type = 0 },
                        new { Id = 23, CreatedById = "9eda7cac-1211-455b-803a-dc2e5b08896e", IsDeleted = false, Name = "nam", Type = 0 },
                        new { Id = 24, CreatedById = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 25, CreatedById = "244df142-7a5b-4530-b247-38c8b4159bc8", IsDeleted = false, Name = "soluta", Type = 0 },
                        new { Id = 26, CreatedById = "c46ae194-d760-422a-ba43-95d8a280451e", IsDeleted = false, Name = "voluptatibus", Type = 0 },
                        new { Id = 27, CreatedById = "53178434-76a8-4cce-8634-a3bd884eb625", IsDeleted = false, Name = "labore", Type = 0 },
                        new { Id = 28, CreatedById = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d", IsDeleted = false, Name = "laboriosam", Type = 0 },
                        new { Id = 29, CreatedById = "482b80ab-a54b-4cd8-95f2-195e62525906", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 30, CreatedById = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b", IsDeleted = false, Name = "quas", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 11, 4, 0, 14, 597, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title994" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 11, 12, 45, 13, 521, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title229" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 10, 14, 37, 27, 358, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title990" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 11, 0, 8, 37, 575, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title77" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 11, 13, 37, 38, 387, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title94" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 11, 6, 0, 47, 264, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title151" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 11, 8, 27, 31, 827, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title714" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 10, 21, 52, 7, 880, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title745" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 10, 15, 27, 2, 686, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title411" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 11, 8, 32, 22, 397, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title79" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 7, 18, 6, 852, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolorem tempora laborum.", UserId = "a9fde46e-f80e-42b6-ab4e-898fe2390a06", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 6, 48, 11, 337, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Id saepe fuga voluptatem quia nemo.", UserId = "53178434-76a8-4cce-8634-a3bd884eb625", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 3, 43, 45, 25, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Animi et officiis dolores vitae ex est.", UserId = "482b80ab-a54b-4cd8-95f2-195e62525906", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 10, 4, 29, 723, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Debitis voluptatem nobis ea.", UserId = "244df142-7a5b-4530-b247-38c8b4159bc8", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 10, 19, 47, 30, 39, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Cumque voluptatibus nulla nam ut illum voluptatem non accusantium id.", UserId = "53178434-76a8-4cce-8634-a3bd884eb625", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 10, 21, 57, 40, 710, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Non consequatur consequuntur cum rerum non est quia explicabo.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 10, 23, 41, 42, 640, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolor consequuntur ullam dicta illo sed qui voluptas amet.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 10, 15, 6, 41, 578, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Debitis sit dicta iste.", UserId = "53178434-76a8-4cce-8634-a3bd884eb625", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 10, 20, 47, 2, 183, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur autem aperiam hic et consectetur consequatur porro sapiente.", UserId = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 10, 14, 54, 53, 362, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Corporis qui aut corrupti eligendi sit odio.", UserId = "53178434-76a8-4cce-8634-a3bd884eb625", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "67:41:18:3d:c7:80", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Windows", Title = "Instance901" },
                        new { Id = 72, Address = "05:3c:af:5a:4d:6a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Windows", Title = "Instance311" },
                        new { Id = 73, Address = "27:2c:75:60:dc:81", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Linux", Title = "Instance32" },
                        new { Id = 74, Address = "04:94:30:e1:2b:32", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 67, Platform = "Windows", Title = "Instance35" },
                        new { Id = 75, Address = "32:6c:3a:40:de:93", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", Title = "Instance276" },
                        new { Id = 76, Address = "b3:6e:60:dc:ce:3b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Windows", Title = "Instance167" },
                        new { Id = 77, Address = "36:c3:13:3b:ee:71", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", Title = "Instance380" },
                        new { Id = 78, Address = "b8:b6:b0:63:d8:ba", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Linux", Title = "Instance181" },
                        new { Id = 79, Address = "78:2f:d7:ec:5f:96", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Windows", Title = "Instance507" },
                        new { Id = 80, Address = "67:f9:54:01:6e:6e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Windows", Title = "Instance71" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 4, 6, 51, 123, DateTimeKind.Local), IsDeleted = false, Text = "Harum unde non vel aliquid.", UserId = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d", WasRead = false },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 2, 36, 47, 864, DateTimeKind.Local), IsDeleted = false, Text = "Quia quisquam aut inventore et aliquam.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e", WasRead = false },
                        new { Id = 33, ChatId = 30, CreatedAt = new DateTime(2018, 9, 10, 16, 39, 38, 46, DateTimeKind.Local), IsDeleted = false, Text = "Qui libero similique voluptatem et ipsum.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e", WasRead = false },
                        new { Id = 34, ChatId = 27, CreatedAt = new DateTime(2018, 9, 11, 9, 35, 2, 204, DateTimeKind.Local), IsDeleted = false, Text = "Et vitae soluta vel voluptate doloribus ipsam quod rerum nihil.", UserId = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b", WasRead = true },
                        new { Id = 35, ChatId = 24, CreatedAt = new DateTime(2018, 9, 10, 14, 25, 51, 699, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatem aspernatur voluptatem rerum.", UserId = "cc2f1605-0c61-4b2a-950b-d4bcd57cdc01", WasRead = true },
                        new { Id = 36, ChatId = 22, CreatedAt = new DateTime(2018, 9, 10, 20, 54, 54, 520, DateTimeKind.Local), IsDeleted = false, Text = "Debitis facilis quos et.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e", WasRead = true },
                        new { Id = 37, ChatId = 29, CreatedAt = new DateTime(2018, 9, 11, 3, 58, 7, 410, DateTimeKind.Local), IsDeleted = false, Text = "Iusto deleniti sit.", UserId = "482b80ab-a54b-4cd8-95f2-195e62525906", WasRead = true },
                        new { Id = 38, ChatId = 26, CreatedAt = new DateTime(2018, 9, 10, 16, 31, 25, 103, DateTimeKind.Local), IsDeleted = false, Text = "Assumenda placeat nobis alias.", UserId = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d", WasRead = true },
                        new { Id = 39, ChatId = 22, CreatedAt = new DateTime(2018, 9, 10, 17, 9, 21, 308, DateTimeKind.Local), IsDeleted = false, Text = "Id debitis sit perferendis.", UserId = "244df142-7a5b-4530-b247-38c8b4159bc8", WasRead = false },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 9, 10, 22, 45, 32, 117, DateTimeKind.Local), IsDeleted = false, Text = "Voluptas dolores qui voluptas sint occaecati quia sequi modi labore.", UserId = "a9fde46e-f80e-42b6-ab4e-898fe2390a06", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 10, 18, 41, 59, 153, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Deserunt rerum voluptatibus qui deleniti iste ut sit.", UserId = "cc2f1605-0c61-4b2a-950b-d4bcd57cdc01", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 11, 11, 36, 59, 64, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Maxime culpa esse necessitatibus omnis temporibus adipisci nihil exercitationem ipsam.", UserId = "2a8c280f-f385-4d2d-a5aa-c57e76b5168e", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 11, 12, 6, 46, 230, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Quidem commodi culpa distinctio deleniti dolor esse placeat.", UserId = "c46ae194-d760-422a-ba43-95d8a280451e", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 11, 8, 21, 43, 569, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "In totam nihil excepturi occaecati autem.", UserId = "c46ae194-d760-422a-ba43-95d8a280451e", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 10, 18, 34, 51, 88, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Qui est cumque quo.", UserId = "2a8c280f-f385-4d2d-a5aa-c57e76b5168e", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 11, 1, 23, 43, 428, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Omnis aliquid dolore voluptas sint.", UserId = "2a8c280f-f385-4d2d-a5aa-c57e76b5168e", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 11, 6, 51, 31, 639, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Impedit cupiditate asperiores quos earum tempora.", UserId = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 10, 19, 51, 20, 906, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Repellendus quibusdam ipsam eum quos qui blanditiis quidem vero sapiente.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 11, 1, 3, 23, 957, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Illum optio enim eius minus.", UserId = "a9fde46e-f80e-42b6-ab4e-898fe2390a06", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 10, 19, 20, 54, 417, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Commodi sed aut qui eligendi.", UserId = "c46ae194-d760-422a-ba43-95d8a280451e", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "244df142-7a5b-4530-b247-38c8b4159bc8" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "c46ae194-d760-422a-ba43-95d8a280451e" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "244df142-7a5b-4530-b247-38c8b4159bc8" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 4, UserId = "a9fde46e-f80e-42b6-ab4e-898fe2390a06" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "53178434-76a8-4cce-8634-a3bd884eb625" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "cc2f1605-0c61-4b2a-950b-d4bcd57cdc01" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "1-286-813-1461 x90817", CreatedByUserId = "482b80ab-a54b-4cd8-95f2-195e62525906", Description = "Et omnis ad commodi.", Email = "Herminio.Stark74@gmail.com", IsActive = true, IsDeleted = false, Name = "Company747", ThemeId = 2, WebSite = "http://alexane.info" },
                        new { Id = 62, ContactNumber = "(608) 753-3616 x005", CreatedByUserId = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d", Description = "Non in sit. Consequuntur culpa voluptatem eveniet nesciunt aut. Excepturi id laboriosam id fuga.", Email = "Rowland8@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company708", ThemeId = 2, WebSite = "https://leslie.info" },
                        new { Id = 63, ContactNumber = "1-721-741-5113", CreatedByUserId = "53178434-76a8-4cce-8634-a3bd884eb625", Description = "Autem pariatur voluptatem incidunt temporibus. Nisi officia voluptatibus temporibus dignissimos consectetur voluptatem perferendis et. Veritatis incidunt dolore ut. Sunt non vitae illo voluptas ratione consectetur.", Email = "Ella25@gmail.com", IsActive = true, IsDeleted = false, Name = "Company386", ThemeId = 1, WebSite = "https://marina.name" },
                        new { Id = 64, ContactNumber = "1-282-401-4521", CreatedByUserId = "244df142-7a5b-4530-b247-38c8b4159bc8", Description = "Reiciendis libero modi. Earum quia laudantium facilis voluptatem. Ut quidem quia nobis est possimus. Et voluptatem assumenda sequi.", Email = "Gabriella.Gerhold@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company154", ThemeId = 2, WebSite = "http://jadyn.com" },
                        new { Id = 65, ContactNumber = "1-713-289-4158 x213", CreatedByUserId = "482b80ab-a54b-4cd8-95f2-195e62525906", Description = "Ut aliquid aspernatur magni voluptates esse magni repellat. Qui quia ullam earum atque tempore eius eum.", Email = "Aaliyah_Cummerata82@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company225", ThemeId = 1, WebSite = "http://dena.biz" },
                        new { Id = 66, ContactNumber = "703-742-1315 x0426", CreatedByUserId = "53178434-76a8-4cce-8634-a3bd884eb625", Description = "Cumque ut officia dolorem exercitationem eius error. Enim aut earum ex quia eaque dolorem culpa nesciunt et. Facilis non dolorem sed alias voluptatem occaecati.", Email = "Kasandra_Cronin37@gmail.com", IsActive = true, IsDeleted = false, Name = "Company948", ThemeId = 1, WebSite = "https://hazel.info" },
                        new { Id = 67, ContactNumber = "1-500-262-7104", CreatedByUserId = "c46ae194-d760-422a-ba43-95d8a280451e", Description = "Qui eos illo in sed. Officia error est sit amet minima assumenda quos.", Email = "Janiya67@gmail.com", IsActive = true, IsDeleted = false, Name = "Company684", ThemeId = 1, WebSite = "http://rick.name" },
                        new { Id = 68, ContactNumber = "1-739-592-1530 x613", CreatedByUserId = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b", Description = "Sunt tempora ut.", Email = "Nella13@gmail.com", IsActive = true, IsDeleted = false, Name = "Company7", ThemeId = 1, WebSite = "https://shaun.com" },
                        new { Id = 69, ContactNumber = "(718) 503-2205 x912", CreatedByUserId = "cc2f1605-0c61-4b2a-950b-d4bcd57cdc01", Description = "Id quas quam qui.", Email = "Brenna70@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company173", ThemeId = 2, WebSite = "https://kiera.com" },
                        new { Id = 70, ContactNumber = "497-623-0106", CreatedByUserId = "a9fde46e-f80e-42b6-ab4e-898fe2390a06", Description = "Enim tempore incidunt maxime deleniti error quia esse. Explicabo voluptas in blanditiis autem tenetur illo ratione ut sed. Sed saepe consequatur est blanditiis rem non.", Email = "Tanya25@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company116", ThemeId = 1, WebSite = "https://jordyn.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 10, 19, 5, 1, 110, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Ullam est id deleniti rerum.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 4, 25, 6, 675, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Quia ipsa non iure.", UserId = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 13, 25, 40, 108, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Saepe ab illum corrupti.", UserId = "c46ae194-d760-422a-ba43-95d8a280451e" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 4, 46, 25, 101, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Qui repellat nulla.", UserId = "244df142-7a5b-4530-b247-38c8b4159bc8" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 4, 5, 13, 728, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Soluta nobis architecto.", UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 11, 1, 1, 47, 688, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Sed velit quo excepturi.", UserId = "244df142-7a5b-4530-b247-38c8b4159bc8" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 10, 19, 22, 54, 349, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Rem quod sint.", UserId = "244df142-7a5b-4530-b247-38c8b4159bc8" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 11, 9, 6, 9, 407, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Fugiat ut sit id blanditiis.", UserId = "482b80ab-a54b-4cd8-95f2-195e62525906" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 10, 22, 45, 43, 98, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Soluta nobis a magnam nihil suscipit voluptatem eum.", UserId = "2a8c280f-f385-4d2d-a5aa-c57e76b5168e" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 1, 36, 57, 132, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Est cupiditate officiis iusto et nam.", UserId = "a9fde46e-f80e-42b6-ab4e-898fe2390a06" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC !global", ButtonFontSize = "14px !global", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "53178434-76a8-4cce-8634-a3bd884eb625", CreatedAt = new DateTime(2018, 9, 10, 17, 20, 57, 558, DateTimeKind.Local), DisplayName = "Brisa", Email = "Maureen.Marvin@gmail.com", FirstName = "Haylee", IsActive = true, IsDeleted = false, LastName = "Schaefer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg", RoleId = 2 },
                        new { Id = "a9fde46e-f80e-42b6-ab4e-898fe2390a06", CreatedAt = new DateTime(2018, 9, 11, 2, 57, 55, 667, DateTimeKind.Local), DisplayName = "Rahsaan", Email = "Carli_Parker@hotmail.com", FirstName = "Alexane", IsActive = true, IsDeleted = false, LastName = "Graham", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg", RoleId = 1 },
                        new { Id = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d", CreatedAt = new DateTime(2018, 9, 11, 10, 25, 41, 819, DateTimeKind.Local), DisplayName = "Everette", Email = "Maryse31@gmail.com", FirstName = "Birdie", IsActive = true, IsDeleted = false, LastName = "Crona", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg", RoleId = 2 },
                        new { Id = "9eda7cac-1211-455b-803a-dc2e5b08896e", CreatedAt = new DateTime(2018, 9, 10, 19, 27, 2, 56, DateTimeKind.Local), DisplayName = "Lula", Email = "Stanton35@hotmail.com", FirstName = "Shyanne", IsActive = true, IsDeleted = false, LastName = "Ziemann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg", RoleId = 2 },
                        new { Id = "c46ae194-d760-422a-ba43-95d8a280451e", CreatedAt = new DateTime(2018, 9, 10, 17, 30, 11, 943, DateTimeKind.Local), DisplayName = "Gustave", Email = "Alba_Howell38@hotmail.com", FirstName = "Mckenna", IsActive = true, IsDeleted = false, LastName = "Robel", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg", RoleId = 1 },
                        new { Id = "244df142-7a5b-4530-b247-38c8b4159bc8", CreatedAt = new DateTime(2018, 9, 10, 21, 4, 15, 219, DateTimeKind.Local), DisplayName = "Magdalen", Email = "Shayne32@yahoo.com", FirstName = "Marcia", IsActive = true, IsDeleted = false, LastName = "Wunsch", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg", RoleId = 1 },
                        new { Id = "2a8c280f-f385-4d2d-a5aa-c57e76b5168e", CreatedAt = new DateTime(2018, 9, 11, 2, 53, 58, 674, DateTimeKind.Local), DisplayName = "Elmira", Email = "Otto99@gmail.com", FirstName = "Grant", IsActive = true, IsDeleted = false, LastName = "Schulist", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg", RoleId = 2 },
                        new { Id = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b", CreatedAt = new DateTime(2018, 9, 11, 8, 13, 25, 14, DateTimeKind.Local), DisplayName = "Savanna", Email = "Hershel.Veum@hotmail.com", FirstName = "Ivy", IsActive = true, IsDeleted = false, LastName = "Mills", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg", RoleId = 1 },
                        new { Id = "482b80ab-a54b-4cd8-95f2-195e62525906", CreatedAt = new DateTime(2018, 9, 10, 21, 33, 50, 644, DateTimeKind.Local), DisplayName = "Wilton", Email = "Marie91@gmail.com", FirstName = "Rod", IsActive = true, IsDeleted = false, LastName = "Wolf", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg", RoleId = 2 },
                        new { Id = "cc2f1605-0c61-4b2a-950b-d4bcd57cdc01", CreatedAt = new DateTime(2018, 9, 11, 5, 14, 15, 710, DateTimeKind.Local), DisplayName = "Candida", Email = "Cloyd16@hotmail.com", FirstName = "Estrella", IsActive = true, IsDeleted = false, LastName = "Adams", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "53178434-76a8-4cce-8634-a3bd884eb625", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "a9fde46e-f80e-42b6-ab4e-898fe2390a06", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "a97e16f2-9d97-4c3d-a9b5-da139a7c400d", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "9eda7cac-1211-455b-803a-dc2e5b08896e", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "c46ae194-d760-422a-ba43-95d8a280451e", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "244df142-7a5b-4530-b247-38c8b4159bc8", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "2a8c280f-f385-4d2d-a5aa-c57e76b5168e", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "ce4e84e3-1dcc-4536-906a-5dbc2d20232b", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "482b80ab-a54b-4cd8-95f2-195e62525906", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "cc2f1605-0c61-4b2a-950b-d4bcd57cdc01", OrganizationId = 65, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
