// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 97, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source3", Threshold = 38, Type = 1 },
                        new { Id = 102, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 31, Type = 0 },
                        new { Id = 103, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 0, Type = 2 },
                        new { Id = 104, DashboardId = 100, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 83, Type = 2 },
                        new { Id = 105, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 72, Type = 2 },
                        new { Id = 106, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source1", Threshold = 21, Type = 0 },
                        new { Id = 107, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 64, Type = 0 },
                        new { Id = 108, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 67, Type = 2 },
                        new { Id = 109, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 25, Type = 0 },
                        new { Id = 110, DashboardId = 93, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 94, Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8", Name = "aspernatur", Type = 0 },
                        new { Id = 22, CreatedById = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8", Name = "et", Type = 0 },
                        new { Id = 23, CreatedById = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", Name = "dolores", Type = 0 },
                        new { Id = 24, CreatedById = "2d4eda0b-daed-441c-a106-e9c41c02d5f7", Name = "reprehenderit", Type = 0 },
                        new { Id = 25, CreatedById = "0de4179a-3887-44e7-be81-cfce4a099114", Name = "assumenda", Type = 0 },
                        new { Id = 26, CreatedById = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8", Name = "recusandae", Type = 0 },
                        new { Id = 27, CreatedById = "5786467e-41f6-4673-b24c-8ff9a42e81bd", Name = "eius", Type = 0 },
                        new { Id = 28, CreatedById = "0de4179a-3887-44e7-be81-cfce4a099114", Name = "laborum", Type = 0 },
                        new { Id = 29, CreatedById = "5786467e-41f6-4673-b24c-8ff9a42e81bd", Name = "esse", Type = 0 },
                        new { Id = 30, CreatedById = "5786467e-41f6-4673-b24c-8ff9a42e81bd", Name = "minima", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 22, 10, 52, 26, 450, DateTimeKind.Local), InstanceId = 82, Title = "Title332" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 21, 19, 6, 14, 990, DateTimeKind.Local), InstanceId = 90, Title = "Title701" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 21, 18, 21, 16, 191, DateTimeKind.Local), InstanceId = 85, Title = "Title288" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 22, 7, 33, 56, 355, DateTimeKind.Local), InstanceId = 90, Title = "Title490" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 21, 19, 4, 18, 918, DateTimeKind.Local), InstanceId = 90, Title = "Title191" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 22, 7, 33, 2, 753, DateTimeKind.Local), InstanceId = 88, Title = "Title174" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 22, 13, 44, 46, 300, DateTimeKind.Local), InstanceId = 81, Title = "Title308" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 22, 10, 33, 28, 935, DateTimeKind.Local), InstanceId = 86, Title = "Title186" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 22, 11, 9, 56, 745, DateTimeKind.Local), InstanceId = 90, Title = "Title128" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 22, 14, 30, 28, 677, DateTimeKind.Local), InstanceId = 87, Title = "Title750" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 22, 12, 58, 43, 333, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Est adipisci et et laborum distinctio ea est.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 22, 15, 28, 40, 788, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Doloremque repudiandae non.", UserId = "0de4179a-3887-44e7-be81-cfce4a099114", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 21, 16, 39, 45, 951, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Laudantium ullam et.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 21, 23, 29, 10, 769, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Velit expedita eius aut aperiam et.", UserId = "0de4179a-3887-44e7-be81-cfce4a099114", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 22, 4, 15, 24, 495, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Doloribus dolorem id consequatur in.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 22, 16, 17, 44, 870, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Inventore earum quis eum laboriosam excepturi enim.", UserId = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 22, 6, 58, 20, 889, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Et quia laboriosam ut et possimus maxime labore aut.", UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 21, 22, 27, 33, 567, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nostrum odio numquam eligendi eaque.", UserId = "2d4eda0b-daed-441c-a106-e9c41c02d5f7", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 22, 2, 6, 39, 98, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "In est atque id.", UserId = "2adade50-e5c5-4eca-bede-4db6f7d46d8b", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 22, 4, 32, 53, 21, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Et architecto ratione et aut dolor deserunt ab.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "1c:48:5b:f2:92:1e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Windows", Title = "Instance716" },
                        new { Id = 82, Address = "c2:5e:1f:30:63:a1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 75, Platform = "Linux", Title = "Instance691" },
                        new { Id = 83, Address = "b9:5b:af:6e:aa:b7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 79, Platform = "Windows", Title = "Instance979" },
                        new { Id = 84, Address = "08:8a:e7:e3:6a:f7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 72, Platform = "Linux", Title = "Instance396" },
                        new { Id = 85, Address = "b6:0b:ce:74:73:92", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Linux", Title = "Instance516" },
                        new { Id = 86, Address = "12:46:0b:be:2b:c0", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Windows", Title = "Instance311" },
                        new { Id = 87, Address = "44:94:23:79:20:38", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 75, Platform = "Linux", Title = "Instance283" },
                        new { Id = 88, Address = "72:c8:e6:20:42:ad", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Windows", Title = "Instance772" },
                        new { Id = 89, Address = "c7:60:ac:f7:25:c2", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 75, Platform = "Windows", Title = "Instance979" },
                        new { Id = 90, Address = "5d:42:69:a8:95:21", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Windows", Title = "Instance720" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 26, CreatedAt = new DateTime(2018, 8, 21, 20, 34, 59, 376, DateTimeKind.Local), Text = "Ducimus ut nesciunt consequatur explicabo vel vitae.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WasRead = false },
                        new { Id = 32, ChatId = 21, CreatedAt = new DateTime(2018, 8, 22, 8, 21, 52, 419, DateTimeKind.Local), Text = "Quia nihil qui omnis sed.", UserId = "f6842948-5164-4056-b43f-7a58d1f4e924", WasRead = true },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 8, 22, 13, 52, 14, 850, DateTimeKind.Local), Text = "Adipisci accusamus similique atque explicabo fugit.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WasRead = false },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 8, 22, 8, 52, 52, 911, DateTimeKind.Local), Text = "A est non nihil laudantium eaque.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WasRead = false },
                        new { Id = 35, ChatId = 23, CreatedAt = new DateTime(2018, 8, 21, 16, 36, 14, 460, DateTimeKind.Local), Text = "Itaque quos perferendis est.", UserId = "2adade50-e5c5-4eca-bede-4db6f7d46d8b", WasRead = true },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 8, 22, 11, 6, 30, 595, DateTimeKind.Local), Text = "Velit dolorem inventore nihil nostrum quibusdam laborum quis delectus earum.", UserId = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8", WasRead = false },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 8, 21, 22, 23, 51, 954, DateTimeKind.Local), Text = "Illo occaecati quasi et.", UserId = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8", WasRead = true },
                        new { Id = 38, ChatId = 23, CreatedAt = new DateTime(2018, 8, 21, 20, 58, 59, 893, DateTimeKind.Local), Text = "Ipsa non architecto totam quis tenetur.", UserId = "2adade50-e5c5-4eca-bede-4db6f7d46d8b", WasRead = false },
                        new { Id = 39, ChatId = 25, CreatedAt = new DateTime(2018, 8, 22, 0, 22, 49, 987, DateTimeKind.Local), Text = "Dolores deserunt modi.", UserId = "1122f684-9878-4102-bcc7-e10517b0702b", WasRead = true },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 8, 22, 0, 17, 37, 284, DateTimeKind.Local), Text = "Ut tempora non eveniet rerum.", UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 22, 2, 31, 39, 124, DateTimeKind.Local), NotificationSettingId = 11, Text = "Excepturi rem sed sed sit.", UserId = "5786467e-41f6-4673-b24c-8ff9a42e81bd", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 21, 18, 9, 10, 607, DateTimeKind.Local), NotificationSettingId = 15, Text = "Non aut aliquid neque et rerum assumenda.", UserId = "0de4179a-3887-44e7-be81-cfce4a099114", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 22, 13, 9, 22, 926, DateTimeKind.Local), NotificationSettingId = 11, Text = "Qui cum est occaecati rerum perferendis aut.", UserId = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 22, 13, 13, 20, 736, DateTimeKind.Local), NotificationSettingId = 14, Text = "Id hic quia est dolor occaecati facere.", UserId = "2adade50-e5c5-4eca-bede-4db6f7d46d8b", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 22, 12, 19, 23, 298, DateTimeKind.Local), NotificationSettingId = 17, Text = "Et nobis ut eveniet accusantium maiores dolores amet aliquam.", UserId = "0de4179a-3887-44e7-be81-cfce4a099114", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 21, 16, 33, 18, 222, DateTimeKind.Local), NotificationSettingId = 14, Text = "Fugiat cumque sit quia alias laudantium aliquid recusandae non.", UserId = "1122f684-9878-4102-bcc7-e10517b0702b", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 22, 14, 19, 44, 968, DateTimeKind.Local), NotificationSettingId = 11, Text = "Magni assumenda dolore ipsum quidem eum ipsum rerum quia.", UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 22, 4, 15, 13, 844, DateTimeKind.Local), NotificationSettingId = 12, Text = "Consequuntur repellat reiciendis possimus consequatur a veniam praesentium itaque voluptatum.", UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 21, 19, 56, 15, 8, DateTimeKind.Local), NotificationSettingId = 20, Text = "Aut officiis aut eligendi qui et consectetur.", UserId = "2d4eda0b-daed-441c-a106-e9c41c02d5f7", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 22, 11, 3, 29, 322, DateTimeKind.Local), NotificationSettingId = 17, Text = "Provident qui dolores.", UserId = "f6842948-5164-4056-b43f-7a58d1f4e924", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8" },
                        new { Id = 12, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "1122f684-9878-4102-bcc7-e10517b0702b" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6" },
                        new { Id = 14, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc" },
                        new { Id = 15, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6" },
                        new { Id = 16, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "f6842948-5164-4056-b43f-7a58d1f4e924" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8" },
                        new { Id = 19, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "0de4179a-3887-44e7-be81-cfce4a099114" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(969) 842-0987 x487", CreatedByUserId = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8", Description = "Eos ea odit non ut omnis numquam aut. Minus id ex quia accusantium.", Email = "Demarco_Wintheiser0@gmail.com", IsActive = true, Name = "Company602", ThemeId = 70, WebSite = "https://gerda.org" },
                        new { Id = 72, ContactNumber = "1-282-854-1766 x80666", CreatedByUserId = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8", Description = "Est recusandae optio debitis. Repellendus sit adipisci accusamus nisi distinctio sint quidem.", Email = "Brandon_Bernhard@hotmail.com", IsActive = true, Name = "Company136", ThemeId = 67, WebSite = "https://serena.org" },
                        new { Id = 73, ContactNumber = "(451) 443-9529 x203", CreatedByUserId = "5786467e-41f6-4673-b24c-8ff9a42e81bd", Description = "", Email = "Eduardo.Koepp@gmail.com", IsActive = true, Name = "Company996", ThemeId = 61, WebSite = "https://brent.biz" },
                        new { Id = 74, ContactNumber = "940.756.2406", CreatedByUserId = "2adade50-e5c5-4eca-bede-4db6f7d46d8b", Description = "Voluptatem officia aspernatur sapiente nihil porro dolor voluptates dolore maiores. Animi nihil est doloremque totam dolorem. Natus voluptas reiciendis.", Email = "Davonte.Anderson@yahoo.com", IsActive = true, Name = "Company632", ThemeId = 70, WebSite = "http://ryleigh.info" },
                        new { Id = 75, ContactNumber = "(495) 753-0519", CreatedByUserId = "1122f684-9878-4102-bcc7-e10517b0702b", Description = "Consequatur tenetur in possimus facilis voluptatibus ab aliquid sint.", Email = "Michele57@hotmail.com", IsActive = true, Name = "Company856", ThemeId = 67, WebSite = "http://hershel.org" },
                        new { Id = 76, ContactNumber = "1-525-622-4806", CreatedByUserId = "2d4eda0b-daed-441c-a106-e9c41c02d5f7", Description = "Omnis accusamus quia molestiae dignissimos autem id. Aut ipsa tempore nisi nam. Placeat qui praesentium ea dolor. Sint est adipisci sed.", Email = "Abdiel_Harris56@hotmail.com", IsActive = true, Name = "Company241", ThemeId = 65, WebSite = "http://lyric.info" },
                        new { Id = 77, ContactNumber = "1-760-213-3899 x956", CreatedByUserId = "f6842948-5164-4056-b43f-7a58d1f4e924", Description = "Praesentium quisquam qui sequi cum quia in. Culpa quas quo.", Email = "Freida.Mills@yahoo.com", IsActive = true, Name = "Company795", ThemeId = 65, WebSite = "http://dax.info" },
                        new { Id = 78, ContactNumber = "434-858-5899 x15707", CreatedByUserId = "f6842948-5164-4056-b43f-7a58d1f4e924", Description = "Dicta vitae perspiciatis ad.", Email = "Anita71@gmail.com", IsActive = true, Name = "Company68", ThemeId = 69, WebSite = "http://josefina.com" },
                        new { Id = 79, ContactNumber = "981.857.9064 x9559", CreatedByUserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6", Description = "Sed velit iusto laborum non culpa a quas sed. Sapiente eum laboriosam ut cum velit reiciendis delectus velit ut.", Email = "Shayna_Emard@yahoo.com", IsActive = true, Name = "Company814", ThemeId = 70, WebSite = "http://twila.name" },
                        new { Id = 80, ContactNumber = "1-715-392-3836 x6756", CreatedByUserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6", Description = "Qui error dolorum dolor non dolore ut facilis sunt. Minima qui et et non earum inventore nam cumque veritatis.", Email = "Demario_Zieme@yahoo.com", IsActive = true, Name = "Company552", ThemeId = 67, WebSite = "http://xavier.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 22, 0, 44, 29, 477, DateTimeKind.Local), FeedbackId = 42, Text = "Excepturi nulla et neque provident officia aut id.", UserId = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 22, 0, 11, 39, 569, DateTimeKind.Local), FeedbackId = 42, Text = "Rem similique cum harum odio ipsa est id.", UserId = "f6842948-5164-4056-b43f-7a58d1f4e924" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 21, 23, 7, 34, 577, DateTimeKind.Local), FeedbackId = 43, Text = "Dolorem eum atque odio ratione cumque iure quisquam.", UserId = "2d4eda0b-daed-441c-a106-e9c41c02d5f7" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 22, 6, 54, 24, 170, DateTimeKind.Local), FeedbackId = 50, Text = "Neque labore beatae saepe qui vero.", UserId = "0de4179a-3887-44e7-be81-cfce4a099114" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 21, 21, 57, 41, 979, DateTimeKind.Local), FeedbackId = 41, Text = "Tempore laboriosam et perspiciatis voluptatem aut.", UserId = "2d4eda0b-daed-441c-a106-e9c41c02d5f7" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 21, 18, 6, 36, 385, DateTimeKind.Local), FeedbackId = 44, Text = "Qui iure asperiores cumque aut similique officia tenetur praesentium dignissimos.", UserId = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 21, 19, 22, 53, 769, DateTimeKind.Local), FeedbackId = 43, Text = "Totam sed delectus fugiat.", UserId = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 22, 1, 59, 16, 92, DateTimeKind.Local), FeedbackId = 44, Text = "Omnis quod nesciunt qui aut.", UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 22, 5, 46, 2, 712, DateTimeKind.Local), FeedbackId = 45, Text = "Ut voluptatem sit placeat omnis et autem temporibus nesciunt ut.", UserId = "2d4eda0b-daed-441c-a106-e9c41c02d5f7" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 21, 17, 55, 25, 637, DateTimeKind.Local), FeedbackId = 43, Text = "Excepturi aut incidunt beatae hic ipsa.", UserId = "5786467e-41f6-4673-b24c-8ff9a42e81bd" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme689" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme545" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme404" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme894" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme957" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme547" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme239" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme521" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme850" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme165" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "2adade50-e5c5-4eca-bede-4db6f7d46d8b", CreatedAt = new DateTime(2018, 8, 22, 1, 4, 25, 979, DateTimeKind.Local), DisplayName = "Arely", Email = "Cayla_Douglas@gmail.com", FirstName = "Jedediah", IsActive = true, LastName = "Stark", RoleId = 2 },
                        new { Id = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8", CreatedAt = new DateTime(2018, 8, 22, 10, 52, 18, 990, DateTimeKind.Local), DisplayName = "Sammy", Email = "Carmela.Stehr@yahoo.com", FirstName = "Odell", IsActive = true, LastName = "Bergstrom", RoleId = 2 },
                        new { Id = "1122f684-9878-4102-bcc7-e10517b0702b", CreatedAt = new DateTime(2018, 8, 22, 9, 37, 12, 374, DateTimeKind.Local), DisplayName = "Benton", Email = "Dakota_Gottlieb29@gmail.com", FirstName = "Marisol", IsActive = true, LastName = "Windler", RoleId = 2 },
                        new { Id = "2d4eda0b-daed-441c-a106-e9c41c02d5f7", CreatedAt = new DateTime(2018, 8, 22, 3, 1, 59, 128, DateTimeKind.Local), DisplayName = "Marina", Email = "Jessica_Jones16@gmail.com", FirstName = "Alf", IsActive = true, LastName = "Considine", RoleId = 2 },
                        new { Id = "5786467e-41f6-4673-b24c-8ff9a42e81bd", CreatedAt = new DateTime(2018, 8, 22, 5, 58, 22, 344, DateTimeKind.Local), DisplayName = "Frankie", Email = "Nikki_Hammes@hotmail.com", FirstName = "Eric", IsActive = true, LastName = "Mertz", RoleId = 1 },
                        new { Id = "39bd9adb-e2dd-4312-a766-87cedf8b16a6", CreatedAt = new DateTime(2018, 8, 21, 22, 24, 40, 803, DateTimeKind.Local), DisplayName = "Darryl", Email = "Nasir_Schmitt42@yahoo.com", FirstName = "Baron", IsActive = true, LastName = "Dibbert", RoleId = 2 },
                        new { Id = "f6842948-5164-4056-b43f-7a58d1f4e924", CreatedAt = new DateTime(2018, 8, 22, 2, 11, 30, 447, DateTimeKind.Local), DisplayName = "Muhammad", Email = "Christopher.Hudson@hotmail.com", FirstName = "Flavio", IsActive = true, LastName = "Torphy", RoleId = 1 },
                        new { Id = "0de4179a-3887-44e7-be81-cfce4a099114", CreatedAt = new DateTime(2018, 8, 22, 5, 23, 8, 307, DateTimeKind.Local), DisplayName = "Casimer", Email = "Johnpaul_Vandervort@yahoo.com", FirstName = "Annamae", IsActive = true, LastName = "Bartell", RoleId = 1 },
                        new { Id = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8", CreatedAt = new DateTime(2018, 8, 22, 1, 28, 34, 966, DateTimeKind.Local), DisplayName = "Dovie", Email = "Veronica_Kilback@hotmail.com", FirstName = "Manuel", IsActive = true, LastName = "Stamm", RoleId = 1 },
                        new { Id = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", CreatedAt = new DateTime(2018, 8, 22, 2, 39, 28, 718, DateTimeKind.Local), DisplayName = "Raegan", Email = "Vladimir_Quigley@hotmail.com", FirstName = "Sherwood", IsActive = true, LastName = "Ritchie", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "2adade50-e5c5-4eca-bede-4db6f7d46d8b", OrganizationId = 75 },
                        new { UserId = "ade726a5-8cf6-49aa-8b7c-64c05b1f10f8", OrganizationId = 72 },
                        new { UserId = "1122f684-9878-4102-bcc7-e10517b0702b", OrganizationId = 71 },
                        new { UserId = "2d4eda0b-daed-441c-a106-e9c41c02d5f7", OrganizationId = 74 },
                        new { UserId = "5786467e-41f6-4673-b24c-8ff9a42e81bd", OrganizationId = 74 },
                        new { UserId = "39bd9adb-e2dd-4312-a766-87cedf8b16a6", OrganizationId = 79 },
                        new { UserId = "f6842948-5164-4056-b43f-7a58d1f4e924", OrganizationId = 77 },
                        new { UserId = "0de4179a-3887-44e7-be81-cfce4a099114", OrganizationId = 76 },
                        new { UserId = "985b0227-2f4e-4cd3-a4c5-a016e5b05fd8", OrganizationId = 73 },
                        new { UserId = "3734c9ec-be2b-4d96-8d0f-11ede0414abc", OrganizationId = 72 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
