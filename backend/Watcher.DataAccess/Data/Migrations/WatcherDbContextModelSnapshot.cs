// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 85, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 54, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 82, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 37, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 82, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 46, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 68, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 87, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 6, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 34, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 83, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 60, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 81, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 78, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 82, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 96, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "9603312a-f694-4178-9405-0edf297ba8b3", IsDeleted = false, Name = "nihil", Type = 0 },
                        new { Id = 22, CreatedById = "76acb978-b2aa-4340-84d0-02494e5175e4", IsDeleted = false, Name = "nam", Type = 0 },
                        new { Id = 23, CreatedById = "1a663fb2-1a63-4070-a001-ed559a8c4160", IsDeleted = false, Name = "unde", Type = 0 },
                        new { Id = 24, CreatedById = "2819394b-d044-4be1-960d-a60e12a21f7a", IsDeleted = false, Name = "quasi", Type = 0 },
                        new { Id = 25, CreatedById = "94719eb2-7b6a-4420-8a6f-264380d3263f", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 26, CreatedById = "1a663fb2-1a63-4070-a001-ed559a8c4160", IsDeleted = false, Name = "ut", Type = 0 },
                        new { Id = 27, CreatedById = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905", IsDeleted = false, Name = "ab", Type = 0 },
                        new { Id = 28, CreatedById = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905", IsDeleted = false, Name = "sint", Type = 0 },
                        new { Id = 29, CreatedById = "9d3f18be-2903-40c5-954d-1b3718154f55", IsDeleted = false, Name = "maiores", Type = 0 },
                        new { Id = 30, CreatedById = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", IsDeleted = false, Name = "officiis", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 11, 10, 24, 27, 830, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title675" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 11, 16, 32, 13, 297, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title284" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 11, 12, 40, 57, 508, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title218" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 11, 9, 25, 34, 351, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title223" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 11, 23, 55, 13, 614, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title600" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 11, 16, 10, 57, 224, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title728" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 12, 1, 45, 57, 536, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title753" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 11, 22, 35, 22, 129, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title12" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 11, 20, 52, 40, 119, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title907" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 11, 19, 36, 32, 506, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title879" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 13, 50, 7, 285, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolorem itaque dolorum quis facere occaecati architecto.", UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 20, 51, 43, 295, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Labore veniam minus dolor voluptate iusto consectetur eveniet ab culpa.", UserId = "2819394b-d044-4be1-960d-a60e12a21f7a", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 8, 1, 33, 971, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Saepe et repellat ratione incidunt.", UserId = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 8, 29, 12, 877, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eos deleniti velit quisquam facilis et nihil.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 11, 9, 30, 9, 759, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Praesentium eligendi officia debitis accusamus vitae laudantium quam tempora.", UserId = "1a663fb2-1a63-4070-a001-ed559a8c4160", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 11, 15, 38, 36, 837, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut veniam maiores dolorum qui.", UserId = "9603312a-f694-4178-9405-0edf297ba8b3", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 7, 8, 29, 507, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nulla possimus eum iure aspernatur.", UserId = "9d3f18be-2903-40c5-954d-1b3718154f55", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 11, 7, 53, 12, 348, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Omnis consequatur corrupti sequi adipisci quibusdam.", UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 5, 41, 19, 290, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Perferendis illo sint soluta consequatur sed fugiat aliquam.", UserId = "2819394b-d044-4be1-960d-a60e12a21f7a", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 2, 34, 13, 425, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Id accusantium ut quaerat.", UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "5f:9b:bb:7b:ac:c5", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance663" },
                        new { Id = 72, Address = "8e:a1:f8:a5:c6:23", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance511" },
                        new { Id = 73, Address = "14:75:ba:1f:90:03", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance972" },
                        new { Id = 74, Address = "9e:a3:88:cf:44:0b", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance191" },
                        new { Id = 75, Address = "72:64:8e:8e:94:3f", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance718" },
                        new { Id = 76, Address = "8f:f9:b3:30:e9:e9", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance140" },
                        new { Id = 77, Address = "10:53:e8:e1:11:ea", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance917" },
                        new { Id = 78, Address = "45:58:36:21:06:b0", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance379" },
                        new { Id = 79, Address = "90:f5:f2:2d:11:a5", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance544" },
                        new { Id = 80, Address = "2a:42:10:0e:c7:1e", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance897" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 22, CreatedAt = new DateTime(2018, 9, 11, 11, 27, 31, 574, DateTimeKind.Local), IsDeleted = false, Text = "Repellat et voluptates non quisquam corporis.", UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", WasRead = false },
                        new { Id = 32, ChatId = 30, CreatedAt = new DateTime(2018, 9, 11, 9, 2, 32, 326, DateTimeKind.Local), IsDeleted = false, Text = "Perferendis voluptas autem et quo et blanditiis ex pariatur consequatur.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WasRead = true },
                        new { Id = 33, ChatId = 29, CreatedAt = new DateTime(2018, 9, 11, 4, 40, 4, 955, DateTimeKind.Local), IsDeleted = false, Text = "Laudantium nemo voluptates voluptatem error repellendus blanditiis aspernatur molestiae qui.", UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", WasRead = false },
                        new { Id = 34, ChatId = 27, CreatedAt = new DateTime(2018, 9, 11, 7, 47, 23, 71, DateTimeKind.Local), IsDeleted = false, Text = "Et officiis est deserunt et.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WasRead = true },
                        new { Id = 35, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 3, 12, 30, 743, DateTimeKind.Local), IsDeleted = false, Text = "Debitis sint veritatis soluta doloribus.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WasRead = false },
                        new { Id = 36, ChatId = 27, CreatedAt = new DateTime(2018, 9, 11, 8, 21, 53, 116, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatum impedit illum ut neque natus maxime commodi est.", UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f", WasRead = false },
                        new { Id = 37, ChatId = 30, CreatedAt = new DateTime(2018, 9, 12, 0, 45, 48, 533, DateTimeKind.Local), IsDeleted = false, Text = "Nemo dolores hic aliquid mollitia cumque est.", UserId = "94719eb2-7b6a-4420-8a6f-264380d3263f", WasRead = false },
                        new { Id = 38, ChatId = 21, CreatedAt = new DateTime(2018, 9, 12, 2, 7, 58, 12, DateTimeKind.Local), IsDeleted = false, Text = "Qui quam iusto non autem.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WasRead = false },
                        new { Id = 39, ChatId = 25, CreatedAt = new DateTime(2018, 9, 12, 0, 33, 22, 707, DateTimeKind.Local), IsDeleted = false, Text = "Inventore molestiae et nobis laudantium voluptate molestiae rerum qui.", UserId = "9d3f18be-2903-40c5-954d-1b3718154f55", WasRead = true },
                        new { Id = 40, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 22, 25, 11, 917, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatibus laborum dolores fugit voluptatem vel facilis eum distinctio.", UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 11, 15, 29, 11, 981, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Cum aut illum illum adipisci tempore dolorem.", UserId = "9d3f18be-2903-40c5-954d-1b3718154f55", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 11, 9, 20, 11, 539, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Assumenda voluptatem dolore eligendi.", UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 12, 2, 6, 37, 410, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Et expedita similique iusto.", UserId = "c9d3c359-9b33-48fd-95d0-502911a4d3bc", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 12, 0, 18, 52, 522, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Eveniet laudantium et cupiditate.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 11, 16, 39, 26, 183, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Quod voluptates sed voluptate unde sunt error esse.", UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 11, 3, 58, 46, 320, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Voluptatem voluptatem culpa quae aliquam blanditiis et.", UserId = "2819394b-d044-4be1-960d-a60e12a21f7a", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 11, 6, 22, 45, 749, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Temporibus ab quas enim doloribus praesentium explicabo aut hic.", UserId = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 11, 12, 4, 58, 400, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Autem debitis animi fugiat explicabo voluptatem aperiam perferendis consequatur.", UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 12, 1, 16, 10, 800, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Vero enim harum dolorem dolores iste beatae odit sit ea.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 11, 6, 37, 37, 590, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Enim necessitatibus porro quisquam nobis velit dolor aliquam vel at.", UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "9603312a-f694-4178-9405-0edf297ba8b3" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "9d3f18be-2903-40c5-954d-1b3718154f55" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "c9d3c359-9b33-48fd-95d0-502911a4d3bc" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "c9d3c359-9b33-48fd-95d0-502911a4d3bc" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "76acb978-b2aa-4340-84d0-02494e5175e4" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "9d3f18be-2903-40c5-954d-1b3718154f55" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "1-937-869-4789", CreatedByUserId = "76acb978-b2aa-4340-84d0-02494e5175e4", Description = "Vel explicabo fuga nam corrupti corporis aut eaque velit. Qui dolorem aut eveniet sed sequi. Sed qui reprehenderit id veniam mollitia deserunt eveniet qui alias. Voluptatibus nesciunt enim doloribus.", Email = "Jaquan38@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company776", ThemeId = 2, WebSite = "https://araceli.com" },
                        new { Id = 62, ContactNumber = "674-827-6351", CreatedByUserId = "c9d3c359-9b33-48fd-95d0-502911a4d3bc", Description = "Aperiam assumenda nam corporis natus inventore. Aspernatur deserunt earum.", Email = "Felicia.Trantow@gmail.com", IsActive = true, IsDeleted = false, Name = "Company652", ThemeId = 1, WebSite = "http://berneice.name" },
                        new { Id = 63, ContactNumber = "286.436.6371", CreatedByUserId = "9603312a-f694-4178-9405-0edf297ba8b3", Description = "Culpa tempora modi. Doloribus et atque fuga natus est corrupti aliquam. Velit nisi enim eum fuga. Atque distinctio autem dolorum doloremque.", Email = "Elton55@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company156", ThemeId = 1, WebSite = "http://adrian.info" },
                        new { Id = 64, ContactNumber = "515-678-3754 x13391", CreatedByUserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", Description = "Qui quia est consectetur voluptatibus harum. Ipsa eligendi repellat laboriosam consequatur reiciendis. Amet quaerat iusto aut veritatis magnam.", Email = "Kelley27@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company673", ThemeId = 2, WebSite = "https://adella.com" },
                        new { Id = 65, ContactNumber = "984.564.9740", CreatedByUserId = "76acb978-b2aa-4340-84d0-02494e5175e4", Description = "Velit animi aperiam. Illo tenetur voluptatem ab occaecati odio ut libero nisi earum. Eligendi necessitatibus repudiandae sequi iusto aut sit explicabo earum. Repellendus autem unde magni ut totam.", Email = "Candelario.Wehner@gmail.com", IsActive = true, IsDeleted = false, Name = "Company538", ThemeId = 2, WebSite = "https://kendall.biz" },
                        new { Id = 66, ContactNumber = "916-352-8594 x935", CreatedByUserId = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905", Description = "", Email = "Stewart58@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company248", ThemeId = 1, WebSite = "https://christina.net" },
                        new { Id = 67, ContactNumber = "889.616.0260", CreatedByUserId = "c9d3c359-9b33-48fd-95d0-502911a4d3bc", Description = "Porro saepe a ullam suscipit odio ab vel et consequatur. Et voluptatem at rem modi dolorem. Mollitia quia ducimus. Id sit molestias asperiores numquam at.", Email = "Wilfrid_Wiza9@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company158", ThemeId = 1, WebSite = "http://dorris.net" },
                        new { Id = 68, ContactNumber = "901-586-3180", CreatedByUserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f", Description = "Fuga dignissimos ut sequi fuga temporibus laboriosam. Adipisci omnis in velit. Ut ut deserunt reprehenderit dolores.", Email = "Aletha72@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company612", ThemeId = 1, WebSite = "https://nina.name" },
                        new { Id = 69, ContactNumber = "459-959-9184", CreatedByUserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", Description = "Eius accusamus eum. Quis nihil id temporibus quia officia suscipit similique non.", Email = "Ada68@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company930", ThemeId = 1, WebSite = "http://shayne.net" },
                        new { Id = 70, ContactNumber = "743-668-4021 x8439", CreatedByUserId = "76acb978-b2aa-4340-84d0-02494e5175e4", Description = "", Email = "Abdiel_Hayes@gmail.com", IsActive = true, IsDeleted = false, Name = "Company444", ThemeId = 2, WebSite = "http://cloyd.net" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 11, 23, 37, 52, 782, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Cumque enim velit dolor et omnis consequatur distinctio esse numquam.", UserId = "c9d3c359-9b33-48fd-95d0-502911a4d3bc" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 21, 5, 20, 272, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Quas necessitatibus quo reprehenderit quo est aperiam.", UserId = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 4, 34, 11, 789, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Libero consectetur quisquam id.", UserId = "1a663fb2-1a63-4070-a001-ed559a8c4160" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 22, 49, 2, 933, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Eos quasi quia provident ut doloribus sequi cum.", UserId = "2819394b-d044-4be1-960d-a60e12a21f7a" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 23, 7, 44, 730, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Dolor culpa et ut.", UserId = "2819394b-d044-4be1-960d-a60e12a21f7a" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 12, 0, 46, 39, 186, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Temporibus ut deleniti omnis.", UserId = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 15, 40, 23, 316, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Quis molestiae molestias doloribus tenetur commodi est.", UserId = "9d3f18be-2903-40c5-954d-1b3718154f55" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 11, 2, 33, 58, 832, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Ea soluta perferendis rerum aspernatur recusandae.", UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 12, 16, 40, 723, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Corrupti animi quisquam ea consequatur molestiae a.", UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 5, 0, 5, 817, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Deserunt officia iure modi laborum et amet quam.", UserId = "2819394b-d044-4be1-960d-a60e12a21f7a" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC", ButtonFontSize = "14px !global", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "c9d3c359-9b33-48fd-95d0-502911a4d3bc", CreatedAt = new DateTime(2018, 9, 11, 4, 3, 30, 315, DateTimeKind.Local), DisplayName = "Art", Email = "Watson.Legros@yahoo.com", FirstName = "Estefania", IsActive = true, IsDeleted = false, LastName = "Senger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg", RoleId = 1 },
                        new { Id = "2819394b-d044-4be1-960d-a60e12a21f7a", CreatedAt = new DateTime(2018, 9, 11, 14, 41, 27, 196, DateTimeKind.Local), DisplayName = "Rahul", Email = "Garnett_Haag@gmail.com", FirstName = "Zander", IsActive = true, IsDeleted = false, LastName = "Swift", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg", RoleId = 2 },
                        new { Id = "1a663fb2-1a63-4070-a001-ed559a8c4160", CreatedAt = new DateTime(2018, 9, 11, 12, 19, 32, 5, DateTimeKind.Local), DisplayName = "Dustin", Email = "Rosa.Stokes@gmail.com", FirstName = "Jasper", IsActive = true, IsDeleted = false, LastName = "Hudson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg", RoleId = 1 },
                        new { Id = "9d3f18be-2903-40c5-954d-1b3718154f55", CreatedAt = new DateTime(2018, 9, 11, 3, 41, 3, 985, DateTimeKind.Local), DisplayName = "Korbin", Email = "Shaina44@hotmail.com", FirstName = "Joanie", IsActive = true, IsDeleted = false, LastName = "Wuckert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg", RoleId = 1 },
                        new { Id = "2a6ff317-062f-4fa9-982a-b5e85d35db4f", CreatedAt = new DateTime(2018, 9, 11, 6, 59, 56, 157, DateTimeKind.Local), DisplayName = "Omer", Email = "Randall_Ondricka@yahoo.com", FirstName = "Delfina", IsActive = true, IsDeleted = false, LastName = "Padberg", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg", RoleId = 1 },
                        new { Id = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905", CreatedAt = new DateTime(2018, 9, 11, 4, 15, 45, 437, DateTimeKind.Local), DisplayName = "Matilde", Email = "Meagan_Paucek@gmail.com", FirstName = "Lionel", IsActive = true, IsDeleted = false, LastName = "Hegmann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg", RoleId = 1 },
                        new { Id = "94719eb2-7b6a-4420-8a6f-264380d3263f", CreatedAt = new DateTime(2018, 9, 12, 2, 0, 30, 662, DateTimeKind.Local), DisplayName = "Richard", Email = "Kelly.Keebler@yahoo.com", FirstName = "Marietta", IsActive = true, IsDeleted = false, LastName = "Hills", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg", RoleId = 2 },
                        new { Id = "9603312a-f694-4178-9405-0edf297ba8b3", CreatedAt = new DateTime(2018, 9, 11, 14, 11, 14, 606, DateTimeKind.Local), DisplayName = "Lee", Email = "Daphnee_Beatty43@yahoo.com", FirstName = "Billy", IsActive = true, IsDeleted = false, LastName = "Considine", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg", RoleId = 1 },
                        new { Id = "76acb978-b2aa-4340-84d0-02494e5175e4", CreatedAt = new DateTime(2018, 9, 11, 6, 54, 37, 994, DateTimeKind.Local), DisplayName = "Blaise", Email = "Bruce_Kozey73@yahoo.com", FirstName = "Fernando", IsActive = true, IsDeleted = false, LastName = "Feeney", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg", RoleId = 2 },
                        new { Id = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", CreatedAt = new DateTime(2018, 9, 11, 5, 37, 49, 807, DateTimeKind.Local), DisplayName = "Davonte", Email = "Clint_Adams@gmail.com", FirstName = "Guiseppe", IsActive = true, IsDeleted = false, LastName = "Sawayn", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "c9d3c359-9b33-48fd-95d0-502911a4d3bc", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "2819394b-d044-4be1-960d-a60e12a21f7a", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "1a663fb2-1a63-4070-a001-ed559a8c4160", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "9d3f18be-2903-40c5-954d-1b3718154f55", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "2a6ff317-062f-4fa9-982a-b5e85d35db4f", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "844e83a9-5a4d-40c3-b7ce-a5e9a30ee905", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "94719eb2-7b6a-4420-8a6f-264380d3263f", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "9603312a-f694-4178-9405-0edf297ba8b3", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "76acb978-b2aa-4340-84d0-02494e5175e4", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "e338b266-bcb3-4a6b-b652-3f6aea7cc02f", OrganizationId = 65, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
