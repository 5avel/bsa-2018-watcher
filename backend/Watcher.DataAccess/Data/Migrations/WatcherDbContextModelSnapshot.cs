// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 30, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 35, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 42, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 58, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 65, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 19, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 100, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 82, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 66, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 93, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 83, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "fba67b9e-b7b0-415f-b131-ac022c311ddd", IsDeleted = false, Name = "placeat", Type = 0 },
                        new { Id = 22, CreatedById = "8da92424-ba3f-4126-bb43-2810fc99abef", IsDeleted = false, Name = "odio", Type = 0 },
                        new { Id = 23, CreatedById = "fba67b9e-b7b0-415f-b131-ac022c311ddd", IsDeleted = false, Name = "ut", Type = 0 },
                        new { Id = 24, CreatedById = "a70677ea-748f-4259-8068-598460f07e86", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 25, CreatedById = "a70677ea-748f-4259-8068-598460f07e86", IsDeleted = false, Name = "molestiae", Type = 0 },
                        new { Id = 26, CreatedById = "a70677ea-748f-4259-8068-598460f07e86", IsDeleted = false, Name = "quisquam", Type = 0 },
                        new { Id = 27, CreatedById = "32185bec-5623-463d-9d32-dff833189c31", IsDeleted = false, Name = "consectetur", Type = 0 },
                        new { Id = 28, CreatedById = "6d11d143-9820-43e6-b3cc-745bfdd18061", IsDeleted = false, Name = "eius", Type = 0 },
                        new { Id = 29, CreatedById = "378606ac-b59f-4b1d-94d0-500f2ddaac9f", IsDeleted = false, Name = "id", Type = 0 },
                        new { Id = 30, CreatedById = "fba67b9e-b7b0-415f-b131-ac022c311ddd", IsDeleted = false, Name = "voluptas", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 11, 10, 36, 10, 318, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title67" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 10, 18, 2, 0, 709, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title84" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 10, 22, 18, 27, 398, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title523" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 10, 16, 33, 31, 501, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title169" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 10, 13, 42, 14, 298, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title983" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 10, 17, 12, 2, 691, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title632" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 11, 3, 6, 17, 936, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title100" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 10, 15, 0, 58, 198, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title310" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 11, 10, 45, 59, 961, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title710" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 10, 20, 24, 13, 591, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title949" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 1, 28, 18, 396, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Enim dignissimos quis odio consequatur adipisci autem similique omnis dolorum.", UserId = "8abc3436-3ce4-4d66-9985-cf207393656d", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 10, 16, 59, 20, 732, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Itaque laudantium tenetur in.", UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 10, 16, 8, 35, 267, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dicta et odit voluptatem dicta aut quo sit beatae.", UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 5, 14, 22, 294, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dignissimos libero qui perspiciatis impedit exercitationem ut delectus.", UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 11, 9, 0, 43, 913, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Fugit voluptas vero quia.", UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 11, 4, 58, 51, 585, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aliquam unde eum sed et excepturi laboriosam ab.", UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 0, 18, 19, 613, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quae quos necessitatibus quo quibusdam.", UserId = "b76bdc42-3b4a-4f8c-9991-b99831c10236", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 10, 21, 18, 22, 238, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et et minima aut facere rem laboriosam.", UserId = "8abc3436-3ce4-4d66-9985-cf207393656d", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 7, 49, 40, 245, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Incidunt impedit et adipisci ea harum.", UserId = "a70677ea-748f-4259-8068-598460f07e86", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 10, 14, 47, 47, 915, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Omnis rerum sed expedita.", UserId = "a70677ea-748f-4259-8068-598460f07e86", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "19:f6:bc:df:74:03", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance253" },
                        new { Id = 82, Address = "29:02:ad:fa:bd:9c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance831" },
                        new { Id = 83, Address = "f6:26:92:80:60:20", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance126" },
                        new { Id = 84, Address = "e3:d8:f0:6e:3f:ae", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance799" },
                        new { Id = 85, Address = "97:ff:f8:0d:6f:dd", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance812" },
                        new { Id = 86, Address = "91:2a:dd:f8:22:f2", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance864" },
                        new { Id = 87, Address = "53:9b:09:e7:91:51", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance493" },
                        new { Id = 88, Address = "d8:0a:6b:3b:b1:f6", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance731" },
                        new { Id = 89, Address = "cb:55:1d:67:5c:b9", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance68" },
                        new { Id = 90, Address = "4b:88:ee:7c:91:fb", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance295" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 10, 48, 57, 739, DateTimeKind.Local), IsDeleted = false, Text = "Est quibusdam sunt enim.", UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", WasRead = false },
                        new { Id = 32, ChatId = 30, CreatedAt = new DateTime(2018, 9, 11, 2, 18, 16, 90, DateTimeKind.Local), IsDeleted = false, Text = "Est est libero aut veniam et consequatur quia.", UserId = "32185bec-5623-463d-9d32-dff833189c31", WasRead = true },
                        new { Id = 33, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 7, 49, 40, 478, DateTimeKind.Local), IsDeleted = false, Text = "Qui nihil quae sit iste asperiores fugit quis.", UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", WasRead = false },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 6, 0, 35, 61, DateTimeKind.Local), IsDeleted = false, Text = "Ea accusamus voluptate nam perferendis veritatis minus enim aut aut.", UserId = "b76bdc42-3b4a-4f8c-9991-b99831c10236", WasRead = true },
                        new { Id = 35, ChatId = 23, CreatedAt = new DateTime(2018, 9, 11, 9, 55, 2, 905, DateTimeKind.Local), IsDeleted = false, Text = "Provident dicta ullam adipisci est ab.", UserId = "378606ac-b59f-4b1d-94d0-500f2ddaac9f", WasRead = false },
                        new { Id = 36, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 6, 57, 45, 193, DateTimeKind.Local), IsDeleted = false, Text = "In voluptatem veniam doloremque autem labore voluptatem.", UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", WasRead = true },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 3, 42, 35, 888, DateTimeKind.Local), IsDeleted = false, Text = "Qui voluptas est qui doloremque enim eum officiis.", UserId = "a70677ea-748f-4259-8068-598460f07e86", WasRead = false },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 9, 10, 21, 33, 38, 910, DateTimeKind.Local), IsDeleted = false, Text = "Recusandae ut a non cumque quisquam dolor dolore.", UserId = "8abc3436-3ce4-4d66-9985-cf207393656d", WasRead = true },
                        new { Id = 39, ChatId = 30, CreatedAt = new DateTime(2018, 9, 11, 5, 49, 1, 478, DateTimeKind.Local), IsDeleted = false, Text = "Id reiciendis nesciunt.", UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", WasRead = false },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 3, 52, 32, 588, DateTimeKind.Local), IsDeleted = false, Text = "Pariatur ex quia mollitia fuga.", UserId = "0840ac69-7999-487c-a61c-99073e9b99e0", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 4, 7, 32, 886, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Ut suscipit itaque neque voluptatibus vitae eius tempore officia.", UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 10, 14, 24, 49, 700, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Cupiditate quaerat dolorum nihil neque eum quia.", UserId = "a70677ea-748f-4259-8068-598460f07e86", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 11, 0, 7, 13, 676, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Cum magni corporis corporis.", UserId = "a70677ea-748f-4259-8068-598460f07e86", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 11, 1, 37, 30, 273, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Quis corporis nostrum impedit ullam dolore eum aut ut.", UserId = "0840ac69-7999-487c-a61c-99073e9b99e0", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 10, 15, 13, 12, 759, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Magnam et facere.", UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 10, 18, 44, 55, 503, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Mollitia quis et accusantium facere dolor atque at.", UserId = "8abc3436-3ce4-4d66-9985-cf207393656d", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 11, 1, 24, 23, 662, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Laborum commodi qui ad incidunt unde quia dolor sit.", UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 11, 8, 30, 54, 928, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Dolores aut nihil rerum omnis vel ea ut quasi.", UserId = "0840ac69-7999-487c-a61c-99073e9b99e0", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 11, 3, 7, 0, 657, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "A sint omnis reiciendis odit.", UserId = "32185bec-5623-463d-9d32-dff833189c31", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 11, 1, 16, 13, 265, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Nobis cupiditate ut occaecati vel eum aut quis explicabo.", UserId = "378606ac-b59f-4b1d-94d0-500f2ddaac9f", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "8da92424-ba3f-4126-bb43-2810fc99abef" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "32185bec-5623-463d-9d32-dff833189c31" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "32185bec-5623-463d-9d32-dff833189c31" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "0840ac69-7999-487c-a61c-99073e9b99e0" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "8da92424-ba3f-4126-bb43-2810fc99abef" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "0840ac69-7999-487c-a61c-99073e9b99e0" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "53f8c5f0-26a6-4746-b58e-df09b0f95f5f" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "b76bdc42-3b4a-4f8c-9991-b99831c10236" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-713-785-1075", CreatedByUserId = "0840ac69-7999-487c-a61c-99073e9b99e0", Description = "Molestias nihil alias omnis tempora rem. Tempore maxime debitis dolor dolores in blanditiis ab. Ipsum cumque sit sunt est qui enim.", Email = "Orlo_Murray89@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company409", ThemeId = 65, WebSite = "https://celestino.com" },
                        new { Id = 72, ContactNumber = "864-254-3846", CreatedByUserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", Description = "Deleniti expedita et dicta ex. Est omnis voluptatem alias laboriosam libero quod voluptatem. Alias qui nemo ut magnam amet voluptas cumque.", Email = "Valentina87@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company558", ThemeId = 61, WebSite = "https://ericka.biz" },
                        new { Id = 73, ContactNumber = "(859) 364-0869", CreatedByUserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", Description = "Quod quis incidunt voluptatem est. Quia quidem a est ab et inventore. Nihil eligendi praesentium provident officiis consequatur.", Email = "Fiona_Koch@gmail.com", IsActive = true, IsDeleted = false, Name = "Company739", ThemeId = 65, WebSite = "https://gabe.com" },
                        new { Id = 74, ContactNumber = "523-902-1330", CreatedByUserId = "8abc3436-3ce4-4d66-9985-cf207393656d", Description = "", Email = "Trycia_Moore86@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company175", ThemeId = 70, WebSite = "http://alvera.com" },
                        new { Id = 75, ContactNumber = "(484) 880-3058 x94404", CreatedByUserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", Description = "Qui aspernatur consequuntur eius. Ipsa dignissimos fuga quam corrupti nemo molestiae cumque ut ipsum.", Email = "Garry33@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company168", ThemeId = 64, WebSite = "http://elvera.biz" },
                        new { Id = 76, ContactNumber = "737.951.5206", CreatedByUserId = "0840ac69-7999-487c-a61c-99073e9b99e0", Description = "Qui vero et id consequatur beatae debitis officiis. Expedita sunt aperiam voluptatem adipisci praesentium amet at reprehenderit.", Email = "Michaela73@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company32", ThemeId = 66, WebSite = "http://ephraim.com" },
                        new { Id = 77, ContactNumber = "1-759-681-6704 x1398", CreatedByUserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", Description = "Nisi cumque sit ea soluta sunt sint.", Email = "Juanita.Daugherty@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company982", ThemeId = 62, WebSite = "https://jace.org" },
                        new { Id = 78, ContactNumber = "(650) 426-9178 x078", CreatedByUserId = "0840ac69-7999-487c-a61c-99073e9b99e0", Description = "", Email = "Greta.Pollich@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company859", ThemeId = 69, WebSite = "https://tristian.info" },
                        new { Id = 79, ContactNumber = "250.848.9012", CreatedByUserId = "0840ac69-7999-487c-a61c-99073e9b99e0", Description = "", Email = "Cecilia_Nikolaus99@gmail.com", IsActive = true, IsDeleted = false, Name = "Company123", ThemeId = 66, WebSite = "http://corbin.biz" },
                        new { Id = 80, ContactNumber = "(988) 355-8036", CreatedByUserId = "0840ac69-7999-487c-a61c-99073e9b99e0", Description = "", Email = "Rocky.Dickinson@gmail.com", IsActive = true, IsDeleted = false, Name = "Company802", ThemeId = 64, WebSite = "https://jessyca.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 10, 21, 58, 55, 656, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Exercitationem quaerat labore ad ipsa enim distinctio.", UserId = "53f8c5f0-26a6-4746-b58e-df09b0f95f5f" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 10, 17, 4, 34, 712, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Nam beatae qui similique quo ut sunt quia quam nihil.", UserId = "0840ac69-7999-487c-a61c-99073e9b99e0" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 12, 36, 20, 470, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Molestiae nemo placeat et porro officia suscipit.", UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 10, 15, 20, 23, 462, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Et porro iusto.", UserId = "0840ac69-7999-487c-a61c-99073e9b99e0" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 3, 10, 45, 336, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Reiciendis et similique quibusdam excepturi adipisci ab vero vitae qui.", UserId = "8abc3436-3ce4-4d66-9985-cf207393656d" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 10, 15, 34, 46, 777, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Voluptatibus tempore sed alias.", UserId = "8abc3436-3ce4-4d66-9985-cf207393656d" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 4, 31, 10, 739, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Rerum et recusandae omnis corrupti ea harum eos sed.", UserId = "8da92424-ba3f-4126-bb43-2810fc99abef" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 10, 18, 25, 15, 870, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Id aperiam consequuntur.", UserId = "b76bdc42-3b4a-4f8c-9991-b99831c10236" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 10, 15, 25, 5, 153, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Quas sint est labore qui et qui quae ipsam.", UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 10, 22, 0, 46, 47, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Dolores perferendis itaque et sapiente nihil.", UserId = "53f8c5f0-26a6-4746-b58e-df09b0f95f5f" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme620" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme65" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme210" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme335" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme821" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme821" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme383" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme263" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme635" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme34" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "0840ac69-7999-487c-a61c-99073e9b99e0", CreatedAt = new DateTime(2018, 9, 10, 22, 43, 28, 56, DateTimeKind.Local), DisplayName = "Domenic", Email = "Cristian_Emmerich80@yahoo.com", FirstName = "Cora", IsActive = true, IsDeleted = false, LastName = "Quitzon", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg", RoleId = 1 },
                        new { Id = "fba67b9e-b7b0-415f-b131-ac022c311ddd", CreatedAt = new DateTime(2018, 9, 10, 13, 50, 14, 287, DateTimeKind.Local), DisplayName = "Dillon", Email = "Destin.Mante10@hotmail.com", FirstName = "Tanner", IsActive = true, IsDeleted = false, LastName = "Pacocha", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg", RoleId = 2 },
                        new { Id = "53f8c5f0-26a6-4746-b58e-df09b0f95f5f", CreatedAt = new DateTime(2018, 9, 11, 10, 20, 57, 634, DateTimeKind.Local), DisplayName = "Trent", Email = "Johnathon.Morissette4@hotmail.com", FirstName = "Joesph", IsActive = true, IsDeleted = false, LastName = "O'Kon", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg", RoleId = 1 },
                        new { Id = "32185bec-5623-463d-9d32-dff833189c31", CreatedAt = new DateTime(2018, 9, 11, 6, 30, 16, 204, DateTimeKind.Local), DisplayName = "Jarrod", Email = "Eduardo.Lubowitz@hotmail.com", FirstName = "Elfrieda", IsActive = true, IsDeleted = false, LastName = "Stroman", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg", RoleId = 1 },
                        new { Id = "378606ac-b59f-4b1d-94d0-500f2ddaac9f", CreatedAt = new DateTime(2018, 9, 11, 5, 21, 47, 78, DateTimeKind.Local), DisplayName = "Adolf", Email = "Joan_Hoeger92@gmail.com", FirstName = "Nicholas", IsActive = true, IsDeleted = false, LastName = "Wyman", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg", RoleId = 1 },
                        new { Id = "b76bdc42-3b4a-4f8c-9991-b99831c10236", CreatedAt = new DateTime(2018, 9, 11, 0, 22, 16, 205, DateTimeKind.Local), DisplayName = "Scot", Email = "Christop27@yahoo.com", FirstName = "Kaylee", IsActive = true, IsDeleted = false, LastName = "Goyette", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg", RoleId = 2 },
                        new { Id = "8da92424-ba3f-4126-bb43-2810fc99abef", CreatedAt = new DateTime(2018, 9, 11, 5, 57, 48, 61, DateTimeKind.Local), DisplayName = "August", Email = "Sarina_Lynch18@gmail.com", FirstName = "Kane", IsActive = true, IsDeleted = false, LastName = "Howell", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg", RoleId = 1 },
                        new { Id = "6d11d143-9820-43e6-b3cc-745bfdd18061", CreatedAt = new DateTime(2018, 9, 10, 14, 23, 46, 159, DateTimeKind.Local), DisplayName = "Jerod", Email = "Velda20@yahoo.com", FirstName = "Reagan", IsActive = true, IsDeleted = false, LastName = "Kuphal", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg", RoleId = 2 },
                        new { Id = "a70677ea-748f-4259-8068-598460f07e86", CreatedAt = new DateTime(2018, 9, 11, 8, 27, 6, 451, DateTimeKind.Local), DisplayName = "Harmony", Email = "Eugenia.Waelchi@gmail.com", FirstName = "Thalia", IsActive = true, IsDeleted = false, LastName = "Paucek", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg", RoleId = 1 },
                        new { Id = "8abc3436-3ce4-4d66-9985-cf207393656d", CreatedAt = new DateTime(2018, 9, 10, 16, 16, 0, 577, DateTimeKind.Local), DisplayName = "Halle", Email = "Xavier98@yahoo.com", FirstName = "Janick", IsActive = true, IsDeleted = false, LastName = "Renner", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "0840ac69-7999-487c-a61c-99073e9b99e0", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "fba67b9e-b7b0-415f-b131-ac022c311ddd", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "53f8c5f0-26a6-4746-b58e-df09b0f95f5f", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "32185bec-5623-463d-9d32-dff833189c31", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "378606ac-b59f-4b1d-94d0-500f2ddaac9f", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "b76bdc42-3b4a-4f8c-9991-b99831c10236", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "8da92424-ba3f-4126-bb43-2810fc99abef", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "6d11d143-9820-43e6-b3cc-745bfdd18061", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "a70677ea-748f-4259-8068-598460f07e86", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "8abc3436-3ce4-4d66-9985-cf207393656d", OrganizationId = 72, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
