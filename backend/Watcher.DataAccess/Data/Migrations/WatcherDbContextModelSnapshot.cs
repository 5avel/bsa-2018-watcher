// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 39, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 87, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 80, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 88, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 87, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 85, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 84, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 25, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 82, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 93, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 14, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 83, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 30, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 4, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 22, CreatedById = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f", IsDeleted = false, Name = "quibusdam", Type = 0 },
                        new { Id = 23, CreatedById = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", IsDeleted = false, Name = "a", Type = 0 },
                        new { Id = 24, CreatedById = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", IsDeleted = false, Name = "numquam", Type = 0 },
                        new { Id = 25, CreatedById = "cc463ef1-3498-4b49-8450-aaaafcd1dcb8", IsDeleted = false, Name = "inventore", Type = 0 },
                        new { Id = 26, CreatedById = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", IsDeleted = false, Name = "saepe", Type = 0 },
                        new { Id = 27, CreatedById = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", IsDeleted = false, Name = "velit", Type = 0 },
                        new { Id = 28, CreatedById = "2ee32823-b021-4550-8e5f-b088c23fd874", IsDeleted = false, Name = "ut", Type = 0 },
                        new { Id = 29, CreatedById = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", IsDeleted = false, Name = "aliquid", Type = 0 },
                        new { Id = 30, CreatedById = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", IsDeleted = false, Name = "et", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.CollectorAppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DebLink");

                    b.Property<string>("ExeLink");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TgzLink");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("CollectorAppVersions");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 12, 16, 20, 27, 49, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title517" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 12, 19, 36, 34, 79, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title481" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 12, 8, 48, 0, 485, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title251" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 12, 13, 55, 11, 390, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title66" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 12, 5, 55, 43, 464, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title622" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 12, 12, 27, 30, 782, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title588" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 12, 9, 20, 19, 432, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title183" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 12, 13, 54, 33, 558, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title296" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 11, 23, 56, 34, 871, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title934" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 12, 0, 19, 28, 646, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title823" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 19, 51, 53, 758, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui explicabo laboriosam.", UserId = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 22, 27, 39, 578, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolorum hic atque officiis.", UserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 12, 16, 25, 31, 347, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatibus fuga sit et eum enim ipsum.", UserId = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 12, 3, 51, 2, 365, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Possimus aspernatur qui reiciendis dolorem.", UserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 12, 13, 12, 31, 161, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptas ducimus corporis voluptates.", UserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 12, 6, 30, 38, 260, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut harum facilis ullam facere.", UserId = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 12, 5, 41, 42, 699, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Laudantium in quaerat accusantium.", UserId = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 12, 17, 4, 23, 530, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Provident sapiente alias quo qui necessitatibus.", UserId = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 12, 17, 52, 48, 900, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Exercitationem sint placeat fugit culpa nemo.", UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 23, 44, 36, 491, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatem aperiam rerum non fugiat.", UserId = "e7ca053c-4bec-4203-9aa0-997b882c951a", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "93:04:c2:97:dd:22", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance595" },
                        new { Id = 72, Address = "d5:d7:a4:87:f7:68", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance726" },
                        new { Id = 73, Address = "ed:47:ea:9f:57:79", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance534" },
                        new { Id = 74, Address = "5b:4e:aa:ef:b2:36", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance998" },
                        new { Id = 75, Address = "8d:9c:f1:0c:a9:b7", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance743" },
                        new { Id = 76, Address = "7d:c1:0f:ad:61:4c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance754" },
                        new { Id = 77, Address = "98:1f:60:6c:e6:86", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance248" },
                        new { Id = 78, Address = "48:3c:97:9c:5d:50", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance829" },
                        new { Id = 79, Address = "48:06:63:c9:d0:9a", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance959" },
                        new { Id = 80, Address = "1c:fc:8e:5a:53:6d", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance555" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 30, CreatedAt = new DateTime(2018, 9, 12, 5, 39, 2, 576, DateTimeKind.Local), IsDeleted = false, Text = "Itaque quo dolores cupiditate.", UserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", WasRead = true },
                        new { Id = 32, ChatId = 24, CreatedAt = new DateTime(2018, 9, 12, 1, 31, 57, 152, DateTimeKind.Local), IsDeleted = false, Text = "Nam praesentium rerum autem fugit incidunt quidem.", UserId = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7", WasRead = true },
                        new { Id = 33, ChatId = 29, CreatedAt = new DateTime(2018, 9, 12, 12, 46, 37, 858, DateTimeKind.Local), IsDeleted = false, Text = "Dolorem ducimus temporibus omnis sunt repudiandae accusantium voluptate dolores.", UserId = "2ee32823-b021-4550-8e5f-b088c23fd874", WasRead = true },
                        new { Id = 34, ChatId = 30, CreatedAt = new DateTime(2018, 9, 12, 14, 17, 55, 412, DateTimeKind.Local), IsDeleted = false, Text = "Culpa nam qui dolorum.", UserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97", WasRead = false },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 9, 12, 16, 21, 25, 909, DateTimeKind.Local), IsDeleted = false, Text = "Et vitae aperiam et consequatur sed ullam.", UserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97", WasRead = false },
                        new { Id = 36, ChatId = 25, CreatedAt = new DateTime(2018, 9, 12, 19, 25, 32, 705, DateTimeKind.Local), IsDeleted = false, Text = "Ut nisi ut omnis libero ut est quasi aliquid.", UserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", WasRead = true },
                        new { Id = 37, ChatId = 26, CreatedAt = new DateTime(2018, 9, 12, 8, 19, 40, 625, DateTimeKind.Local), IsDeleted = false, Text = "Aut incidunt magni iusto iure qui cum molestiae.", UserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", WasRead = true },
                        new { Id = 38, ChatId = 25, CreatedAt = new DateTime(2018, 9, 12, 10, 3, 30, 182, DateTimeKind.Local), IsDeleted = false, Text = "Sed adipisci rem.", UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f", WasRead = true },
                        new { Id = 39, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 9, 30, 32, 36, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatem pariatur vero voluptatem magnam.", UserId = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a", WasRead = true },
                        new { Id = 40, ChatId = 28, CreatedAt = new DateTime(2018, 9, 12, 17, 58, 11, 879, DateTimeKind.Local), IsDeleted = false, Text = "Natus aut ea.", UserId = "e7ca053c-4bec-4203-9aa0-997b882c951a", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 11, 21, 43, 26, 305, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Maiores assumenda corrupti maxime asperiores cupiditate labore et.", UserId = "2ee32823-b021-4550-8e5f-b088c23fd874", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 12, 7, 37, 22, 18, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Voluptatum explicabo aperiam tempora doloribus excepturi et ullam.", UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 11, 19, 48, 44, 338, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Qui earum sed ut sint vero.", UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 12, 14, 7, 45, 344, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Ut officia qui dolorem recusandae facilis eos iste.", UserId = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 12, 3, 8, 25, 527, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Eum magni ipsam quas inventore ut at quia neque.", UserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 11, 22, 38, 16, 254, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Ab doloribus saepe excepturi illo.", UserId = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 12, 2, 52, 43, 362, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Eum ducimus vitae neque in maiores nesciunt earum quasi.", UserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 12, 0, 21, 34, 540, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Ea aperiam esse.", UserId = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 12, 18, 31, 58, 418, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Et culpa ipsum aut voluptatum rerum et dolore.", UserId = "cc463ef1-3498-4b49-8450-aaaafcd1dcb8", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 12, 14, 16, 18, 563, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Hic sit ullam accusamus quam saepe assumenda accusamus ab.", UserId = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "cc463ef1-3498-4b49-8450-aaaafcd1dcb8" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 0, UserId = "2ee32823-b021-4550-8e5f-b088c23fd874" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "e7ca053c-4bec-4203-9aa0-997b882c951a" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "904-366-5161", CreatedByUserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", Description = "Labore ducimus sint ut. Repudiandae eos qui. Illum fugit et et similique eum reprehenderit molestias praesentium labore. Dolore et voluptas enim omnis modi pariatur.", Email = "King24@gmail.com", IsActive = true, IsDeleted = false, Name = "Company418", ThemeId = 1, WebSite = "https://tiffany.org" },
                        new { Id = 62, ContactNumber = "300.425.0816 x1838", CreatedByUserId = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a", Description = "Est autem et et beatae eligendi qui. Assumenda ex eos sunt optio facere dolorem ut in et. Tempora placeat incidunt.", Email = "Irving.Runte63@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company579", ThemeId = 2, WebSite = "https://dangelo.org" },
                        new { Id = 63, ContactNumber = "977.548.1294 x41479", CreatedByUserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", Description = "Qui excepturi vero esse occaecati dolores voluptatem. Voluptas quam minima nemo nostrum voluptatem enim quia omnis.", Email = "Wilfred.Parker@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company802", ThemeId = 2, WebSite = "https://destini.name" },
                        new { Id = 64, ContactNumber = "740-976-5325", CreatedByUserId = "e7ca053c-4bec-4203-9aa0-997b882c951a", Description = "Blanditiis nulla sapiente et sequi neque delectus soluta. Consequuntur accusamus corrupti incidunt nesciunt incidunt praesentium dolorem aut. Assumenda ad numquam provident laboriosam consequatur non error molestias amet. Occaecati aut incidunt officiis saepe omnis asperiores.", Email = "Felix.Mueller25@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company622", ThemeId = 1, WebSite = "http://arvid.info" },
                        new { Id = 65, ContactNumber = "1-350-542-3689", CreatedByUserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", Description = "Quos enim est possimus aliquam ea. Blanditiis laudantium odio repellendus est. Rem at repudiandae labore vel reprehenderit ut quasi.", Email = "Francesca99@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company162", ThemeId = 1, WebSite = "https://lance.info" },
                        new { Id = 66, ContactNumber = "(403) 274-3967 x6849", CreatedByUserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", Description = "Eum consequatur omnis et iure quam.", Email = "Hilma.OHara@gmail.com", IsActive = true, IsDeleted = false, Name = "Company109", ThemeId = 1, WebSite = "https://cara.name" },
                        new { Id = 67, ContactNumber = "880.996.0464", CreatedByUserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", Description = "Praesentium voluptatem et maiores eveniet animi non minima. Sit excepturi fugit fuga non porro asperiores iste tempora asperiores. Praesentium vel fuga dolores atque itaque dolorum.", Email = "Leopold53@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company229", ThemeId = 1, WebSite = "https://coty.org" },
                        new { Id = 68, ContactNumber = "425-737-4490", CreatedByUserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97", Description = "Quos consequuntur ut facilis rerum sunt. Sapiente reiciendis rerum voluptatibus eveniet aut et. Sed inventore consequatur quasi ducimus deserunt sapiente. Possimus omnis eaque odit cumque.", Email = "Joaquin.Johnston@gmail.com", IsActive = true, IsDeleted = false, Name = "Company996", ThemeId = 1, WebSite = "https://benny.name" },
                        new { Id = 69, ContactNumber = "737-237-8123 x5047", CreatedByUserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", Description = "Deleniti sunt animi laudantium et voluptatum possimus necessitatibus dolor. A reiciendis incidunt sit incidunt distinctio quisquam nulla et.", Email = "Theodora.Lebsack@gmail.com", IsActive = true, IsDeleted = false, Name = "Company54", ThemeId = 2, WebSite = "https://megane.info" },
                        new { Id = 70, ContactNumber = "1-977-618-8124", CreatedByUserId = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", Description = "Quod repudiandae rerum tempora fugit ut nemo. Et et quo ducimus ut voluptatem et. Incidunt rerum in est inventore. Maiores libero enim dolores iste fugiat eaque quisquam dolorum.", Email = "Dahlia87@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company31", ThemeId = 1, WebSite = "http://celia.net" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 12, 9, 1, 53, 507, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Accusamus non ea voluptates et reprehenderit.", UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 12, 10, 23, 2, 738, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Voluptates molestiae reprehenderit odio et.", UserId = "cc463ef1-3498-4b49-8450-aaaafcd1dcb8" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 12, 7, 31, 30, 614, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Quibusdam ipsum est nesciunt.", UserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 12, 16, 29, 37, 132, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Et autem alias magni ipsum.", UserId = "cc463ef1-3498-4b49-8450-aaaafcd1dcb8" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 12, 12, 15, 25, 547, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Nulla perspiciatis nam quia.", UserId = "e7ca053c-4bec-4203-9aa0-997b882c951a" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 12, 12, 28, 27, 995, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Neque molestiae sapiente aut autem aliquam suscipit dolorem officia voluptates.", UserId = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 12, 9, 36, 22, 523, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Consequatur a magni temporibus sed repudiandae numquam id ullam minima.", UserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 12, 2, 36, 55, 46, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Laboriosam sed quos iure maiores adipisci nisi aut.", UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 20, 50, 54, 814, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Nam corporis qui eius illum et ea.", UserId = "b785f6e0-927e-465f-bd0c-f80fe56e6a37" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 12, 3, 4, 20, 976, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Occaecati dolore placeat placeat nihil et nobis laudantium est porro.", UserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", CreatedAt = new DateTime(2018, 9, 12, 11, 21, 35, 418, DateTimeKind.Local), DisplayName = "Manley", Email = "Virgil_Weissnat@yahoo.com", FirstName = "Ed", IsActive = true, IsDeleted = false, LastName = "Baumbach", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg", RoleId = 2 },
                        new { Id = "cc463ef1-3498-4b49-8450-aaaafcd1dcb8", CreatedAt = new DateTime(2018, 9, 12, 4, 42, 43, 356, DateTimeKind.Local), DisplayName = "Lizzie", Email = "Marques45@gmail.com", FirstName = "Armani", IsActive = true, IsDeleted = false, LastName = "Kilback", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg", RoleId = 1 },
                        new { Id = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a", CreatedAt = new DateTime(2018, 9, 12, 7, 40, 13, 876, DateTimeKind.Local), DisplayName = "Brigitte", Email = "Mercedes82@gmail.com", FirstName = "Domenica", IsActive = true, IsDeleted = false, LastName = "Frami", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg", RoleId = 2 },
                        new { Id = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f", CreatedAt = new DateTime(2018, 9, 12, 10, 24, 3, 739, DateTimeKind.Local), DisplayName = "Kennedi", Email = "Fritz.Batz@yahoo.com", FirstName = "Jules", IsActive = true, IsDeleted = false, LastName = "Gutmann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg", RoleId = 2 },
                        new { Id = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97", CreatedAt = new DateTime(2018, 9, 12, 17, 12, 58, 427, DateTimeKind.Local), DisplayName = "Trystan", Email = "Bryana.Kuhic@hotmail.com", FirstName = "Barney", IsActive = true, IsDeleted = false, LastName = "Morissette", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg", RoleId = 1 },
                        new { Id = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", CreatedAt = new DateTime(2018, 9, 12, 6, 33, 51, 756, DateTimeKind.Local), DisplayName = "Heaven", Email = "Neal_Fay@yahoo.com", FirstName = "Desiree", IsActive = true, IsDeleted = false, LastName = "Ryan", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg", RoleId = 1 },
                        new { Id = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7", CreatedAt = new DateTime(2018, 9, 12, 2, 11, 37, 450, DateTimeKind.Local), DisplayName = "Enola", Email = "Ed7@yahoo.com", FirstName = "Keven", IsActive = true, IsDeleted = false, LastName = "Waelchi", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg", RoleId = 2 },
                        new { Id = "e7ca053c-4bec-4203-9aa0-997b882c951a", CreatedAt = new DateTime(2018, 9, 12, 9, 43, 22, 693, DateTimeKind.Local), DisplayName = "Josianne", Email = "Samanta.Armstrong72@gmail.com", FirstName = "Gerda", IsActive = true, IsDeleted = false, LastName = "Corkery", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg", RoleId = 1 },
                        new { Id = "2ee32823-b021-4550-8e5f-b088c23fd874", CreatedAt = new DateTime(2018, 9, 11, 23, 43, 45, 369, DateTimeKind.Local), DisplayName = "Wilma", Email = "Elaina.Conroy82@hotmail.com", FirstName = "Alysson", IsActive = true, IsDeleted = false, LastName = "Schamberger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg", RoleId = 1 },
                        new { Id = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", CreatedAt = new DateTime(2018, 9, 12, 10, 13, 45, 193, DateTimeKind.Local), DisplayName = "Layla", Email = "Cassidy.Swift63@gmail.com", FirstName = "Alan", IsActive = true, IsDeleted = false, LastName = "Lebsack", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "3f7af429-6ed4-40e8-ac34-299fe0d586e5", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "cc463ef1-3498-4b49-8450-aaaafcd1dcb8", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "ec78b0f9-a9cf-41e1-9dd5-95e35adff60a", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "48ee168e-2faf-46e5-aa8c-8f6f7805e83f", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "6063a3ce-cac8-4cfc-a2c0-26b9e8bb6b97", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "b785f6e0-927e-465f-bd0c-f80fe56e6a37", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "aa977dc2-4d2e-49c5-9dd6-f9cd7b0e90a7", OrganizationId = 63, OrganizationRoleId = 1 },
                        new { UserId = "e7ca053c-4bec-4203-9aa0-997b882c951a", OrganizationId = 63, OrganizationRoleId = 1 },
                        new { UserId = "2ee32823-b021-4550-8e5f-b088c23fd874", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "c8cbd2c7-f945-4fe2-9c5f-16a93334e847", OrganizationId = 63, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
