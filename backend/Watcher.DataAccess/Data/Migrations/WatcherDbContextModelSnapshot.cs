// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 100, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 16, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 54, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 90, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 97, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 57, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 56, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 3, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 65, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 81, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 20, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", IsDeleted = false, Name = "voluptate", Type = 0 },
                        new { Id = 22, CreatedById = "b6fd9197-d110-458b-8a57-844ee29ef7a6", IsDeleted = false, Name = "vel", Type = 0 },
                        new { Id = 23, CreatedById = "0c567133-e477-4b69-831c-06f6706801cd", IsDeleted = false, Name = "iusto", Type = 0 },
                        new { Id = 24, CreatedById = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", IsDeleted = false, Name = "nihil", Type = 0 },
                        new { Id = 25, CreatedById = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", IsDeleted = false, Name = "aliquid", Type = 0 },
                        new { Id = 26, CreatedById = "0c567133-e477-4b69-831c-06f6706801cd", IsDeleted = false, Name = "sunt", Type = 0 },
                        new { Id = 27, CreatedById = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", IsDeleted = false, Name = "veniam", Type = 0 },
                        new { Id = 28, CreatedById = "39d976c4-7082-4deb-9f2b-c904814cf9dc", IsDeleted = false, Name = "corporis", Type = 0 },
                        new { Id = 29, CreatedById = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", IsDeleted = false, Name = "debitis", Type = 0 },
                        new { Id = 30, CreatedById = "5cafd127-4454-449f-a0d4-4065dd61ff70", IsDeleted = false, Name = "sint", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 6, 17, 15, 6, 57, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title947" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 7, 2, 30, 57, 491, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title114" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 6, 18, 22, 32, 338, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title933" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 7, 0, 24, 58, 644, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title225" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 6, 12, 41, 35, 549, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title899" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 7, 8, 13, 52, 974, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title578" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 6, 12, 47, 52, 202, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title429" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 7, 0, 51, 55, 335, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title45" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 6, 13, 28, 30, 89, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title360" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 7, 7, 26, 46, 824, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title731" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 7, 2, 52, 49, 217, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et occaecati qui vitae eligendi sed repellat rem quisquam impedit.", UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 7, 5, 49, 29, 392, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Repellendus sequi et nisi.", UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 6, 17, 25, 48, 393, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quod quo molestias asperiores.", UserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 6, 22, 20, 35, 91, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Occaecati consequatur pariatur qui asperiores a sint.", UserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 6, 14, 4, 43, 734, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eos non tenetur doloremque eum omnis est minima enim tempora.", UserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 7, 8, 39, 48, 251, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Est officia et reprehenderit velit quasi aut voluptatem commodi.", UserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 7, 4, 2, 23, 23, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nam officiis aliquam voluptas laboriosam et.", UserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 6, 23, 56, 7, 108, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quia enim vel amet repudiandae inventore qui porro.", UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 7, 7, 50, 42, 924, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Odio hic sed et error similique voluptatem dignissimos.", UserId = "5cafd127-4454-449f-a0d4-4065dd61ff70", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 6, 20, 39, 52, 630, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Pariatur molestiae omnis neque et et hic non animi.", UserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "2a:a8:fa:5f:ca:50", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", Title = "Instance115" },
                        new { Id = 82, Address = "f8:8d:ba:da:08:0c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance829" },
                        new { Id = 83, Address = "d1:27:65:c0:8f:42", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance2" },
                        new { Id = 84, Address = "ea:65:35:d3:fa:f0", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", Title = "Instance663" },
                        new { Id = 85, Address = "45:e0:52:8f:4c:a6", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", Title = "Instance23" },
                        new { Id = 86, Address = "20:90:03:4c:2b:03", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance432" },
                        new { Id = 87, Address = "70:16:29:60:72:92", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance811" },
                        new { Id = 88, Address = "6f:31:e5:56:8b:f1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance875" },
                        new { Id = 89, Address = "3f:86:55:94:53:59", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Linux", Title = "Instance455" },
                        new { Id = 90, Address = "ad:63:6f:7d:39:2f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", Title = "Instance658" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 29, CreatedAt = new DateTime(2018, 9, 6, 17, 38, 19, 636, DateTimeKind.Local), IsDeleted = false, Text = "Ipsam voluptatem dolores aut quo.", UserId = "5cafd127-4454-449f-a0d4-4065dd61ff70", WasRead = false },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 9, 6, 18, 5, 43, 856, DateTimeKind.Local), IsDeleted = false, Text = "Est deserunt accusamus et facilis libero aut sunt.", UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", WasRead = false },
                        new { Id = 33, ChatId = 25, CreatedAt = new DateTime(2018, 9, 7, 8, 25, 44, 192, DateTimeKind.Local), IsDeleted = false, Text = "Autem molestiae minima accusantium eos et dolorum ratione sed alias.", UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", WasRead = true },
                        new { Id = 34, ChatId = 24, CreatedAt = new DateTime(2018, 9, 6, 14, 16, 43, 645, DateTimeKind.Local), IsDeleted = false, Text = "Quisquam hic repellat repellendus molestias.", UserId = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", WasRead = true },
                        new { Id = 35, ChatId = 21, CreatedAt = new DateTime(2018, 9, 7, 9, 21, 10, 804, DateTimeKind.Local), IsDeleted = false, Text = "Distinctio quasi accusamus officia exercitationem dolor.", UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6", WasRead = false },
                        new { Id = 36, ChatId = 23, CreatedAt = new DateTime(2018, 9, 6, 11, 12, 28, 707, DateTimeKind.Local), IsDeleted = false, Text = "Iusto delectus nulla doloremque tempora omnis est officia.", UserId = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", WasRead = false },
                        new { Id = 37, ChatId = 23, CreatedAt = new DateTime(2018, 9, 6, 20, 19, 2, 899, DateTimeKind.Local), IsDeleted = false, Text = "Consequatur tempore est facere facere error rerum vitae.", UserId = "39d976c4-7082-4deb-9f2b-c904814cf9dc", WasRead = false },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 9, 7, 6, 57, 23, 438, DateTimeKind.Local), IsDeleted = false, Text = "Natus qui qui et eaque suscipit et deserunt quis.", UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", WasRead = false },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 9, 7, 9, 59, 38, 485, DateTimeKind.Local), IsDeleted = false, Text = "Labore omnis error qui esse facilis magni eius dolorum.", UserId = "3657f143-b028-4603-b633-0ad81dddd6ca", WasRead = true },
                        new { Id = 40, ChatId = 28, CreatedAt = new DateTime(2018, 9, 6, 15, 44, 24, 453, DateTimeKind.Local), IsDeleted = false, Text = "Animi sunt quis rerum ut voluptatum.", UserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 7, 7, 14, 28, 43, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Velit est quaerat corrupti beatae suscipit numquam quam.", UserId = "39d976c4-7082-4deb-9f2b-c904814cf9dc", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 6, 22, 48, 55, 235, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Omnis culpa et illo ducimus cum.", UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 6, 16, 34, 24, 52, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Est et odio.", UserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 7, 2, 58, 15, 604, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Omnis laudantium ut.", UserId = "0c567133-e477-4b69-831c-06f6706801cd", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 6, 22, 39, 4, 791, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Saepe autem cum enim odio repellat ut.", UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 7, 7, 38, 58, 179, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Nulla reiciendis voluptatem aliquid magnam animi quod.", UserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 7, 2, 0, 11, 326, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Ab quia nesciunt quaerat.", UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 7, 6, 14, 21, 63, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Neque similique quod cum nesciunt architecto repellat.", UserId = "5cafd127-4454-449f-a0d4-4065dd61ff70", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 7, 5, 29, 29, 445, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Aut eligendi autem eos sit voluptatibus voluptates voluptate.", UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 7, 5, 58, 18, 829, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Soluta qui cumque voluptas ex voluptatem dolor rerum delectus.", UserId = "5cafd127-4454-449f-a0d4-4065dd61ff70", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 3, UserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "0c567133-e477-4b69-831c-06f6706801cd" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "3657f143-b028-4603-b633-0ad81dddd6ca" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "3657f143-b028-4603-b633-0ad81dddd6ca" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "3657f143-b028-4603-b633-0ad81dddd6ca" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "5cafd127-4454-449f-a0d4-4065dd61ff70" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "466.748.2471", CreatedByUserId = "3657f143-b028-4603-b633-0ad81dddd6ca", Description = "", Email = "Jaycee26@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company144", ThemeId = 62, WebSite = "http://alexandria.biz" },
                        new { Id = 72, ContactNumber = "1-590-534-8112", CreatedByUserId = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", Description = "Dolor voluptatem qui tempora. Dolorem ab ducimus magni architecto.", Email = "Fritz.Gulgowski@gmail.com", IsActive = true, IsDeleted = false, Name = "Company229", ThemeId = 63, WebSite = "http://haskell.info" },
                        new { Id = 73, ContactNumber = "921-832-8486", CreatedByUserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", Description = "Aliquid sunt ex.", Email = "Adrien18@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company437", ThemeId = 64, WebSite = "https://elizabeth.info" },
                        new { Id = 74, ContactNumber = "288.787.3177 x12655", CreatedByUserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", Description = "", Email = "Flavie_Wilkinson54@gmail.com", IsActive = true, IsDeleted = false, Name = "Company363", ThemeId = 66, WebSite = "https://rogelio.net" },
                        new { Id = 75, ContactNumber = "(641) 848-9435 x8956", CreatedByUserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d", Description = "Ut id ea eos atque rerum repellat qui. Voluptatum modi tempora laudantium fuga earum quod. Ea consequuntur eveniet eligendi.", Email = "Roman.Kovacek@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company444", ThemeId = 62, WebSite = "https://adrienne.biz" },
                        new { Id = 76, ContactNumber = "(460) 226-8050 x5706", CreatedByUserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d", Description = "Illum ipsum sint. Quae omnis laborum culpa qui accusamus sed alias voluptas. Error accusantium velit temporibus laboriosam qui dicta.", Email = "Faye.Ziemann@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company780", ThemeId = 62, WebSite = "https://clotilde.net" },
                        new { Id = 77, ContactNumber = "460.765.5043 x183", CreatedByUserId = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", Description = "", Email = "Lafayette77@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company438", ThemeId = 66, WebSite = "https://manuel.info" },
                        new { Id = 78, ContactNumber = "1-528-862-2833 x183", CreatedByUserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", Description = "", Email = "Oscar_Yost7@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company362", ThemeId = 69, WebSite = "https://hattie.biz" },
                        new { Id = 79, ContactNumber = "663.823.0660 x210", CreatedByUserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", Description = "Modi alias inventore molestias rem reiciendis alias eos. Qui dicta et at voluptas iure debitis perspiciatis asperiores. Facilis veritatis id voluptatibus rerum sint nemo voluptatem.", Email = "Khalil.OHara@gmail.com", IsActive = true, IsDeleted = false, Name = "Company284", ThemeId = 68, WebSite = "http://era.name" },
                        new { Id = 80, ContactNumber = "689.616.1922 x724", CreatedByUserId = "3657f143-b028-4603-b633-0ad81dddd6ca", Description = "", Email = "Percy.Bahringer@gmail.com", IsActive = true, IsDeleted = false, Name = "Company999", ThemeId = 65, WebSite = "http://reba.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 7, 3, 46, 7, 715, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Dignissimos ipsam ab sed.", UserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 7, 1, 15, 45, 356, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Sint optio quis eaque quo tempore.", UserId = "39d976c4-7082-4deb-9f2b-c904814cf9dc" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 6, 23, 43, 28, 618, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Eum repudiandae autem et nihil.", UserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 7, 8, 52, 44, 832, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Iure voluptas sint repellendus.", UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 6, 21, 20, 51, 651, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Unde excepturi commodi aperiam et non in at voluptatem.", UserId = "3657f143-b028-4603-b633-0ad81dddd6ca" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 6, 16, 36, 51, 814, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Ipsa sit sequi nostrum.", UserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 6, 21, 42, 30, 443, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Saepe mollitia error.", UserId = "5cafd127-4454-449f-a0d4-4065dd61ff70" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 7, 0, 47, 33, 557, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Ea repudiandae ullam et maiores repudiandae voluptas aliquam.", UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 6, 22, 47, 23, 124, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Qui culpa enim ut consequuntur exercitationem sint ut qui ea.", UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 6, 20, 46, 32, 113, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Maxime et repudiandae quibusdam dolores.", UserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme448" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme466" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme746" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme34" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme439" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme85" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme410" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme343" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme855" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme647" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", CreatedAt = new DateTime(2018, 9, 6, 11, 13, 52, 452, DateTimeKind.Local), DisplayName = "Willa", Email = "Rubie18@hotmail.com", FirstName = "Lenora", IsActive = true, IsDeleted = false, LastName = "Breitenberg", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg", RoleId = 1 },
                        new { Id = "e7ab8a36-df4b-42c6-901b-43dc534d904d", CreatedAt = new DateTime(2018, 9, 6, 20, 27, 8, 727, DateTimeKind.Local), DisplayName = "Neoma", Email = "Maybell42@hotmail.com", FirstName = "Casimir", IsActive = true, IsDeleted = false, LastName = "Ritchie", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg", RoleId = 2 },
                        new { Id = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", CreatedAt = new DateTime(2018, 9, 6, 13, 9, 58, 343, DateTimeKind.Local), DisplayName = "Dorian", Email = "Adrienne27@hotmail.com", FirstName = "Adah", IsActive = true, IsDeleted = false, LastName = "West", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg", RoleId = 1 },
                        new { Id = "b6fd9197-d110-458b-8a57-844ee29ef7a6", CreatedAt = new DateTime(2018, 9, 7, 3, 8, 25, 671, DateTimeKind.Local), DisplayName = "Fern", Email = "Jan.Will@gmail.com", FirstName = "Rae", IsActive = true, IsDeleted = false, LastName = "Bailey", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg", RoleId = 2 },
                        new { Id = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", CreatedAt = new DateTime(2018, 9, 6, 20, 50, 34, 579, DateTimeKind.Local), DisplayName = "Jamar", Email = "Elisabeth37@gmail.com", FirstName = "Lilliana", IsActive = true, IsDeleted = false, LastName = "Glover", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg", RoleId = 1 },
                        new { Id = "3657f143-b028-4603-b633-0ad81dddd6ca", CreatedAt = new DateTime(2018, 9, 6, 20, 56, 48, 196, DateTimeKind.Local), DisplayName = "Alexys", Email = "Wilson.Block60@yahoo.com", FirstName = "Astrid", IsActive = true, IsDeleted = false, LastName = "Bradtke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg", RoleId = 2 },
                        new { Id = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", CreatedAt = new DateTime(2018, 9, 7, 4, 51, 13, 658, DateTimeKind.Local), DisplayName = "Juliet", Email = "Jensen.Feil74@yahoo.com", FirstName = "Toney", IsActive = true, IsDeleted = false, LastName = "Reilly", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg", RoleId = 1 },
                        new { Id = "39d976c4-7082-4deb-9f2b-c904814cf9dc", CreatedAt = new DateTime(2018, 9, 6, 21, 6, 15, 175, DateTimeKind.Local), DisplayName = "Sonny", Email = "Katlynn.Goldner@gmail.com", FirstName = "Abdul", IsActive = true, IsDeleted = false, LastName = "Jakubowski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg", RoleId = 2 },
                        new { Id = "5cafd127-4454-449f-a0d4-4065dd61ff70", CreatedAt = new DateTime(2018, 9, 6, 22, 51, 15, 172, DateTimeKind.Local), DisplayName = "Adrain", Email = "Guido_Hackett76@hotmail.com", FirstName = "Deondre", IsActive = true, IsDeleted = false, LastName = "Feeney", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg", RoleId = 2 },
                        new { Id = "0c567133-e477-4b69-831c-06f6706801cd", CreatedAt = new DateTime(2018, 9, 6, 14, 0, 47, 912, DateTimeKind.Local), DisplayName = "Aleen", Email = "Brielle.Swift@yahoo.com", FirstName = "Gloria", IsActive = true, IsDeleted = false, LastName = "Rutherford", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "3ccc5f60-674b-4bdd-a9b3-326cfc1adb35", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "e7ab8a36-df4b-42c6-901b-43dc534d904d", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "4ff23f2c-126c-48cb-b3c5-ee749ec59d02", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "b6fd9197-d110-458b-8a57-844ee29ef7a6", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "bc97af4f-4b92-4a1a-bc0d-526f98ffbce2", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "3657f143-b028-4603-b633-0ad81dddd6ca", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "6f77a776-9d9d-4ea8-b0c0-c75eb5976fd5", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "39d976c4-7082-4deb-9f2b-c904814cf9dc", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "5cafd127-4454-449f-a0d4-4065dd61ff70", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "0c567133-e477-4b69-831c-06f6706801cd", OrganizationId = 75, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
