// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 78, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 83, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 4, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 30, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 33, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 83, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 67, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 24, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 11, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 69, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 87, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 19, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "65d73488-1b38-456d-8fff-737be639e584", IsDeleted = false, Name = "distinctio", Type = 0 },
                        new { Id = 22, CreatedById = "f2818533-e97e-4bae-be99-8be3d29ff037", IsDeleted = false, Name = "molestiae", Type = 0 },
                        new { Id = 23, CreatedById = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 24, CreatedById = "f2818533-e97e-4bae-be99-8be3d29ff037", IsDeleted = false, Name = "non", Type = 0 },
                        new { Id = 25, CreatedById = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", IsDeleted = false, Name = "occaecati", Type = 0 },
                        new { Id = 26, CreatedById = "e697fc03-e37a-48e7-84c0-d3087cd1c915", IsDeleted = false, Name = "ad", Type = 0 },
                        new { Id = 27, CreatedById = "f2818533-e97e-4bae-be99-8be3d29ff037", IsDeleted = false, Name = "sunt", Type = 0 },
                        new { Id = 28, CreatedById = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", IsDeleted = false, Name = "sed", Type = 0 },
                        new { Id = 29, CreatedById = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", IsDeleted = false, Name = "repellat", Type = 0 },
                        new { Id = 30, CreatedById = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", IsDeleted = false, Name = "in", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.CollectorAppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DebLink");

                    b.Property<string>("ExeLink");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TgzLink");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("CollectorAppVersions");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 13, 2, 51, 20, 342, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title400" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 13, 1, 54, 9, 261, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title639" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 13, 7, 44, 43, 558, DateTimeKind.Local), InstanceId = 75, IsDeleted = false, Title = "Title892" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 13, 12, 39, 49, 469, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title868" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 13, 14, 16, 21, 782, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title925" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 13, 8, 41, 55, 580, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title412" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 12, 23, 58, 59, 90, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title819" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 13, 9, 5, 46, 733, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title347" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 13, 10, 13, 40, 631, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title562" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 13, 11, 22, 56, 703, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title136" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 12, 21, 11, 27, 869, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Non qui enim itaque qui cumque tenetur excepturi.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 13, 13, 51, 27, 41, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur quidem quia.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 13, 6, 7, 20, 25, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Illo voluptate exercitationem optio.", UserId = "cbb4252f-aba5-44d6-8cf3-073ee809daca", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 12, 22, 37, 24, 629, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur voluptate perspiciatis.", UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 12, 23, 34, 46, 608, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Autem iste earum beatae qui consequatur incidunt deserunt.", UserId = "cbb4252f-aba5-44d6-8cf3-073ee809daca", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 12, 23, 28, 8, 854, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui nemo necessitatibus sunt sapiente quis sed quas.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 13, 14, 40, 41, 501, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Non quia consequatur.", UserId = "0673fee2-18bc-4d1f-9a8a-cafda74912e9", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 13, 10, 9, 25, 35, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Non ipsa sequi velit.", UserId = "f2818533-e97e-4bae-be99-8be3d29ff037", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 13, 3, 10, 6, 73, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Corrupti veritatis iste consequatur facere et.", UserId = "0673fee2-18bc-4d1f-9a8a-cafda74912e9", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 12, 17, 38, 25, 186, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Facilis iste dolores ut doloremque quae sed nihil magnam sint.", UserId = "0673fee2-18bc-4d1f-9a8a-cafda74912e9", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "d5:4e:e3:8d:ad:a8", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance399" },
                        new { Id = 72, Address = "88:01:fd:f5:ed:f8", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance58" },
                        new { Id = 73, Address = "28:c6:2c:63:40:e7", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 67, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance431" },
                        new { Id = 74, Address = "b8:6f:00:95:a8:58", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance261" },
                        new { Id = 75, Address = "3a:99:1a:36:ac:df", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance403" },
                        new { Id = 76, Address = "a6:82:5a:d1:6d:0e", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance200" },
                        new { Id = 77, Address = "0c:6f:99:b4:8b:18", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance301" },
                        new { Id = 78, Address = "68:c1:f2:fa:5a:8f", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 67, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance300" },
                        new { Id = 79, Address = "dc:f2:65:30:b4:35", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance714" },
                        new { Id = 80, Address = "37:0f:6e:a1:67:ca", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance156" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 17, 38, 1, 192, DateTimeKind.Local), IsDeleted = false, Text = "Praesentium vero itaque quibusdam quisquam id.", UserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", WasRead = false },
                        new { Id = 32, ChatId = 29, CreatedAt = new DateTime(2018, 9, 13, 5, 50, 15, 946, DateTimeKind.Local), IsDeleted = false, Text = "Nesciunt labore quaerat odit et necessitatibus.", UserId = "09aef456-5b88-4e19-89e6-ae20af967911", WasRead = true },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 9, 13, 13, 48, 6, 762, DateTimeKind.Local), IsDeleted = false, Text = "Ea aperiam est corporis voluptatem qui quia.", UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", WasRead = true },
                        new { Id = 34, ChatId = 28, CreatedAt = new DateTime(2018, 9, 12, 21, 43, 45, 356, DateTimeKind.Local), IsDeleted = false, Text = "Sed sit maiores voluptas iure tempore voluptas numquam velit.", UserId = "65d73488-1b38-456d-8fff-737be639e584", WasRead = true },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 9, 13, 14, 58, 6, 592, DateTimeKind.Local), IsDeleted = false, Text = "Perferendis voluptates odit iusto rerum quo recusandae pariatur blanditiis.", UserId = "0673fee2-18bc-4d1f-9a8a-cafda74912e9", WasRead = false },
                        new { Id = 36, ChatId = 29, CreatedAt = new DateTime(2018, 9, 13, 14, 36, 4, 868, DateTimeKind.Local), IsDeleted = false, Text = "Quo est perspiciatis voluptatem necessitatibus ea.", UserId = "09aef456-5b88-4e19-89e6-ae20af967911", WasRead = true },
                        new { Id = 37, ChatId = 27, CreatedAt = new DateTime(2018, 9, 13, 10, 7, 51, 228, DateTimeKind.Local), IsDeleted = false, Text = "Dolor similique sit velit suscipit et itaque qui quam magni.", UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", WasRead = true },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 9, 13, 7, 40, 8, 109, DateTimeKind.Local), IsDeleted = false, Text = "Ut aliquid natus dicta aliquam ut sit.", UserId = "09aef456-5b88-4e19-89e6-ae20af967911", WasRead = false },
                        new { Id = 39, ChatId = 22, CreatedAt = new DateTime(2018, 9, 13, 12, 46, 6, 158, DateTimeKind.Local), IsDeleted = false, Text = "Saepe ducimus repellendus molestiae explicabo perspiciatis.", UserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", WasRead = false },
                        new { Id = 40, ChatId = 24, CreatedAt = new DateTime(2018, 9, 13, 14, 21, 52, 931, DateTimeKind.Local), IsDeleted = false, Text = "Sed expedita dolores delectus et voluptas fuga qui.", UserId = "09aef456-5b88-4e19-89e6-ae20af967911", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("InstanceGuidId");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 13, 3, 2, 14, 427, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Deleniti quia quasi qui mollitia ut vel aut accusamus a.", UserId = "cbb4252f-aba5-44d6-8cf3-073ee809daca", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 13, 14, 40, 35, 487, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Non quia et ea voluptates vel reiciendis aut ipsum harum.", UserId = "94f74064-0b77-4551-b2f4-c7cfbd48e7b3", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 13, 12, 16, 23, 131, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Optio non est ut hic et.", UserId = "e697fc03-e37a-48e7-84c0-d3087cd1c915", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 12, 20, 11, 16, 592, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Est provident sunt sit et sint beatae ut.", UserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 12, 23, 5, 32, 248, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Earum veniam reprehenderit nostrum voluptatibus vel voluptatem iusto.", UserId = "09aef456-5b88-4e19-89e6-ae20af967911", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 13, 7, 6, 6, 306, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Minima expedita enim corporis quas.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 13, 12, 23, 38, 343, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Et possimus autem quisquam facilis vero magnam iste sed dolor.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 12, 22, 5, 3, 366, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Consequatur officiis distinctio ducimus consequatur.", UserId = "65d73488-1b38-456d-8fff-737be639e584", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 13, 2, 38, 45, 112, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Ab assumenda illo.", UserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 13, 16, 18, 1, 561, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Blanditiis officiis magni quisquam dignissimos cupiditate.", UserId = "09aef456-5b88-4e19-89e6-ae20af967911", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "94f74064-0b77-4551-b2f4-c7cfbd48e7b3" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "94f74064-0b77-4551-b2f4-c7cfbd48e7b3" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "f2818533-e97e-4bae-be99-8be3d29ff037" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "09aef456-5b88-4e19-89e6-ae20af967911" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "cbb4252f-aba5-44d6-8cf3-073ee809daca" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "f2818533-e97e-4bae-be99-8be3d29ff037" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "65d73488-1b38-456d-8fff-737be639e584" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "1-269-754-3661 x11161", CreatedByUserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", Description = "Inventore neque qui. Sit et est voluptas eum. Aut quod temporibus iusto dicta. Ipsum harum et voluptate et eos sequi omnis.", Email = "Gabe.Schmeler58@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company535", ThemeId = 2, WebSite = "http://allen.biz" },
                        new { Id = 62, ContactNumber = "281-770-3987 x0300", CreatedByUserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", Description = "Totam sint consequatur harum cumque minima sunt.", Email = "Clement.Bruen49@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company351", ThemeId = 1, WebSite = "http://shanelle.net" },
                        new { Id = 63, ContactNumber = "640.536.8640", CreatedByUserId = "94f74064-0b77-4551-b2f4-c7cfbd48e7b3", Description = "", Email = "Eliseo.Grimes@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company634", ThemeId = 1, WebSite = "https://karl.name" },
                        new { Id = 64, ContactNumber = "263-784-4409 x94920", CreatedByUserId = "94f74064-0b77-4551-b2f4-c7cfbd48e7b3", Description = "Qui enim ducimus sit non velit enim amet sit quisquam. Fugiat aperiam doloremque nobis laboriosam enim ea.", Email = "Seamus_Davis15@gmail.com", IsActive = true, IsDeleted = false, Name = "Company890", ThemeId = 1, WebSite = "https://paula.com" },
                        new { Id = 65, ContactNumber = "1-917-456-6123 x24786", CreatedByUserId = "e697fc03-e37a-48e7-84c0-d3087cd1c915", Description = "", Email = "Mitchel_Miller@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company211", ThemeId = 1, WebSite = "http://manuel.org" },
                        new { Id = 66, ContactNumber = "(337) 675-8317 x628", CreatedByUserId = "cbb4252f-aba5-44d6-8cf3-073ee809daca", Description = "Dolorem illum debitis. Exercitationem aut est molestias voluptatem illo et magni iusto iste. Et illo quas minus dicta nobis fugit asperiores magni. Adipisci rerum qui.", Email = "Wilton.Dietrich68@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company158", ThemeId = 1, WebSite = "https://krystal.name" },
                        new { Id = 67, ContactNumber = "273-747-3857", CreatedByUserId = "65d73488-1b38-456d-8fff-737be639e584", Description = "", Email = "Neil_Abbott60@gmail.com", IsActive = true, IsDeleted = false, Name = "Company628", ThemeId = 1, WebSite = "http://joy.name" },
                        new { Id = 68, ContactNumber = "1-859-704-2256 x0237", CreatedByUserId = "e697fc03-e37a-48e7-84c0-d3087cd1c915", Description = "Vel et et debitis aut laudantium nihil rerum ipsa explicabo. Velit consectetur itaque a minus corporis ab ut. Consectetur aliquid id magni unde eos aliquam et.", Email = "Sadie58@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company53", ThemeId = 2, WebSite = "http://elyse.info" },
                        new { Id = 69, ContactNumber = "(696) 900-6739", CreatedByUserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", Description = "Architecto impedit laudantium repudiandae.", Email = "Hope_Runolfsson@gmail.com", IsActive = true, IsDeleted = false, Name = "Company414", ThemeId = 1, WebSite = "https://ludie.info" },
                        new { Id = 70, ContactNumber = "(814) 554-7458 x69651", CreatedByUserId = "f2818533-e97e-4bae-be99-8be3d29ff037", Description = "Est nemo quos qui. Ea ipsum quos est. Veniam vitae aut quaerat laudantium neque. Quia debitis aperiam fuga magni ipsa.", Email = "Vicenta_Kub89@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company240", ThemeId = 2, WebSite = "https://cathy.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 13, 5, 51, 35, 385, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Id quasi enim et ipsa distinctio tempore nostrum.", UserId = "65d73488-1b38-456d-8fff-737be639e584" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 13, 13, 25, 43, 959, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Id eveniet minus enim facere eius.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 12, 17, 58, 42, 446, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Qui hic omnis neque rerum molestiae qui.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 13, 4, 47, 59, 137, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Eos voluptas atque.", UserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 13, 4, 45, 47, 625, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Libero tempore consectetur est voluptatibus quae nihil ratione iure fugit.", UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 13, 3, 16, 40, 384, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Distinctio ipsum dolorum commodi corporis debitis omnis maxime.", UserId = "09aef456-5b88-4e19-89e6-ae20af967911" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 13, 7, 47, 28, 444, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Molestiae maxime sunt dolore vel et omnis ut aperiam nostrum.", UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 13, 11, 57, 19, 488, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Id id sed et ducimus praesentium commodi iusto.", UserId = "f2818533-e97e-4bae-be99-8be3d29ff037" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 13, 13, 59, 58, 711, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Vel culpa consequuntur et.", UserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 13, 13, 19, 16, 149, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Dolorum soluta in.", UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "94f74064-0b77-4551-b2f4-c7cfbd48e7b3", CreatedAt = new DateTime(2018, 9, 13, 11, 40, 45, 127, DateTimeKind.Local), DisplayName = "Ellsworth", Email = "Keshaun.Parker61@yahoo.com", FirstName = "London", IsActive = true, IsDeleted = false, LastName = "Smith", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg", RoleId = 1 },
                        new { Id = "f2818533-e97e-4bae-be99-8be3d29ff037", CreatedAt = new DateTime(2018, 9, 13, 2, 52, 28, 733, DateTimeKind.Local), DisplayName = "Valerie", Email = "Maureen_Reinger@hotmail.com", FirstName = "Alexzander", IsActive = true, IsDeleted = false, LastName = "Goyette", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg", RoleId = 1 },
                        new { Id = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", CreatedAt = new DateTime(2018, 9, 13, 12, 43, 2, 866, DateTimeKind.Local), DisplayName = "Kara", Email = "Susan_Hahn@yahoo.com", FirstName = "Teagan", IsActive = true, IsDeleted = false, LastName = "Weimann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg", RoleId = 1 },
                        new { Id = "0673fee2-18bc-4d1f-9a8a-cafda74912e9", CreatedAt = new DateTime(2018, 9, 13, 16, 42, 51, 572, DateTimeKind.Local), DisplayName = "Aletha", Email = "Madge16@yahoo.com", FirstName = "Van", IsActive = true, IsDeleted = false, LastName = "Hane", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg", RoleId = 2 },
                        new { Id = "cbb4252f-aba5-44d6-8cf3-073ee809daca", CreatedAt = new DateTime(2018, 9, 13, 10, 58, 16, 205, DateTimeKind.Local), DisplayName = "Laurence", Email = "Pasquale.Schoen@gmail.com", FirstName = "Kurt", IsActive = true, IsDeleted = false, LastName = "Hagenes", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg", RoleId = 1 },
                        new { Id = "09aef456-5b88-4e19-89e6-ae20af967911", CreatedAt = new DateTime(2018, 9, 13, 11, 56, 54, 658, DateTimeKind.Local), DisplayName = "Leatha", Email = "Aletha.Trantow34@gmail.com", FirstName = "Michale", IsActive = true, IsDeleted = false, LastName = "Howell", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg", RoleId = 2 },
                        new { Id = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", CreatedAt = new DateTime(2018, 9, 13, 12, 55, 11, 92, DateTimeKind.Local), DisplayName = "Paige", Email = "Antonina.Tromp88@gmail.com", FirstName = "Ervin", IsActive = true, IsDeleted = false, LastName = "Muller", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg", RoleId = 1 },
                        new { Id = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", CreatedAt = new DateTime(2018, 9, 12, 19, 10, 24, 943, DateTimeKind.Local), DisplayName = "Shawn", Email = "Nasir17@yahoo.com", FirstName = "Darby", IsActive = true, IsDeleted = false, LastName = "Beer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg", RoleId = 2 },
                        new { Id = "65d73488-1b38-456d-8fff-737be639e584", CreatedAt = new DateTime(2018, 9, 13, 7, 28, 18, 199, DateTimeKind.Local), DisplayName = "Lizzie", Email = "Brown_Hoppe@hotmail.com", FirstName = "Lucienne", IsActive = true, IsDeleted = false, LastName = "Wuckert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg", RoleId = 1 },
                        new { Id = "e697fc03-e37a-48e7-84c0-d3087cd1c915", CreatedAt = new DateTime(2018, 9, 13, 2, 28, 54, 955, DateTimeKind.Local), DisplayName = "Abdul", Email = "Era86@hotmail.com", FirstName = "Dianna", IsActive = true, IsDeleted = false, LastName = "Huels", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "94f74064-0b77-4551-b2f4-c7cfbd48e7b3", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "f2818533-e97e-4bae-be99-8be3d29ff037", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "c69b3332-96a0-47d7-bca7-a4fde7277d7b", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "0673fee2-18bc-4d1f-9a8a-cafda74912e9", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "cbb4252f-aba5-44d6-8cf3-073ee809daca", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "09aef456-5b88-4e19-89e6-ae20af967911", OrganizationId = 63, OrganizationRoleId = 1 },
                        new { UserId = "2ed2cc2b-f1ff-4247-92e5-dd40fd88cd2e", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "397c0e5c-ca8b-4ad3-b25c-2f13b1bf49b9", OrganizationId = 63, OrganizationRoleId = 1 },
                        new { UserId = "65d73488-1b38-456d-8fff-737be639e584", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "e697fc03-e37a-48e7-84c0-d3087cd1c915", OrganizationId = 69, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
