// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180912055450_UpdatedInstanceSettings")]
    partial class UpdatedInstanceSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 84, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 93, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 34, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 45, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 15, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 29, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 100, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 73, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 34, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 4, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 32, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 46, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06", IsDeleted = false, Name = "sit", Type = 0 },
                        new { Id = 22, CreatedById = "87b40838-f225-4a2e-83ae-b0cc477befc8", IsDeleted = false, Name = "praesentium", Type = 0 },
                        new { Id = 23, CreatedById = "caf9d9a0-f7a8-46f5-9ec2-f603e31b2313", IsDeleted = false, Name = "assumenda", Type = 0 },
                        new { Id = 24, CreatedById = "492f4faf-9cda-4499-9eb9-f907fd024500", IsDeleted = false, Name = "quam", Type = 0 },
                        new { Id = 25, CreatedById = "ca578409-796c-4162-9883-a8438fc213ea", IsDeleted = false, Name = "quisquam", Type = 0 },
                        new { Id = 26, CreatedById = "ca578409-796c-4162-9883-a8438fc213ea", IsDeleted = false, Name = "harum", Type = 0 },
                        new { Id = 27, CreatedById = "87b40838-f225-4a2e-83ae-b0cc477befc8", IsDeleted = false, Name = "fugit", Type = 0 },
                        new { Id = 28, CreatedById = "ecc8eb07-9060-4845-b375-08dfa1582f8c", IsDeleted = false, Name = "accusantium", Type = 0 },
                        new { Id = 29, CreatedById = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 30, CreatedById = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", IsDeleted = false, Name = "voluptas", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 11, 9, 12, 57, 738, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title736" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 11, 13, 8, 28, 543, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title239" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 11, 13, 18, 11, 20, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title996" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 11, 23, 47, 45, 628, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title519" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 12, 8, 11, 31, 80, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title595" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 11, 13, 52, 33, 25, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title903" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 11, 23, 52, 23, 497, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title317" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 11, 23, 2, 51, 426, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title962" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 12, 3, 43, 31, 125, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title467" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 12, 4, 1, 39, 568, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title715" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 12, 8, 35, 48, 60, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Autem quod modi qui.", UserId = "ca578409-796c-4162-9883-a8438fc213ea", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 12, 7, 53, 24, 819, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui exercitationem perspiciatis omnis eveniet et officia.", UserId = "ecc8eb07-9060-4845-b375-08dfa1582f8c", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 11, 16, 1, 856, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Magni nihil at non nam velit laudantium minus neque.", UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 10, 27, 10, 274, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "At vitae quia reiciendis.", UserId = "4c5e451e-ff98-4924-822f-222b14d1c2e7", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 12, 4, 9, 59, 722, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Facilis minima ipsum est asperiores optio.", UserId = "87b40838-f225-4a2e-83ae-b0cc477befc8", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 12, 8, 26, 48, 579, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Fugit et tenetur hic.", UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 12, 27, 20, 984, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quasi voluptatem earum quo perspiciatis omnis repellat.", UserId = "492f4faf-9cda-4499-9eb9-f907fd024500", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 12, 0, 37, 42, 354, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Velit odio laudantium ut et dolores.", UserId = "ca578409-796c-4162-9883-a8438fc213ea", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 21, 43, 26, 850, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Provident sapiente reiciendis vero excepturi.", UserId = "ca578409-796c-4162-9883-a8438fc213ea", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 12, 55, 34, 513, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolorum molestias hic explicabo dolor.", UserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "87:72:db:ff:28:f6", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance401" },
                        new { Id = 82, Address = "e3:b6:45:4d:a0:00", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance212" },
                        new { Id = 83, Address = "45:50:5d:bc:d8:31", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance873" },
                        new { Id = 84, Address = "c5:d7:ab:c2:11:eb", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance618" },
                        new { Id = 85, Address = "f1:19:5c:a9:08:49", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance798" },
                        new { Id = 86, Address = "81:fe:ae:f1:b1:37", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance533" },
                        new { Id = 87, Address = "d3:e6:95:a0:92:0b", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance153" },
                        new { Id = 88, Address = "6b:81:3e:dd:83:2c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance231" },
                        new { Id = 89, Address = "71:cb:aa:ad:15:c7", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance703" },
                        new { Id = 90, Address = "d5:75:ba:d5:2e:0b", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance67" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 14, 15, 56, 796, DateTimeKind.Local), IsDeleted = false, Text = "Fugiat nulla reiciendis aut.", UserId = "989ceb44-5bd1-4853-9431-d9361f090c09", WasRead = true },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 9, 12, 5, 31, 8, 175, DateTimeKind.Local), IsDeleted = false, Text = "Commodi accusamus quasi commodi.", UserId = "492f4faf-9cda-4499-9eb9-f907fd024500", WasRead = true },
                        new { Id = 33, ChatId = 21, CreatedAt = new DateTime(2018, 9, 12, 4, 2, 15, 988, DateTimeKind.Local), IsDeleted = false, Text = "Dolores perferendis et dolor iusto quas at.", UserId = "989ceb44-5bd1-4853-9431-d9361f090c09", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 21, 32, 33, 974, DateTimeKind.Local), IsDeleted = false, Text = "Fugiat sed unde voluptatem amet ad deleniti dignissimos rem aut.", UserId = "4c5e451e-ff98-4924-822f-222b14d1c2e7", WasRead = false },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 9, 12, 7, 42, 45, 353, DateTimeKind.Local), IsDeleted = false, Text = "Est facere ipsum aut est inventore at ut praesentium.", UserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", WasRead = false },
                        new { Id = 36, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 14, 52, 12, 169, DateTimeKind.Local), IsDeleted = false, Text = "Aspernatur sunt laborum voluptatibus consequatur.", UserId = "4c5e451e-ff98-4924-822f-222b14d1c2e7", WasRead = false },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 1, 33, 31, 979, DateTimeKind.Local), IsDeleted = false, Text = "Et illum voluptatem beatae.", UserId = "989ceb44-5bd1-4853-9431-d9361f090c09", WasRead = true },
                        new { Id = 38, ChatId = 29, CreatedAt = new DateTime(2018, 9, 11, 16, 25, 46, 619, DateTimeKind.Local), IsDeleted = false, Text = "Quod dolore dignissimos aperiam.", UserId = "ecc8eb07-9060-4845-b375-08dfa1582f8c", WasRead = true },
                        new { Id = 39, ChatId = 28, CreatedAt = new DateTime(2018, 9, 12, 6, 19, 29, 866, DateTimeKind.Local), IsDeleted = false, Text = "Sunt dolorum eos accusamus aut amet autem sed explicabo.", UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2", WasRead = true },
                        new { Id = 40, ChatId = 28, CreatedAt = new DateTime(2018, 9, 11, 15, 8, 38, 993, DateTimeKind.Local), IsDeleted = false, Text = "Perspiciatis doloribus sit.", UserId = "caf9d9a0-f7a8-46f5-9ec2-f603e31b2313", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 18, 14, 16, 351, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Repellendus quam et rerum aspernatur non expedita ipsa voluptatem voluptatem.", UserId = "989ceb44-5bd1-4853-9431-d9361f090c09", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 11, 12, 22, 49, 953, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Necessitatibus id et est non sit nobis perspiciatis est laboriosam.", UserId = "ecc8eb07-9060-4845-b375-08dfa1582f8c", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 11, 10, 9, 37, 517, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Accusamus id provident error et ut.", UserId = "87b40838-f225-4a2e-83ae-b0cc477befc8", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 11, 11, 34, 8, 79, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Labore est nemo qui voluptatem ducimus sunt.", UserId = "ecc8eb07-9060-4845-b375-08dfa1582f8c", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 11, 15, 24, 17, 939, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Dolores deserunt beatae voluptas est non labore.", UserId = "87b40838-f225-4a2e-83ae-b0cc477befc8", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 12, 2, 2, 31, 893, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Quisquam labore ipsum.", UserId = "492f4faf-9cda-4499-9eb9-f907fd024500", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 11, 18, 27, 16, 558, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Molestias consequatur ea ut nostrum ducimus.", UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 12, 5, 24, 29, 96, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Et dolore delectus vitae quam repudiandae id.", UserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 11, 13, 57, 33, 830, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Est impedit et ab.", UserId = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 12, 7, 48, 46, 600, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Est id distinctio.", UserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "ca578409-796c-4162-9883-a8438fc213ea" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "ecc8eb07-9060-4845-b375-08dfa1582f8c" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 4, UserId = "ca578409-796c-4162-9883-a8438fc213ea" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "ca578409-796c-4162-9883-a8438fc213ea" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "989ceb44-5bd1-4853-9431-d9361f090c09" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "864.461.7564 x4192", CreatedByUserId = "87b40838-f225-4a2e-83ae-b0cc477befc8", Description = "Incidunt voluptatum eligendi praesentium. Assumenda facilis voluptatem amet est. Sequi temporibus minus deserunt modi eos recusandae et iure.", Email = "Ted15@gmail.com", IsActive = true, IsDeleted = false, Name = "Company116", ThemeId = 65, WebSite = "http://cristobal.biz" },
                        new { Id = 72, ContactNumber = "(285) 975-0622 x9367", CreatedByUserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", Description = "Non quis quae est et fuga voluptas vel unde est. Praesentium velit quidem culpa autem sequi laudantium voluptas consequatur porro. Consequuntur quam dolores omnis magnam labore libero fugiat. Sunt autem unde.", Email = "Estelle_Hagenes@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company660", ThemeId = 64, WebSite = "https://elyssa.name" },
                        new { Id = 73, ContactNumber = "761-719-1151 x624", CreatedByUserId = "4c5e451e-ff98-4924-822f-222b14d1c2e7", Description = "Ratione porro et ea dicta et neque.", Email = "Gretchen97@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company268", ThemeId = 62, WebSite = "http://kristopher.name" },
                        new { Id = 74, ContactNumber = "295.723.9165 x906", CreatedByUserId = "492f4faf-9cda-4499-9eb9-f907fd024500", Description = "Autem modi blanditiis omnis quos. Quas officiis sequi harum deleniti occaecati. Eaque temporibus quia voluptatem omnis recusandae sunt ipsa impedit. Voluptas quis velit aut totam eligendi illo suscipit perferendis.", Email = "Lyric.Okuneva83@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company284", ThemeId = 65, WebSite = "https://estel.name" },
                        new { Id = 75, ContactNumber = "818.328.2782 x6464", CreatedByUserId = "492f4faf-9cda-4499-9eb9-f907fd024500", Description = "Eaque sit aspernatur ullam laudantium.", Email = "Kaylah55@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company746", ThemeId = 64, WebSite = "https://octavia.org" },
                        new { Id = 76, ContactNumber = "264-920-3920 x180", CreatedByUserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2", Description = "Sint laborum libero facilis corporis quasi aut eum cum ducimus. Culpa reiciendis quis delectus. Animi ut ab veniam nemo nihil omnis eos. Ratione at quae numquam.", Email = "Lauren_Osinski24@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company291", ThemeId = 70, WebSite = "https://rogers.com" },
                        new { Id = 77, ContactNumber = "1-904-936-2353", CreatedByUserId = "87b40838-f225-4a2e-83ae-b0cc477befc8", Description = "", Email = "Alayna19@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company530", ThemeId = 67, WebSite = "https://gage.com" },
                        new { Id = 78, ContactNumber = "(723) 344-7611 x4787", CreatedByUserId = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06", Description = "Facere et molestiae deserunt. Voluptas sit recusandae omnis laudantium assumenda laborum. Nostrum provident quaerat laudantium. Omnis neque quis a saepe.", Email = "Herminia83@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company89", ThemeId = 66, WebSite = "https://maria.name" },
                        new { Id = 79, ContactNumber = "939-335-9615", CreatedByUserId = "caf9d9a0-f7a8-46f5-9ec2-f603e31b2313", Description = "Tempora quia excepturi earum est pariatur quibusdam. Aliquam sit dolor tenetur quisquam sit quo dolores veritatis ut. Quia dolor perferendis perspiciatis. Eum dolorem eaque in.", Email = "Lea_Bergstrom34@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company336", ThemeId = 66, WebSite = "https://art.net" },
                        new { Id = 80, ContactNumber = "994.920.8458 x3682", CreatedByUserId = "caf9d9a0-f7a8-46f5-9ec2-f603e31b2313", Description = "Natus atque consequatur in quasi. Animi consequatur odio aut a ut ipsa ullam. Alias et repellat voluptatem facilis neque earum.", Email = "Rogers.Hintz76@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company417", ThemeId = 61, WebSite = "https://candace.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 11, 11, 40, 17, 100, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Tenetur asperiores provident at.", UserId = "4c5e451e-ff98-4924-822f-222b14d1c2e7" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 21, 10, 14, 879, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Dolores et possimus aspernatur qui adipisci sequi est ullam nam.", UserId = "ca578409-796c-4162-9883-a8438fc213ea" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 23, 47, 13, 447, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Molestiae dolore et laudantium.", UserId = "989ceb44-5bd1-4853-9431-d9361f090c09" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 13, 25, 29, 153, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Sit est doloribus numquam delectus quas.", UserId = "492f4faf-9cda-4499-9eb9-f907fd024500" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 19, 59, 42, 118, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Rerum alias commodi perferendis impedit.", UserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 12, 7, 52, 16, 436, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Laboriosam autem excepturi nisi dolorem.", UserId = "492f4faf-9cda-4499-9eb9-f907fd024500" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 12, 6, 45, 18, 902, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Rerum nihil eveniet aut quia.", UserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 11, 13, 48, 26, 368, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Est tempora et.", UserId = "87b40838-f225-4a2e-83ae-b0cc477befc8" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 20, 1, 28, 843, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Consequatur sunt et esse.", UserId = "989ceb44-5bd1-4853-9431-d9361f090c09" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 12, 33, 13, 102, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Doloribus praesentium laborum quas voluptatem dolorem ipsum dolor recusandae cupiditate.", UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme665" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme557" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme698" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme108" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme152" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme943" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme978" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme50" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme151" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme528" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2", CreatedAt = new DateTime(2018, 9, 12, 2, 58, 18, 897, DateTimeKind.Local), DisplayName = "Ebba", Email = "Monroe_Muller92@gmail.com", FirstName = "Kassandra", IsActive = true, IsDeleted = false, LastName = "Dach", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg", RoleId = 1 },
                        new { Id = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06", CreatedAt = new DateTime(2018, 9, 12, 0, 51, 48, 725, DateTimeKind.Local), DisplayName = "Elouise", Email = "Emilio10@gmail.com", FirstName = "Alfreda", IsActive = true, IsDeleted = false, LastName = "Mayert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg", RoleId = 1 },
                        new { Id = "4c5e451e-ff98-4924-822f-222b14d1c2e7", CreatedAt = new DateTime(2018, 9, 11, 21, 39, 20, 784, DateTimeKind.Local), DisplayName = "Dane", Email = "Dorothea_West87@yahoo.com", FirstName = "Clarissa", IsActive = true, IsDeleted = false, LastName = "Larson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg", RoleId = 2 },
                        new { Id = "989ceb44-5bd1-4853-9431-d9361f090c09", CreatedAt = new DateTime(2018, 9, 11, 21, 31, 29, 60, DateTimeKind.Local), DisplayName = "Geo", Email = "Raymundo69@gmail.com", FirstName = "Maddison", IsActive = true, IsDeleted = false, LastName = "Schamberger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg", RoleId = 1 },
                        new { Id = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", CreatedAt = new DateTime(2018, 9, 12, 3, 49, 29, 857, DateTimeKind.Local), DisplayName = "Jensen", Email = "Viva85@yahoo.com", FirstName = "Wilburn", IsActive = true, IsDeleted = false, LastName = "Bartell", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg", RoleId = 1 },
                        new { Id = "87b40838-f225-4a2e-83ae-b0cc477befc8", CreatedAt = new DateTime(2018, 9, 11, 16, 57, 14, 714, DateTimeKind.Local), DisplayName = "Jo", Email = "Isabella79@hotmail.com", FirstName = "Augusta", IsActive = true, IsDeleted = false, LastName = "McLaughlin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg", RoleId = 2 },
                        new { Id = "ca578409-796c-4162-9883-a8438fc213ea", CreatedAt = new DateTime(2018, 9, 11, 10, 20, 22, 479, DateTimeKind.Local), DisplayName = "Helena", Email = "Laury.Jacobson@hotmail.com", FirstName = "Alfredo", IsActive = true, IsDeleted = false, LastName = "O'Keefe", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg", RoleId = 2 },
                        new { Id = "492f4faf-9cda-4499-9eb9-f907fd024500", CreatedAt = new DateTime(2018, 9, 12, 2, 10, 31, 387, DateTimeKind.Local), DisplayName = "Lavinia", Email = "Kelton57@hotmail.com", FirstName = "Christy", IsActive = true, IsDeleted = false, LastName = "Franecki", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg", RoleId = 1 },
                        new { Id = "caf9d9a0-f7a8-46f5-9ec2-f603e31b2313", CreatedAt = new DateTime(2018, 9, 12, 6, 21, 21, 291, DateTimeKind.Local), DisplayName = "Patricia", Email = "Regan52@hotmail.com", FirstName = "Jordyn", IsActive = true, IsDeleted = false, LastName = "Predovic", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg", RoleId = 2 },
                        new { Id = "ecc8eb07-9060-4845-b375-08dfa1582f8c", CreatedAt = new DateTime(2018, 9, 12, 4, 10, 17, 847, DateTimeKind.Local), DisplayName = "Rodolfo", Email = "Alexa.Ward1@hotmail.com", FirstName = "Halle", IsActive = true, IsDeleted = false, LastName = "Zemlak", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "739a6a5e-d74b-4e68-a4a3-8887ff1710e2", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "76ba53b6-9c4d-4154-8b00-b3b30b0f5c06", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "4c5e451e-ff98-4924-822f-222b14d1c2e7", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "989ceb44-5bd1-4853-9431-d9361f090c09", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "2d5f4c3b-50e0-4871-abb0-da53cbfbe684", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "87b40838-f225-4a2e-83ae-b0cc477befc8", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "ca578409-796c-4162-9883-a8438fc213ea", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "492f4faf-9cda-4499-9eb9-f907fd024500", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "caf9d9a0-f7a8-46f5-9ec2-f603e31b2313", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "ecc8eb07-9060-4845-b375-08dfa1582f8c", OrganizationId = 75, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
