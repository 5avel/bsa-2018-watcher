// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180910102301_SettingsFieldsInstance")]
    partial class SettingsFieldsInstance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 28, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 92, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 12, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 8, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 57, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 7, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 59, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 83, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 84, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 41, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", IsDeleted = false, Name = "provident", Type = 0 },
                        new { Id = 22, CreatedById = "d451fc62-30dc-4b46-9728-247662789858", IsDeleted = false, Name = "quod", Type = 0 },
                        new { Id = 23, CreatedById = "5a80e498-6d51-4a7f-8557-dddb9d3323f4", IsDeleted = false, Name = "corrupti", Type = 0 },
                        new { Id = 24, CreatedById = "a4196fc7-7711-43fe-a875-bb9fd6f911ac", IsDeleted = false, Name = "voluptatem", Type = 0 },
                        new { Id = 25, CreatedById = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", IsDeleted = false, Name = "exercitationem", Type = 0 },
                        new { Id = 26, CreatedById = "a4196fc7-7711-43fe-a875-bb9fd6f911ac", IsDeleted = false, Name = "nobis", Type = 0 },
                        new { Id = 27, CreatedById = "00e474b0-3967-4af2-a38e-f93f795a347c", IsDeleted = false, Name = "minus", Type = 0 },
                        new { Id = 28, CreatedById = "e7912c8a-ef1e-4a77-8b57-692133075552", IsDeleted = false, Name = "ea", Type = 0 },
                        new { Id = 29, CreatedById = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 30, CreatedById = "5185e9e4-9ca3-456b-94bb-e00cec2e4111", IsDeleted = false, Name = "amet", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 10, 5, 19, 20, 162, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title555" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 10, 5, 12, 9, 81, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title665" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 10, 5, 59, 13, 87, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title593" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 10, 3, 31, 24, 262, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title143" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 9, 16, 14, 57, 579, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title488" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 9, 16, 7, 28, 404, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title779" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 10, 10, 50, 58, 220, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title882" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 10, 1, 18, 12, 584, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title662" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 9, 23, 49, 25, 406, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title874" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 9, 20, 27, 47, 716, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title497" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 9, 22, 46, 32, 459, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Delectus voluptatem repudiandae repellendus et et error quisquam architecto harum.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 9, 21, 22, 41, 448, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolorum aspernatur quas deserunt et magnam esse accusamus.", UserId = "5185e9e4-9ca3-456b-94bb-e00cec2e4111", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 10, 11, 33, 44, 636, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatem et dolores sed et.", UserId = "a4196fc7-7711-43fe-a875-bb9fd6f911ac", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 10, 8, 51, 14, 40, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eum aut nesciunt assumenda quibusdam mollitia ullam laboriosam.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 10, 1, 23, 8, 600, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Illo possimus officiis et voluptatem et.", UserId = "00e474b0-3967-4af2-a38e-f93f795a347c", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 10, 2, 42, 23, 128, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Esse ducimus sed ullam quisquam dolorum cupiditate quibusdam consequatur.", UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 10, 7, 53, 35, 661, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolore hic dolorem qui laudantium sit nihil repellat sed voluptates.", UserId = "00e474b0-3967-4af2-a38e-f93f795a347c", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 9, 17, 49, 7, 412, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quis sed iure sed.", UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 9, 13, 31, 18, 21, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Odio occaecati labore itaque.", UserId = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 9, 14, 0, 51, 480, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolor quasi quas.", UserId = "5a80e498-6d51-4a7f-8557-dddb9d3323f4", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "37:22:f2:5d:8c:f8", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance182" },
                        new { Id = 82, Address = "7a:db:32:bb:5b:c2", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance369" },
                        new { Id = 83, Address = "a1:b5:02:9d:a2:a3", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", RamMaxPercent = 0f, Title = "Instance970" },
                        new { Id = 84, Address = "88:08:62:98:11:a9", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance610" },
                        new { Id = 85, Address = "b3:16:96:4a:c8:63", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance896" },
                        new { Id = 86, Address = "ba:95:d0:cb:af:81", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance34" },
                        new { Id = 87, Address = "80:e3:45:08:d5:72", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", RamMaxPercent = 0f, Title = "Instance731" },
                        new { Id = 88, Address = "0b:22:7d:81:af:8a", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance664" },
                        new { Id = 89, Address = "5e:9e:9e:7d:9b:f2", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance833" },
                        new { Id = 90, Address = "89:61:dc:fc:f6:cf", AggregationForDay = false, AggregationForHour = false, AggregationForMonth = false, CpuMaxPercent = 0f, DiskMaxPercent = 0f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", RamMaxPercent = 0f, Title = "Instance909" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 27, CreatedAt = new DateTime(2018, 9, 9, 19, 26, 3, 797, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatem corrupti voluptas ipsam quia debitis sit.", UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", WasRead = true },
                        new { Id = 32, ChatId = 21, CreatedAt = new DateTime(2018, 9, 10, 11, 25, 9, 468, DateTimeKind.Local), IsDeleted = false, Text = "Excepturi atque voluptas et.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552", WasRead = false },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 9, 10, 8, 51, 49, 341, DateTimeKind.Local), IsDeleted = false, Text = "Necessitatibus asperiores possimus totam at et autem dicta quis rerum.", UserId = "6f298990-71dd-4677-aebd-c1f7225d705d", WasRead = true },
                        new { Id = 34, ChatId = 23, CreatedAt = new DateTime(2018, 9, 10, 8, 58, 8, 460, DateTimeKind.Local), IsDeleted = false, Text = "Velit animi veniam debitis vitae corporis perspiciatis ea.", UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", WasRead = false },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 9, 10, 6, 55, 6, 851, DateTimeKind.Local), IsDeleted = false, Text = "Omnis aperiam temporibus.", UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", WasRead = true },
                        new { Id = 36, ChatId = 28, CreatedAt = new DateTime(2018, 9, 9, 18, 14, 54, 887, DateTimeKind.Local), IsDeleted = false, Text = "Sunt pariatur ex autem reprehenderit recusandae.", UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", WasRead = true },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 9, 10, 9, 16, 48, 58, DateTimeKind.Local), IsDeleted = false, Text = "Ut nam sunt ipsum.", UserId = "00e474b0-3967-4af2-a38e-f93f795a347c", WasRead = false },
                        new { Id = 38, ChatId = 23, CreatedAt = new DateTime(2018, 9, 10, 5, 33, 3, 763, DateTimeKind.Local), IsDeleted = false, Text = "Harum architecto veniam harum corporis.", UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", WasRead = false },
                        new { Id = 39, ChatId = 28, CreatedAt = new DateTime(2018, 9, 9, 17, 14, 28, 396, DateTimeKind.Local), IsDeleted = false, Text = "Sint quo vel.", UserId = "d451fc62-30dc-4b46-9728-247662789858", WasRead = true },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 9, 10, 4, 30, 38, 503, DateTimeKind.Local), IsDeleted = false, Text = "Est consequatur vitae error earum dolorem alias.", UserId = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 10, 4, 7, 35, 778, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Recusandae doloremque dolor ut inventore blanditiis sit est iusto est.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 10, 7, 23, 40, 484, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Explicabo alias eligendi quaerat ratione.", UserId = "a4196fc7-7711-43fe-a875-bb9fd6f911ac", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 10, 12, 20, 45, 416, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Aut non laborum rerum omnis tempore porro ut et harum.", UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 9, 16, 29, 43, 651, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Esse sed enim ut qui iure laudantium et.", UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 10, 2, 41, 41, 19, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Ea porro est neque voluptatem culpa qui inventore eveniet est.", UserId = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 9, 21, 36, 18, 791, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Porro voluptatem qui.", UserId = "00e474b0-3967-4af2-a38e-f93f795a347c", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 10, 1, 7, 59, 970, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Quis minima est quo ut et sapiente molestias voluptatem laboriosam.", UserId = "6f298990-71dd-4677-aebd-c1f7225d705d", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 9, 23, 54, 2, 807, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Alias voluptas quidem atque laudantium.", UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 10, 3, 31, 29, 509, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Sunt quos sed porro libero ipsam aperiam numquam.", UserId = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 10, 7, 1, 53, 939, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Odio ab voluptas et sapiente dolorum unde quidem ut recusandae.", UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "00e474b0-3967-4af2-a38e-f93f795a347c" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "d451fc62-30dc-4b46-9728-247662789858" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "5a80e498-6d51-4a7f-8557-dddb9d3323f4" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "a4196fc7-7711-43fe-a875-bb9fd6f911ac" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "a4196fc7-7711-43fe-a875-bb9fd6f911ac" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "6f298990-71dd-4677-aebd-c1f7225d705d" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "00e474b0-3967-4af2-a38e-f93f795a347c" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "690-894-2372", CreatedByUserId = "e7912c8a-ef1e-4a77-8b57-692133075552", Description = "", Email = "Darby.Hilpert38@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company595", ThemeId = 62, WebSite = "http://concepcion.name" },
                        new { Id = 72, ContactNumber = "322.468.2006 x377", CreatedByUserId = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", Description = "Suscipit quasi quia in quis sed autem beatae et explicabo. Et provident libero animi dolorem magni earum autem. Et dolor molestiae est doloribus hic aspernatur nesciunt dolores error.", Email = "Nicholas.Mohr@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company874", ThemeId = 67, WebSite = "http://hailee.org" },
                        new { Id = 73, ContactNumber = "317.934.8183 x8311", CreatedByUserId = "00e474b0-3967-4af2-a38e-f93f795a347c", Description = "Quam sit quidem culpa recusandae aliquam. Facilis eos totam.", Email = "Ulises47@gmail.com", IsActive = true, IsDeleted = false, Name = "Company982", ThemeId = 69, WebSite = "http://haleigh.biz" },
                        new { Id = 74, ContactNumber = "(730) 730-3083 x5047", CreatedByUserId = "e7912c8a-ef1e-4a77-8b57-692133075552", Description = "Recusandae et provident aut recusandae quibusdam alias inventore commodi. Molestiae delectus omnis velit earum mollitia. Quia molestiae sint perspiciatis.", Email = "Jamie_Hermiston@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company121", ThemeId = 68, WebSite = "https://randy.biz" },
                        new { Id = 75, ContactNumber = "1-823-879-6368 x632", CreatedByUserId = "00e474b0-3967-4af2-a38e-f93f795a347c", Description = "Alias voluptas magni pariatur possimus enim.", Email = "Rowan.Keeling@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company557", ThemeId = 61, WebSite = "http://mathilde.net" },
                        new { Id = 76, ContactNumber = "638-350-2259", CreatedByUserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", Description = "Dolores praesentium aut occaecati. Quia voluptas molestiae tempora fugit cumque corporis. Magnam ut sunt autem eligendi rerum molestiae explicabo veritatis repellendus. Nobis hic sunt voluptas dolores.", Email = "Tyrell_Marks@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company975", ThemeId = 61, WebSite = "https://murray.biz" },
                        new { Id = 77, ContactNumber = "240.593.0149", CreatedByUserId = "d451fc62-30dc-4b46-9728-247662789858", Description = "", Email = "Geoffrey.Kuhic@gmail.com", IsActive = true, IsDeleted = false, Name = "Company187", ThemeId = 61, WebSite = "http://mandy.org" },
                        new { Id = 78, ContactNumber = "744-873-2070", CreatedByUserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", Description = "Libero perferendis voluptatem et voluptas libero amet ipsum odit.", Email = "Robyn.Mraz42@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company71", ThemeId = 64, WebSite = "http://alanna.name" },
                        new { Id = 79, ContactNumber = "566-657-9303", CreatedByUserId = "e7912c8a-ef1e-4a77-8b57-692133075552", Description = "Id corrupti sed aspernatur. Quo nisi quia ut natus tempore. Mollitia unde nemo qui et consectetur illum. Aut aut dolorem dolore et voluptatem deserunt quis neque debitis.", Email = "Nolan_Volkman86@gmail.com", IsActive = true, IsDeleted = false, Name = "Company810", ThemeId = 65, WebSite = "http://trisha.net" },
                        new { Id = 80, ContactNumber = "(900) 247-5859 x27694", CreatedByUserId = "5185e9e4-9ca3-456b-94bb-e00cec2e4111", Description = "Ut a distinctio voluptatem. Laudantium culpa reprehenderit aut.", Email = "Herman.Pfannerstill63@gmail.com", IsActive = true, IsDeleted = false, Name = "Company104", ThemeId = 70, WebSite = "https://mandy.net" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 10, 12, 15, 51, 729, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Et consequatur consequatur.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 10, 11, 25, 19, 309, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Autem quidem libero quas eius qui veritatis ut.", UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 9, 22, 49, 40, 74, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Reprehenderit delectus iste qui quo necessitatibus deserunt.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 10, 5, 42, 14, 861, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Cumque itaque atque omnis et error qui nisi et sapiente.", UserId = "a4196fc7-7711-43fe-a875-bb9fd6f911ac" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 10, 4, 54, 43, 12, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Minus porro ut quibusdam cumque aspernatur itaque et nihil.", UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 10, 7, 29, 27, 815, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Explicabo nesciunt est.", UserId = "5185e9e4-9ca3-456b-94bb-e00cec2e4111" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 9, 21, 11, 7, 570, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Delectus similique minus ut quaerat repellendus aliquid autem.", UserId = "6f298990-71dd-4677-aebd-c1f7225d705d" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 9, 13, 36, 55, 768, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Facere debitis reiciendis ipsum ab consequatur culpa et.", UserId = "5a80e498-6d51-4a7f-8557-dddb9d3323f4" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 10, 8, 56, 34, 757, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Ea molestiae atque harum.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 10, 9, 55, 4, 106, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Et explicabo rerum dolorem voluptatibus quidem sed sint maxime.", UserId = "e7912c8a-ef1e-4a77-8b57-692133075552" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme281" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme118" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme869" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme52" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme299" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme870" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme993" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme271" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme561" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme799" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", CreatedAt = new DateTime(2018, 9, 9, 22, 26, 11, 668, DateTimeKind.Local), DisplayName = "Alana", Email = "Dayana93@gmail.com", FirstName = "Jimmy", IsActive = true, IsDeleted = false, LastName = "Williamson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg", RoleId = 1 },
                        new { Id = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", CreatedAt = new DateTime(2018, 9, 10, 10, 25, 20, 524, DateTimeKind.Local), DisplayName = "Hazle", Email = "Wendell.Ziemann70@hotmail.com", FirstName = "Shaun", IsActive = true, IsDeleted = false, LastName = "Steuber", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg", RoleId = 1 },
                        new { Id = "e7912c8a-ef1e-4a77-8b57-692133075552", CreatedAt = new DateTime(2018, 9, 9, 16, 2, 17, 310, DateTimeKind.Local), DisplayName = "Erich", Email = "Boyd51@gmail.com", FirstName = "Dorcas", IsActive = true, IsDeleted = false, LastName = "Hagenes", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg", RoleId = 2 },
                        new { Id = "a4196fc7-7711-43fe-a875-bb9fd6f911ac", CreatedAt = new DateTime(2018, 9, 9, 18, 54, 57, 837, DateTimeKind.Local), DisplayName = "Frederick", Email = "Stacy_Strosin@hotmail.com", FirstName = "Candido", IsActive = true, IsDeleted = false, LastName = "McDermott", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg", RoleId = 1 },
                        new { Id = "5185e9e4-9ca3-456b-94bb-e00cec2e4111", CreatedAt = new DateTime(2018, 9, 9, 16, 56, 25, 284, DateTimeKind.Local), DisplayName = "Rosario", Email = "Alva.Mertz@yahoo.com", FirstName = "Winnifred", IsActive = true, IsDeleted = false, LastName = "Braun", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg", RoleId = 1 },
                        new { Id = "6f298990-71dd-4677-aebd-c1f7225d705d", CreatedAt = new DateTime(2018, 9, 10, 2, 24, 52, 983, DateTimeKind.Local), DisplayName = "Timmothy", Email = "Kattie71@hotmail.com", FirstName = "Murphy", IsActive = true, IsDeleted = false, LastName = "Rogahn", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg", RoleId = 2 },
                        new { Id = "00e474b0-3967-4af2-a38e-f93f795a347c", CreatedAt = new DateTime(2018, 9, 10, 6, 25, 15, 840, DateTimeKind.Local), DisplayName = "Edythe", Email = "Abbigail.Schuppe@yahoo.com", FirstName = "Deontae", IsActive = true, IsDeleted = false, LastName = "Gislason", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg", RoleId = 1 },
                        new { Id = "5a80e498-6d51-4a7f-8557-dddb9d3323f4", CreatedAt = new DateTime(2018, 9, 10, 9, 38, 5, 292, DateTimeKind.Local), DisplayName = "Dallas", Email = "Louisa.Thiel@yahoo.com", FirstName = "Trent", IsActive = true, IsDeleted = false, LastName = "Hane", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg", RoleId = 2 },
                        new { Id = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", CreatedAt = new DateTime(2018, 9, 9, 21, 25, 28, 299, DateTimeKind.Local), DisplayName = "Lia", Email = "Wilmer_Halvorson@gmail.com", FirstName = "Ona", IsActive = true, IsDeleted = false, LastName = "Stanton", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg", RoleId = 2 },
                        new { Id = "d451fc62-30dc-4b46-9728-247662789858", CreatedAt = new DateTime(2018, 9, 10, 11, 14, 17, 868, DateTimeKind.Local), DisplayName = "Kristian", Email = "Houston_Medhurst67@gmail.com", FirstName = "Yoshiko", IsActive = true, IsDeleted = false, LastName = "Stark", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "fbe373fd-3b47-46fb-94a3-93ca1d825d14", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "a6a964f2-d795-4b3c-af4c-a903e41c34ce", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "e7912c8a-ef1e-4a77-8b57-692133075552", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "a4196fc7-7711-43fe-a875-bb9fd6f911ac", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "5185e9e4-9ca3-456b-94bb-e00cec2e4111", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "6f298990-71dd-4677-aebd-c1f7225d705d", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "00e474b0-3967-4af2-a38e-f93f795a347c", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "5a80e498-6d51-4a7f-8557-dddb9d3323f4", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "81fb2ff2-02f5-40a4-8baa-a9aec161c4d6", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "d451fc62-30dc-4b46-9728-247662789858", OrganizationId = 76, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
