// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180911173447_Added_CollectorAppVersion_Entity")]
    partial class Added_CollectorAppVersion_Entity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 99, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 73, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 3, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 79, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 85, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 97, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 85, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 29, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 82, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 22, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 10, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "5cb4609d-26f4-4eda-971d-8c7e56136de3", IsDeleted = false, Name = "consectetur", Type = 0 },
                        new { Id = 22, CreatedById = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8", IsDeleted = false, Name = "laboriosam", Type = 0 },
                        new { Id = 23, CreatedById = "107ded11-f698-4020-a5b6-66b70d0afbb9", IsDeleted = false, Name = "exercitationem", Type = 0 },
                        new { Id = 24, CreatedById = "0260ccd0-3a37-4ed2-ab2f-543810027907", IsDeleted = false, Name = "repellat", Type = 0 },
                        new { Id = 25, CreatedById = "0260ccd0-3a37-4ed2-ab2f-543810027907", IsDeleted = false, Name = "ut", Type = 0 },
                        new { Id = 26, CreatedById = "df715b76-4cf3-46f9-8850-aac5300375f1", IsDeleted = false, Name = "tempore", Type = 0 },
                        new { Id = 27, CreatedById = "7883317d-40ed-441a-a54d-7bb483b1863d", IsDeleted = false, Name = "quos", Type = 0 },
                        new { Id = 28, CreatedById = "107ded11-f698-4020-a5b6-66b70d0afbb9", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 29, CreatedById = "df715b76-4cf3-46f9-8850-aac5300375f1", IsDeleted = false, Name = "at", Type = 0 },
                        new { Id = 30, CreatedById = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8", IsDeleted = false, Name = "nam", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.CollectorAppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DebLink");

                    b.Property<string>("ExeLink");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TgzLink");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("CollectorAppVersions");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 10, 21, 16, 35, 400, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title581" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 11, 13, 47, 37, 743, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title249" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 11, 19, 36, 50, 527, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title250" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 11, 20, 16, 56, 99, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title246" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 10, 21, 11, 54, 493, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title832" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 11, 17, 45, 9, 716, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title936" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 11, 13, 48, 3, 481, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title737" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 11, 20, 6, 16, 551, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title592" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 11, 15, 4, 52, 406, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title989" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 11, 8, 39, 11, 690, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title643" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 11, 9, 1, 27, 796, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolore sed beatae.", UserId = "b828e516-c495-4b5e-adb5-3caa41fb3231", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 7, 35, 24, 61, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Autem quae eum iusto accusantium ratione numquam.", UserId = "7883317d-40ed-441a-a54d-7bb483b1863d", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 14, 15, 29, 606, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quod corporis reprehenderit.", UserId = "7337fdcd-7e5f-4251-b92e-2646668d6715", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 19, 25, 31, 123, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Assumenda non perspiciatis dolorum hic eveniet laudantium dolor.", UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 11, 4, 57, 47, 151, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur eius voluptatibus laborum fugiat.", UserId = "7883317d-40ed-441a-a54d-7bb483b1863d", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 11, 16, 24, 17, 442, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolores totam labore nemo.", UserId = "7337fdcd-7e5f-4251-b92e-2646668d6715", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 10, 22, 4, 16, 974, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Perferendis recusandae consequuntur cupiditate placeat qui corporis dolorum iusto omnis.", UserId = "107ded11-f698-4020-a5b6-66b70d0afbb9", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 11, 8, 36, 31, 65, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Deleniti culpa id iure earum accusamus pariatur quia.", UserId = "b828e516-c495-4b5e-adb5-3caa41fb3231", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 10, 23, 24, 51, 451, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et et et distinctio nesciunt provident eius quis aut alias.", UserId = "b828e516-c495-4b5e-adb5-3caa41fb3231", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 2, 26, 4, 450, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Cupiditate suscipit dolores veritatis animi unde inventore saepe.", UserId = "107ded11-f698-4020-a5b6-66b70d0afbb9", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "cd:40:84:90:f1:a9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", Title = "Instance135" },
                        new { Id = 82, Address = "3b:e0:98:ca:69:61", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance576" },
                        new { Id = 83, Address = "e2:f0:97:0f:87:79", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance412" },
                        new { Id = 84, Address = "ed:c2:42:1e:af:b5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance771" },
                        new { Id = 85, Address = "4c:21:21:f2:71:54", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", Title = "Instance207" },
                        new { Id = 86, Address = "ae:10:fc:62:ff:dc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance982" },
                        new { Id = 87, Address = "b3:d6:d5:8c:fa:79", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance34" },
                        new { Id = 88, Address = "41:6e:c1:f2:73:c0", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", Title = "Instance106" },
                        new { Id = 89, Address = "bf:ba:44:e6:58:dc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", Title = "Instance614" },
                        new { Id = 90, Address = "0d:a9:f3:bc:c3:76", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance120" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 24, CreatedAt = new DateTime(2018, 9, 10, 21, 15, 54, 941, DateTimeKind.Local), IsDeleted = false, Text = "Sit neque esse autem aut et quis aliquid.", UserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3", WasRead = true },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 3, 17, 44, 396, DateTimeKind.Local), IsDeleted = false, Text = "Atque architecto placeat modi sed et iusto.", UserId = "666909a1-17b5-41af-8ccb-2e861a540155", WasRead = false },
                        new { Id = 33, ChatId = 29, CreatedAt = new DateTime(2018, 9, 11, 16, 24, 21, 23, DateTimeKind.Local), IsDeleted = false, Text = "Consequatur nihil iusto aut sed recusandae natus eum.", UserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3", WasRead = false },
                        new { Id = 34, ChatId = 30, CreatedAt = new DateTime(2018, 9, 10, 23, 18, 47, 52, DateTimeKind.Local), IsDeleted = false, Text = "Adipisci eum fuga expedita magnam odit nisi.", UserId = "b828e516-c495-4b5e-adb5-3caa41fb3231", WasRead = false },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 9, 11, 13, 26, 44, 100, DateTimeKind.Local), IsDeleted = false, Text = "Harum dolores dolorem et.", UserId = "2ec236a6-25a4-4dc5-8926-af73b29dd42c", WasRead = false },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 9, 11, 18, 30, 38, 352, DateTimeKind.Local), IsDeleted = false, Text = "Minus facilis itaque.", UserId = "7337fdcd-7e5f-4251-b92e-2646668d6715", WasRead = true },
                        new { Id = 37, ChatId = 25, CreatedAt = new DateTime(2018, 9, 11, 19, 15, 0, 15, DateTimeKind.Local), IsDeleted = false, Text = "Aperiam enim magnam dolorem soluta consequatur libero.", UserId = "7883317d-40ed-441a-a54d-7bb483b1863d", WasRead = false },
                        new { Id = 38, ChatId = 23, CreatedAt = new DateTime(2018, 9, 10, 23, 32, 23, 372, DateTimeKind.Local), IsDeleted = false, Text = "Reiciendis atque odio vero eos sunt odio qui occaecati.", UserId = "df715b76-4cf3-46f9-8850-aac5300375f1", WasRead = false },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 9, 11, 16, 15, 9, 216, DateTimeKind.Local), IsDeleted = false, Text = "Laudantium amet est ipsam dolorem et.", UserId = "df715b76-4cf3-46f9-8850-aac5300375f1", WasRead = false },
                        new { Id = 40, ChatId = 22, CreatedAt = new DateTime(2018, 9, 11, 0, 41, 38, 703, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatem hic corrupti dolores illo.", UserId = "7883317d-40ed-441a-a54d-7bb483b1863d", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 18, 17, 46, 903, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Molestias est est commodi consequatur qui.", UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 11, 20, 32, 15, 190, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Autem excepturi id facere aliquid voluptatem voluptas voluptatem officiis.", UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 11, 13, 32, 23, 780, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Dolorum est temporibus esse enim impedit enim veniam.", UserId = "666909a1-17b5-41af-8ccb-2e861a540155", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 11, 0, 13, 37, 278, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Accusantium dolore voluptate veniam praesentium.", UserId = "df715b76-4cf3-46f9-8850-aac5300375f1", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 11, 13, 16, 19, 829, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Dolorem fugiat fuga dolorum incidunt iure dolor.", UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 11, 1, 47, 32, 11, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Iste et sequi officia eius voluptatibus.", UserId = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 10, 21, 5, 28, 386, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Vitae voluptas consectetur esse voluptas perferendis sint.", UserId = "7883317d-40ed-441a-a54d-7bb483b1863d", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 11, 18, 35, 0, 72, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Voluptatibus adipisci autem earum neque autem.", UserId = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 11, 13, 24, 13, 222, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Adipisci reprehenderit perferendis dolor sed explicabo qui et deleniti et.", UserId = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 11, 5, 16, 45, 122, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Quas et quia ut quis eos voluptas est.", UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "107ded11-f698-4020-a5b6-66b70d0afbb9" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "666909a1-17b5-41af-8ccb-2e861a540155" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "2ec236a6-25a4-4dc5-8926-af73b29dd42c" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "2ec236a6-25a4-4dc5-8926-af73b29dd42c" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "107ded11-f698-4020-a5b6-66b70d0afbb9" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "b828e516-c495-4b5e-adb5-3caa41fb3231" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "df715b76-4cf3-46f9-8850-aac5300375f1" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "df715b76-4cf3-46f9-8850-aac5300375f1" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(861) 847-1235 x27376", CreatedByUserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3", Description = "Eos accusamus quibusdam et a quam aut laborum eveniet.", Email = "Kailey_Strosin99@gmail.com", IsActive = true, IsDeleted = false, Name = "Company591", ThemeId = 66, WebSite = "https://vada.biz" },
                        new { Id = 72, ContactNumber = "1-800-794-1004", CreatedByUserId = "7337fdcd-7e5f-4251-b92e-2646668d6715", Description = "Beatae in minima et iure et sint iste.", Email = "Kaela_Jast5@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company686", ThemeId = 66, WebSite = "https://sienna.org" },
                        new { Id = 73, ContactNumber = "698-940-1784", CreatedByUserId = "7337fdcd-7e5f-4251-b92e-2646668d6715", Description = "Possimus blanditiis aut.", Email = "Milan.Grimes@gmail.com", IsActive = true, IsDeleted = false, Name = "Company552", ThemeId = 68, WebSite = "https://kieran.org" },
                        new { Id = 74, ContactNumber = "848.934.5430", CreatedByUserId = "df715b76-4cf3-46f9-8850-aac5300375f1", Description = "Commodi vel aut inventore voluptatem et suscipit. Veniam eligendi totam molestiae vel. Et recusandae laborum illum voluptas voluptatum necessitatibus. Asperiores a perferendis ex dolor quis ut ut consequatur cum.", Email = "Ethyl12@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company666", ThemeId = 67, WebSite = "http://thurman.biz" },
                        new { Id = 75, ContactNumber = "685-568-5156 x389", CreatedByUserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3", Description = "", Email = "Desmond58@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company10", ThemeId = 62, WebSite = "https://shanie.com" },
                        new { Id = 76, ContactNumber = "289.719.5489", CreatedByUserId = "7883317d-40ed-441a-a54d-7bb483b1863d", Description = "Soluta nulla dolores neque aut. Nihil repellendus non quo reiciendis sed natus dolores. Expedita corporis omnis enim sit in quas molestias.", Email = "Erik73@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company51", ThemeId = 67, WebSite = "https://geovanni.biz" },
                        new { Id = 77, ContactNumber = "(478) 264-1173 x492", CreatedByUserId = "2ec236a6-25a4-4dc5-8926-af73b29dd42c", Description = "Explicabo expedita sed rerum. Suscipit aperiam ut ad. Dolorem quis harum qui aut. Atque architecto dolore ea.", Email = "Hassie17@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company696", ThemeId = 70, WebSite = "http://ardella.com" },
                        new { Id = 78, ContactNumber = "271-681-2545 x805", CreatedByUserId = "2ec236a6-25a4-4dc5-8926-af73b29dd42c", Description = "Ratione et saepe sapiente quos rerum aspernatur numquam doloremque et. Alias voluptatem ut maiores inventore sequi consequatur non impedit.", Email = "Frances.Hartmann28@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company443", ThemeId = 65, WebSite = "http://margaret.name" },
                        new { Id = 79, ContactNumber = "(834) 370-4937 x20192", CreatedByUserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3", Description = "Optio aliquam ullam id est id. Cumque eos reprehenderit enim mollitia minima quis voluptatem.", Email = "Barney_Osinski@gmail.com", IsActive = true, IsDeleted = false, Name = "Company293", ThemeId = 62, WebSite = "https://stanley.org" },
                        new { Id = 80, ContactNumber = "1-930-349-6511", CreatedByUserId = "0260ccd0-3a37-4ed2-ab2f-543810027907", Description = "Impedit pariatur cum sed voluptatem accusantium reprehenderit magnam.", Email = "Lyda_Kihn79@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company540", ThemeId = 61, WebSite = "https://lulu.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 11, 10, 20, 26, 287, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Iste et at consequatur nemo necessitatibus fuga sint.", UserId = "2ec236a6-25a4-4dc5-8926-af73b29dd42c" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 19, 16, 1, 792, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Architecto facilis praesentium ut sit similique aut facilis mollitia.", UserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 18, 6, 5, 245, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Minus repellendus est hic qui perferendis eveniet.", UserId = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 11, 48, 1, 124, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Soluta at veritatis asperiores vel.", UserId = "666909a1-17b5-41af-8ccb-2e861a540155" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 11, 16, 23, 9, 597, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Molestias veritatis quam eos est qui voluptas maxime.", UserId = "666909a1-17b5-41af-8ccb-2e861a540155" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 11, 3, 16, 49, 903, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Doloribus omnis sunt aut eveniet similique reiciendis sed aut est.", UserId = "b828e516-c495-4b5e-adb5-3caa41fb3231" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 15, 0, 56, 493, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Voluptatum quas sit voluptatem.", UserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 11, 13, 18, 24, 851, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Aspernatur tempore consequatur qui.", UserId = "7337fdcd-7e5f-4251-b92e-2646668d6715" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 3, 59, 0, 649, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Non ut id eum.", UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 11, 14, 35, 37, 219, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Atque et quia ut cum repellendus laboriosam aut reiciendis nihil.", UserId = "107ded11-f698-4020-a5b6-66b70d0afbb9" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme910" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme776" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme313" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme823" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme781" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme126" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme282" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme484" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme866" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme60" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "0260ccd0-3a37-4ed2-ab2f-543810027907", CreatedAt = new DateTime(2018, 9, 11, 12, 31, 5, 55, DateTimeKind.Local), DisplayName = "Euna", Email = "Joelle.Harber@gmail.com", FirstName = "Fay", IsActive = true, IsDeleted = false, LastName = "Conroy", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg", RoleId = 1 },
                        new { Id = "666909a1-17b5-41af-8ccb-2e861a540155", CreatedAt = new DateTime(2018, 9, 11, 19, 30, 17, 214, DateTimeKind.Local), DisplayName = "Audrey", Email = "Derrick55@yahoo.com", FirstName = "Eleazar", IsActive = true, IsDeleted = false, LastName = "Blick", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg", RoleId = 2 },
                        new { Id = "2ec236a6-25a4-4dc5-8926-af73b29dd42c", CreatedAt = new DateTime(2018, 9, 11, 2, 34, 31, 512, DateTimeKind.Local), DisplayName = "Marques", Email = "Cyril30@hotmail.com", FirstName = "Ellis", IsActive = true, IsDeleted = false, LastName = "Morar", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg", RoleId = 2 },
                        new { Id = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8", CreatedAt = new DateTime(2018, 9, 11, 0, 13, 47, 23, DateTimeKind.Local), DisplayName = "Ashton", Email = "Golda.Stokes@yahoo.com", FirstName = "Keshaun", IsActive = true, IsDeleted = false, LastName = "Collins", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg", RoleId = 1 },
                        new { Id = "7883317d-40ed-441a-a54d-7bb483b1863d", CreatedAt = new DateTime(2018, 9, 11, 9, 14, 54, 947, DateTimeKind.Local), DisplayName = "Wilfrid", Email = "Lela_Beier90@hotmail.com", FirstName = "Fidel", IsActive = true, IsDeleted = false, LastName = "Lowe", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg", RoleId = 1 },
                        new { Id = "b828e516-c495-4b5e-adb5-3caa41fb3231", CreatedAt = new DateTime(2018, 9, 11, 7, 16, 46, 277, DateTimeKind.Local), DisplayName = "Guillermo", Email = "Bertha_Blanda@hotmail.com", FirstName = "Rodrigo", IsActive = true, IsDeleted = false, LastName = "Reichert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg", RoleId = 2 },
                        new { Id = "df715b76-4cf3-46f9-8850-aac5300375f1", CreatedAt = new DateTime(2018, 9, 11, 17, 38, 48, 398, DateTimeKind.Local), DisplayName = "Emelie", Email = "Felton33@yahoo.com", FirstName = "Johann", IsActive = true, IsDeleted = false, LastName = "Wilkinson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg", RoleId = 2 },
                        new { Id = "7337fdcd-7e5f-4251-b92e-2646668d6715", CreatedAt = new DateTime(2018, 9, 11, 4, 5, 20, 150, DateTimeKind.Local), DisplayName = "Rebekah", Email = "Rose.Beer@yahoo.com", FirstName = "Devyn", IsActive = true, IsDeleted = false, LastName = "Conn", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg", RoleId = 1 },
                        new { Id = "107ded11-f698-4020-a5b6-66b70d0afbb9", CreatedAt = new DateTime(2018, 9, 11, 19, 50, 47, 800, DateTimeKind.Local), DisplayName = "Spencer", Email = "Camryn73@hotmail.com", FirstName = "Nikko", IsActive = true, IsDeleted = false, LastName = "Friesen", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg", RoleId = 2 },
                        new { Id = "5cb4609d-26f4-4eda-971d-8c7e56136de3", CreatedAt = new DateTime(2018, 9, 11, 7, 39, 7, 52, DateTimeKind.Local), DisplayName = "Richie", Email = "Herman_Marks@gmail.com", FirstName = "Shanny", IsActive = true, IsDeleted = false, LastName = "Kovacek", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "0260ccd0-3a37-4ed2-ab2f-543810027907", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "666909a1-17b5-41af-8ccb-2e861a540155", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "2ec236a6-25a4-4dc5-8926-af73b29dd42c", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "d77e6e28-4a33-4a48-8263-dbd1d4e1a7c8", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "7883317d-40ed-441a-a54d-7bb483b1863d", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "b828e516-c495-4b5e-adb5-3caa41fb3231", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "df715b76-4cf3-46f9-8850-aac5300375f1", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "7337fdcd-7e5f-4251-b92e-2646668d6715", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "107ded11-f698-4020-a5b6-66b70d0afbb9", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "5cb4609d-26f4-4eda-971d-8c7e56136de3", OrganizationId = 79, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
