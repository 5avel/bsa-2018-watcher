// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180905084742_AddedOrganizationRoleInUserOrganization")]
    partial class AddedOrganizationRoleInUserOrganization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 18, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 49, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 83, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 96, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 35, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 97, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 67, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 5, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 15, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 47, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "7e805303-0570-4faa-b84a-6f5ad7e62ea8", IsDeleted = false, Name = "aliquam", Type = 0 },
                        new { Id = 22, CreatedById = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", IsDeleted = false, Name = "corporis", Type = 0 },
                        new { Id = 23, CreatedById = "96521809-d979-4383-80b5-e67d2a48e739", IsDeleted = false, Name = "sunt", Type = 0 },
                        new { Id = 24, CreatedById = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", IsDeleted = false, Name = "temporibus", Type = 0 },
                        new { Id = 25, CreatedById = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11", IsDeleted = false, Name = "consequatur", Type = 0 },
                        new { Id = 26, CreatedById = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", IsDeleted = false, Name = "repudiandae", Type = 0 },
                        new { Id = 27, CreatedById = "7af7bbf1-98e0-4da7-8c61-b55eab78d218", IsDeleted = false, Name = "perferendis", Type = 0 },
                        new { Id = 28, CreatedById = "3f18d951-ca0e-43d1-af57-8c1f183d2185", IsDeleted = false, Name = "provident", Type = 0 },
                        new { Id = 29, CreatedById = "9b7d527e-72be-4a9c-85a7-75fdabf51004", IsDeleted = false, Name = "dolorem", Type = 0 },
                        new { Id = 30, CreatedById = "7e805303-0570-4faa-b84a-6f5ad7e62ea8", IsDeleted = false, Name = "officia", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 5, 0, 19, 3, 304, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title810" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 4, 22, 25, 33, 845, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title881" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 5, 5, 53, 31, 175, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title928" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 5, 7, 44, 14, 501, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title985" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 5, 5, 19, 18, 597, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title372" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 5, 7, 26, 36, 802, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title387" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 4, 18, 1, 8, 647, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title412" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 4, 23, 14, 8, 646, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title138" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 5, 2, 14, 43, 530, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title404" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 4, 15, 32, 30, 459, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title184" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 5, 1, 6, 21, 277, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Atque assumenda hic ullam mollitia voluptatem rem hic.", UserId = "7e805303-0570-4faa-b84a-6f5ad7e62ea8", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 4, 16, 19, 15, 718, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Molestiae enim delectus ut necessitatibus corporis corrupti.", UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 4, 13, 55, 7, 382, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Illum quis ullam dolor.", UserId = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 5, 10, 3, 31, 336, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aut suscipit corporis aperiam dolorem delectus.", UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 4, 18, 9, 25, 104, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quis asperiores dolores placeat.", UserId = "3f18d951-ca0e-43d1-af57-8c1f183d2185", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 4, 23, 13, 40, 939, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolor et et alias totam quo vitae.", UserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 5, 10, 31, 3, 913, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Blanditiis nam deleniti et occaecati nobis quibusdam architecto ratione aut.", UserId = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 4, 15, 26, 39, 362, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Corporis saepe porro soluta non quos ipsam explicabo excepturi.", UserId = "e269b833-9189-401b-9987-641b5208239b", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 4, 13, 25, 42, 782, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Vero exercitationem cupiditate.", UserId = "3f18d951-ca0e-43d1-af57-8c1f183d2185", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 5, 3, 36, 0, 98, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolor dolorum et molestias voluptate.", UserId = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "a6:f0:2b:f9:6b:6b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", Title = "Instance295" },
                        new { Id = 82, Address = "c0:35:d3:c1:8b:a5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance437" },
                        new { Id = 83, Address = "bd:d8:90:a8:cb:33", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", Title = "Instance395" },
                        new { Id = 84, Address = "c7:3b:ba:3b:68:ad", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", Title = "Instance579" },
                        new { Id = 85, Address = "8a:b5:a3:5b:ff:fc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance762" },
                        new { Id = 86, Address = "c4:b7:fa:a9:04:cd", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance426" },
                        new { Id = 87, Address = "d3:da:c6:d3:3e:84", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance181" },
                        new { Id = 88, Address = "23:d7:10:bb:17:08", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance346" },
                        new { Id = 89, Address = "b9:8e:bd:62:d7:10", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance662" },
                        new { Id = 90, Address = "4d:ff:22:8b:d6:b0", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", Title = "Instance212" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 22, CreatedAt = new DateTime(2018, 9, 5, 7, 52, 5, 614, DateTimeKind.Local), IsDeleted = false, Text = "Minima repellendus repellat.", UserId = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", WasRead = false },
                        new { Id = 32, ChatId = 30, CreatedAt = new DateTime(2018, 9, 5, 9, 49, 59, 792, DateTimeKind.Local), IsDeleted = false, Text = "Sed facilis minus ad accusantium repellendus molestiae repellendus.", UserId = "9b7d527e-72be-4a9c-85a7-75fdabf51004", WasRead = true },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 9, 5, 7, 36, 45, 706, DateTimeKind.Local), IsDeleted = false, Text = "Quibusdam est tempora in quasi.", UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", WasRead = true },
                        new { Id = 34, ChatId = 24, CreatedAt = new DateTime(2018, 9, 4, 17, 10, 3, 14, DateTimeKind.Local), IsDeleted = false, Text = "Nihil ut et aut perspiciatis corporis beatae voluptate.", UserId = "96521809-d979-4383-80b5-e67d2a48e739", WasRead = true },
                        new { Id = 35, ChatId = 28, CreatedAt = new DateTime(2018, 9, 4, 20, 41, 13, 965, DateTimeKind.Local), IsDeleted = false, Text = "Sit animi doloribus fuga odit ipsum culpa.", UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", WasRead = false },
                        new { Id = 36, ChatId = 30, CreatedAt = new DateTime(2018, 9, 4, 18, 32, 18, 105, DateTimeKind.Local), IsDeleted = false, Text = "Eos est ea explicabo pariatur quo.", UserId = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", WasRead = false },
                        new { Id = 37, ChatId = 30, CreatedAt = new DateTime(2018, 9, 5, 10, 43, 4, 334, DateTimeKind.Local), IsDeleted = false, Text = "Qui consequatur aut atque dolorem tempore at et earum occaecati.", UserId = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", WasRead = true },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 9, 4, 23, 2, 18, 10, DateTimeKind.Local), IsDeleted = false, Text = "Quasi recusandae ut neque architecto harum et corrupti.", UserId = "7e805303-0570-4faa-b84a-6f5ad7e62ea8", WasRead = true },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 9, 4, 21, 34, 12, 708, DateTimeKind.Local), IsDeleted = false, Text = "Itaque tempore iste officia nesciunt.", UserId = "96521809-d979-4383-80b5-e67d2a48e739", WasRead = false },
                        new { Id = 40, ChatId = 23, CreatedAt = new DateTime(2018, 9, 5, 11, 30, 7, 696, DateTimeKind.Local), IsDeleted = false, Text = "Esse debitis omnis pariatur necessitatibus delectus aut qui.", UserId = "e269b833-9189-401b-9987-641b5208239b", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 5, 7, 7, 40, 823, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Aut quia nisi voluptates.", UserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 5, 0, 8, 53, 397, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Expedita voluptas laboriosam vel inventore.", UserId = "9b7d527e-72be-4a9c-85a7-75fdabf51004", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 4, 12, 58, 12, 872, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Facilis corrupti possimus neque.", UserId = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 5, 11, 19, 28, 414, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Omnis non ad et.", UserId = "7e805303-0570-4faa-b84a-6f5ad7e62ea8", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 5, 0, 21, 13, 571, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Voluptates eligendi et nemo et id est vel.", UserId = "9b7d527e-72be-4a9c-85a7-75fdabf51004", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 4, 11, 48, 34, 973, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Sint vel quas aliquam architecto ipsum sit veritatis illum.", UserId = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 4, 16, 44, 59, 452, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Nobis rerum atque esse quidem quidem doloribus alias amet ratione.", UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 5, 7, 37, 43, 627, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Voluptates voluptas vel est ut qui provident nemo.", UserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 5, 4, 24, 58, 32, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Pariatur sequi ad consequatur voluptates libero fugiat.", UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 4, 16, 20, 27, 399, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Sapiente quo delectus id.", UserId = "e269b833-9189-401b-9987-641b5208239b", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "3f18d951-ca0e-43d1-af57-8c1f183d2185" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "e269b833-9189-401b-9987-641b5208239b" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "e269b833-9189-401b-9987-641b5208239b" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 0, UserId = "9b7d527e-72be-4a9c-85a7-75fdabf51004" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "e269b833-9189-401b-9987-641b5208239b" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "e269b833-9189-401b-9987-641b5208239b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "837.840.9972", CreatedByUserId = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11", Description = "Quam et occaecati quae accusamus qui id. Aspernatur qui sint qui eligendi tempora aut.", Email = "Elliot.Kuhlman58@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company667", ThemeId = 69, WebSite = "http://celestine.com" },
                        new { Id = 72, ContactNumber = "632-408-0237", CreatedByUserId = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", Description = "", Email = "Zion_Wuckert30@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company616", ThemeId = 65, WebSite = "https://lonie.name" },
                        new { Id = 73, ContactNumber = "846-667-2893 x45166", CreatedByUserId = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", Description = "Necessitatibus rem et in non non ut qui iste aut.", Email = "Jerrold3@gmail.com", IsActive = true, IsDeleted = false, Name = "Company77", ThemeId = 64, WebSite = "https://amaya.biz" },
                        new { Id = 74, ContactNumber = "560-355-1848 x0952", CreatedByUserId = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", Description = "Doloribus sed hic vitae earum harum molestiae. Sapiente sint eum est amet.", Email = "Branson_Lehner@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company604", ThemeId = 70, WebSite = "http://gayle.name" },
                        new { Id = 75, ContactNumber = "1-354-598-0859 x44787", CreatedByUserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218", Description = "Cum consequuntur culpa eligendi.", Email = "Herminia.Davis@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company574", ThemeId = 70, WebSite = "http://cyril.info" },
                        new { Id = 76, ContactNumber = "(949) 855-3491 x815", CreatedByUserId = "e269b833-9189-401b-9987-641b5208239b", Description = "Exercitationem harum sunt repellendus incidunt.", Email = "Roslyn_Gislason22@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company507", ThemeId = 66, WebSite = "https://mikayla.com" },
                        new { Id = 77, ContactNumber = "867.550.3993", CreatedByUserId = "3f18d951-ca0e-43d1-af57-8c1f183d2185", Description = "Enim debitis officia ut mollitia rerum recusandae. Minus molestiae dolorem in nobis non nihil in nihil. Qui ipsa dignissimos sed non.", Email = "Abe.Schuppe68@gmail.com", IsActive = true, IsDeleted = false, Name = "Company14", ThemeId = 67, WebSite = "https://orie.net" },
                        new { Id = 78, ContactNumber = "1-400-888-6450 x00395", CreatedByUserId = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", Description = "Maxime quia et aliquid et rerum quo ratione quia non. Et ipsum voluptatum veritatis quibusdam omnis quasi libero tempora qui. Perspiciatis error sunt autem.", Email = "Russel_Rutherford@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company882", ThemeId = 69, WebSite = "http://lindsay.net" },
                        new { Id = 79, ContactNumber = "1-469-965-4602", CreatedByUserId = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11", Description = "Debitis praesentium excepturi unde harum quas quaerat aliquam aut saepe. Quo ab minus odit nihil fugit laborum dolores.", Email = "Dannie.Schumm44@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company428", ThemeId = 64, WebSite = "https://lambert.net" },
                        new { Id = 80, ContactNumber = "932.488.1340 x4189", CreatedByUserId = "3f18d951-ca0e-43d1-af57-8c1f183d2185", Description = "Maiores et reprehenderit eos nihil sed. Est accusantium doloribus inventore et. Nostrum sit vitae natus veritatis architecto eum placeat. Ullam quibusdam ut voluptas.", Email = "Keegan_Marquardt96@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company554", ThemeId = 66, WebSite = "https://ransom.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRole");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 5, 9, 11, 42, 432, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Enim cumque cum officia eos totam et dolorem ipsam.", UserId = "e269b833-9189-401b-9987-641b5208239b" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 4, 16, 10, 44, 408, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Doloremque aspernatur eum rerum.", UserId = "e269b833-9189-401b-9987-641b5208239b" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 4, 16, 43, 15, 849, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Reprehenderit enim qui sit vero ad rerum sint.", UserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 4, 13, 35, 17, 125, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Beatae sit laborum esse.", UserId = "3f18d951-ca0e-43d1-af57-8c1f183d2185" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 4, 23, 13, 32, 555, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Eligendi reiciendis esse dolor consequatur aut placeat.", UserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 5, 11, 43, 43, 211, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Et voluptatem consectetur sint et sed ea.", UserId = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 5, 11, 19, 40, 571, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Occaecati fuga autem doloremque architecto nulla atque velit.", UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 4, 12, 44, 31, 379, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Ut velit at.", UserId = "7e805303-0570-4faa-b84a-6f5ad7e62ea8" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 5, 5, 25, 46, 887, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Quam aut incidunt saepe placeat aut rerum.", UserId = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 4, 17, 10, 32, 51, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Maiores odit fugiat ipsa praesentium autem aut.", UserId = "263d5e43-099d-4ffb-8607-c0c0da3bdd79" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme39" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme217" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme576" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme669" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme728" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme582" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme844" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme951" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme726" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme685" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", CreatedAt = new DateTime(2018, 9, 4, 11, 58, 1, 571, DateTimeKind.Local), DisplayName = "Gavin", Email = "Tracey75@yahoo.com", FirstName = "Wilford", IsActive = true, IsDeleted = false, LastName = "Jakubowski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg", RoleId = 1 },
                        new { Id = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11", CreatedAt = new DateTime(2018, 9, 5, 4, 13, 3, 746, DateTimeKind.Local), DisplayName = "Omer", Email = "Brenda.Walsh96@yahoo.com", FirstName = "Hipolito", IsActive = true, IsDeleted = false, LastName = "Corwin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg", RoleId = 1 },
                        new { Id = "96521809-d979-4383-80b5-e67d2a48e739", CreatedAt = new DateTime(2018, 9, 4, 16, 32, 10, 479, DateTimeKind.Local), DisplayName = "Mckayla", Email = "Francisco67@yahoo.com", FirstName = "Jay", IsActive = true, IsDeleted = false, LastName = "Mraz", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg", RoleId = 1 },
                        new { Id = "7e805303-0570-4faa-b84a-6f5ad7e62ea8", CreatedAt = new DateTime(2018, 9, 4, 20, 49, 17, 622, DateTimeKind.Local), DisplayName = "Gabrielle", Email = "Cathryn_Walsh@gmail.com", FirstName = "Cleta", IsActive = true, IsDeleted = false, LastName = "Rogahn", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg", RoleId = 1 },
                        new { Id = "7af7bbf1-98e0-4da7-8c61-b55eab78d218", CreatedAt = new DateTime(2018, 9, 5, 0, 10, 46, 890, DateTimeKind.Local), DisplayName = "Marlee", Email = "Gerry63@yahoo.com", FirstName = "Nakia", IsActive = true, IsDeleted = false, LastName = "Wunsch", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg", RoleId = 2 },
                        new { Id = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", CreatedAt = new DateTime(2018, 9, 4, 20, 42, 27, 898, DateTimeKind.Local), DisplayName = "Sadye", Email = "Norval.Torphy31@gmail.com", FirstName = "Aubrey", IsActive = true, IsDeleted = false, LastName = "Treutel", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg", RoleId = 2 },
                        new { Id = "9b7d527e-72be-4a9c-85a7-75fdabf51004", CreatedAt = new DateTime(2018, 9, 4, 19, 11, 37, 881, DateTimeKind.Local), DisplayName = "Noah", Email = "Misty_Littel@hotmail.com", FirstName = "Kody", IsActive = true, IsDeleted = false, LastName = "Ritchie", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg", RoleId = 1 },
                        new { Id = "e269b833-9189-401b-9987-641b5208239b", CreatedAt = new DateTime(2018, 9, 4, 19, 18, 20, 712, DateTimeKind.Local), DisplayName = "Sylvester", Email = "Leopoldo_Blick@hotmail.com", FirstName = "Shaniya", IsActive = true, IsDeleted = false, LastName = "Reichert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg", RoleId = 2 },
                        new { Id = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", CreatedAt = new DateTime(2018, 9, 5, 9, 6, 21, 806, DateTimeKind.Local), DisplayName = "Camron", Email = "Carol.Medhurst30@hotmail.com", FirstName = "Madisen", IsActive = true, IsDeleted = false, LastName = "Kozey", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg", RoleId = 1 },
                        new { Id = "3f18d951-ca0e-43d1-af57-8c1f183d2185", CreatedAt = new DateTime(2018, 9, 5, 2, 12, 36, 41, DateTimeKind.Local), DisplayName = "Litzy", Email = "Jed92@gmail.com", FirstName = "Bennett", IsActive = true, IsDeleted = false, LastName = "Reilly", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "263d5e43-099d-4ffb-8607-c0c0da3bdd79", OrganizationId = 77, OrganizationRoleId = 0 },
                        new { UserId = "c0d63a4f-f64c-49fa-9b42-a4bd8a792a11", OrganizationId = 74, OrganizationRoleId = 0 },
                        new { UserId = "96521809-d979-4383-80b5-e67d2a48e739", OrganizationId = 79, OrganizationRoleId = 0 },
                        new { UserId = "7e805303-0570-4faa-b84a-6f5ad7e62ea8", OrganizationId = 75, OrganizationRoleId = 0 },
                        new { UserId = "7af7bbf1-98e0-4da7-8c61-b55eab78d218", OrganizationId = 73, OrganizationRoleId = 0 },
                        new { UserId = "39724b92-8f5f-4dbe-a3b3-28d8afb62bc7", OrganizationId = 72, OrganizationRoleId = 0 },
                        new { UserId = "9b7d527e-72be-4a9c-85a7-75fdabf51004", OrganizationId = 74, OrganizationRoleId = 0 },
                        new { UserId = "e269b833-9189-401b-9987-641b5208239b", OrganizationId = 73, OrganizationRoleId = 0 },
                        new { UserId = "cdab02f6-9ead-41a4-b11d-de8a83a43ea0", OrganizationId = 77, OrganizationRoleId = 0 },
                        new { UserId = "3f18d951-ca0e-43d1-af57-8c1f183d2185", OrganizationId = 75, OrganizationRoleId = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
