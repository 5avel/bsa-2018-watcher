// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180829214111_RemovedIsActiveFieldFromChat")]
    partial class RemovedIsActiveFieldFromChat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 91, IsDeleted = false, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source3", Threshold = 99, Type = 0 },
                        new { Id = 102, DashboardId = 91, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 75, Type = 0 },
                        new { Id = 103, DashboardId = 99, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 59, Type = 1 },
                        new { Id = 104, DashboardId = 93, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 45, Type = 1 },
                        new { Id = 105, DashboardId = 96, IsDeleted = false, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source3", Threshold = 5, Type = 0 },
                        new { Id = 106, DashboardId = 92, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 29, Type = 1 },
                        new { Id = 107, DashboardId = 99, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source1", Threshold = 36, Type = 1 },
                        new { Id = 108, DashboardId = 96, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 30, Type = 0 },
                        new { Id = 109, DashboardId = 91, IsDeleted = false, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 63, Type = 1 },
                        new { Id = 110, DashboardId = 100, IsDeleted = false, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 82, Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "6891340b-97ec-4e29-8d45-1b09c9f643af", IsDeleted = false, Name = "eum", Type = 0 },
                        new { Id = 22, CreatedById = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", IsDeleted = false, Name = "tempore", Type = 0 },
                        new { Id = 23, CreatedById = "66d92780-d516-442f-a826-8fc9140ef63c", IsDeleted = false, Name = "aspernatur", Type = 0 },
                        new { Id = 24, CreatedById = "bf93ed96-471c-40bb-a305-a93c713ac445", IsDeleted = false, Name = "id", Type = 0 },
                        new { Id = 25, CreatedById = "76ecbd0e-b094-4209-a51c-4cdcedffe3e6", IsDeleted = false, Name = "autem", Type = 0 },
                        new { Id = 26, CreatedById = "66d92780-d516-442f-a826-8fc9140ef63c", IsDeleted = false, Name = "harum", Type = 0 },
                        new { Id = 27, CreatedById = "66d92780-d516-442f-a826-8fc9140ef63c", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 28, CreatedById = "6891340b-97ec-4e29-8d45-1b09c9f643af", IsDeleted = false, Name = "blanditiis", Type = 0 },
                        new { Id = 29, CreatedById = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a", IsDeleted = false, Name = "porro", Type = 0 },
                        new { Id = 30, CreatedById = "76ecbd0e-b094-4209-a51c-4cdcedffe3e6", IsDeleted = false, Name = "accusamus", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 29, 6, 0, 46, 667, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title729" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 29, 10, 42, 9, 210, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title595" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 29, 22, 46, 31, 658, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title355" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 29, 9, 38, 12, 342, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title115" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 29, 12, 29, 28, 63, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title527" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 29, 3, 57, 10, 822, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title534" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 29, 19, 13, 23, 499, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title449" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 29, 17, 18, 21, 168, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title940" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 29, 0, 54, 14, 779, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title152" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 29, 17, 16, 54, 209, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title433" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 29, 4, 43, 52, 970, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Cum adipisci quis voluptatem.", UserId = "bf93ed96-471c-40bb-a305-a93c713ac445", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 29, 6, 11, 5, 727, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Omnis omnis ut voluptatem aut voluptatum blanditiis earum qui nemo.", UserId = "bf93ed96-471c-40bb-a305-a93c713ac445", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 29, 15, 19, 32, 952, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sit dicta ducimus assumenda nihil officiis illum ipsa.", UserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 29, 17, 41, 9, 482, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sint dolor reiciendis autem vero rem.", UserId = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 29, 9, 12, 7, 310, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Debitis sint harum voluptate et earum.", UserId = "76ecbd0e-b094-4209-a51c-4cdcedffe3e6", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 29, 21, 42, 42, 291, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Amet veniam consequuntur.", UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 29, 3, 46, 15, 852, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Officia placeat sint quo a voluptatem fugiat iure quos.", UserId = "66d92780-d516-442f-a826-8fc9140ef63c", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 29, 23, 46, 48, 949, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et nam dicta tempore sit ut ut dolorem esse blanditiis.", UserId = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 29, 5, 38, 4, 811, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Tempora omnis maiores sed omnis aliquid.", UserId = "bf93ed96-471c-40bb-a305-a93c713ac445", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 29, 10, 50, 1, 153, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quia odit tenetur qui.", UserId = "d5099128-cc23-47c3-a1dd-dd3bbe8855bb", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "f5:4e:f5:68:a7:6d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance8" },
                        new { Id = 82, Address = "bf:93:75:44:cb:30", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", Title = "Instance201" },
                        new { Id = 83, Address = "29:0a:12:3c:6e:d8", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", Title = "Instance703" },
                        new { Id = 84, Address = "62:80:bf:1d:7a:72", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", Title = "Instance340" },
                        new { Id = 85, Address = "92:34:52:77:06:fb", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance710" },
                        new { Id = 86, Address = "26:4e:39:5d:12:ea", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance931" },
                        new { Id = 87, Address = "4a:a7:4e:97:f1:3f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance977" },
                        new { Id = 88, Address = "33:cb:36:24:11:f4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance788" },
                        new { Id = 89, Address = "e7:c8:52:c5:75:14", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance211" },
                        new { Id = 90, Address = "36:43:ba:e7:44:ea", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", Title = "Instance43" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 23, CreatedAt = new DateTime(2018, 8, 29, 5, 23, 44, 789, DateTimeKind.Local), IsDeleted = false, Text = "Aperiam cupiditate officiis pariatur assumenda veniam laborum rerum impedit.", UserId = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a", WasRead = false },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 8, 29, 10, 52, 39, 282, DateTimeKind.Local), IsDeleted = false, Text = "Molestiae aperiam est consequatur et deserunt molestiae et architecto ut.", UserId = "6891340b-97ec-4e29-8d45-1b09c9f643af", WasRead = false },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 8, 29, 5, 26, 51, 453, DateTimeKind.Local), IsDeleted = false, Text = "Ipsam consequuntur eum rerum asperiores ut.", UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 8, 29, 22, 5, 25, 941, DateTimeKind.Local), IsDeleted = false, Text = "Consequuntur modi nam cum eum qui placeat adipisci accusantium.", UserId = "6891340b-97ec-4e29-8d45-1b09c9f643af", WasRead = false },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 8, 29, 15, 15, 52, 436, DateTimeKind.Local), IsDeleted = false, Text = "Commodi quam ducimus ut nostrum adipisci cumque libero.", UserId = "6891340b-97ec-4e29-8d45-1b09c9f643af", WasRead = true },
                        new { Id = 36, ChatId = 25, CreatedAt = new DateTime(2018, 8, 29, 22, 41, 20, 839, DateTimeKind.Local), IsDeleted = false, Text = "Facere et maiores incidunt blanditiis.", UserId = "76ecbd0e-b094-4209-a51c-4cdcedffe3e6", WasRead = true },
                        new { Id = 37, ChatId = 30, CreatedAt = new DateTime(2018, 8, 29, 9, 30, 14, 544, DateTimeKind.Local), IsDeleted = false, Text = "Qui qui id dolorem eum repudiandae et quia quisquam rerum.", UserId = "6891340b-97ec-4e29-8d45-1b09c9f643af", WasRead = true },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 8, 29, 23, 44, 15, 610, DateTimeKind.Local), IsDeleted = false, Text = "Eos eos eos blanditiis accusantium ad sed vero voluptatum asperiores.", UserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", WasRead = false },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 8, 29, 11, 23, 8, 55, DateTimeKind.Local), IsDeleted = false, Text = "Eos amet sequi rem ab.", UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1", WasRead = false },
                        new { Id = 40, ChatId = 30, CreatedAt = new DateTime(2018, 8, 29, 3, 9, 19, 643, DateTimeKind.Local), IsDeleted = false, Text = "Optio amet possimus dicta ab quia est repellat voluptas.", UserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 29, 5, 55, 27, 325, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Accusamus nesciunt ipsa cum ut voluptate totam repellat ut natus.", UserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 29, 13, 52, 54, 308, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Voluptatum ut ut nihil deleniti sunt in commodi consequatur quia.", UserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 29, 12, 31, 49, 489, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Exercitationem ratione eius cum omnis molestiae.", UserId = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 29, 10, 30, 30, 906, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Saepe eveniet est error praesentium quo rerum.", UserId = "76ecbd0e-b094-4209-a51c-4cdcedffe3e6", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 29, 12, 32, 1, 461, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Reprehenderit maxime reprehenderit quisquam ut commodi.", UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 29, 22, 31, 35, 34, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Suscipit fugiat quae nihil.", UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 29, 12, 1, 33, 911, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Voluptates voluptate est in est.", UserId = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 29, 4, 3, 33, 81, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Et ut deleniti.", UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 29, 1, 43, 23, 662, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Et in eum.", UserId = "bf93ed96-471c-40bb-a305-a93c713ac445", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 29, 11, 17, 33, 986, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Ex culpa quis.", UserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "66d92780-d516-442f-a826-8fc9140ef63c" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "6891340b-97ec-4e29-8d45-1b09c9f643af" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "d5099128-cc23-47c3-a1dd-dd3bbe8855bb" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "d5099128-cc23-47c3-a1dd-dd3bbe8855bb" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "66d92780-d516-442f-a826-8fc9140ef63c" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "658-715-1340", CreatedByUserId = "6891340b-97ec-4e29-8d45-1b09c9f643af", Description = "Est iste quaerat nulla fugit adipisci nostrum qui harum. Est doloribus aut. Voluptates ipsam exercitationem consectetur aliquam aut qui. Adipisci ut illum aperiam alias quam autem dolorem.", Email = "Jacynthe_Effertz53@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company520", ThemeId = 65, WebSite = "https://dell.biz" },
                        new { Id = 72, ContactNumber = "296-668-0287 x7033", CreatedByUserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", Description = "", Email = "Madeline.Keebler53@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company385", ThemeId = 62, WebSite = "https://libbie.info" },
                        new { Id = 73, ContactNumber = "(815) 725-8203 x758", CreatedByUserId = "66d92780-d516-442f-a826-8fc9140ef63c", Description = "Harum quae nihil nostrum et omnis nisi laboriosam. Voluptate mollitia unde. Aut hic et in hic occaecati et explicabo mollitia.", Email = "Angela.Flatley@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company870", ThemeId = 68, WebSite = "https://deron.org" },
                        new { Id = 74, ContactNumber = "998.274.3017 x01204", CreatedByUserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", Description = "Exercitationem dolor provident aperiam vero aut occaecati.", Email = "Alivia66@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company773", ThemeId = 70, WebSite = "https://geovanny.name" },
                        new { Id = 75, ContactNumber = "307-850-0735 x937", CreatedByUserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", Description = "", Email = "Nakia14@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company304", ThemeId = 63, WebSite = "http://van.net" },
                        new { Id = 76, ContactNumber = "292.917.9441", CreatedByUserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", Description = "Dolor earum repellendus ad laudantium aliquid sequi. Nam voluptates sapiente veritatis. Vel nobis doloribus. Architecto tenetur fugiat dignissimos nihil recusandae vero suscipit voluptatem vel.", Email = "Beau72@gmail.com", IsActive = true, IsDeleted = false, Name = "Company83", ThemeId = 69, WebSite = "http://shanie.com" },
                        new { Id = 77, ContactNumber = "771.899.1309 x5419", CreatedByUserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", Description = "", Email = "Dina.Keebler@gmail.com", IsActive = true, IsDeleted = false, Name = "Company618", ThemeId = 61, WebSite = "https://tremayne.biz" },
                        new { Id = 78, ContactNumber = "539-681-1697 x9404", CreatedByUserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", Description = "Vitae repellendus earum minima consequatur minima voluptatem minus repellat. Incidunt numquam qui. Voluptatum illo dolores iste accusamus dolores laborum iste.", Email = "Kali.Lang@gmail.com", IsActive = true, IsDeleted = false, Name = "Company927", ThemeId = 70, WebSite = "https://sally.net" },
                        new { Id = 79, ContactNumber = "952.913.5979 x82328", CreatedByUserId = "6891340b-97ec-4e29-8d45-1b09c9f643af", Description = "Dolorum magni et non quia aut in.", Email = "Destiney.Yost@gmail.com", IsActive = true, IsDeleted = false, Name = "Company879", ThemeId = 62, WebSite = "http://shayne.name" },
                        new { Id = 80, ContactNumber = "410-758-0927 x9026", CreatedByUserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", Description = "Nisi iusto facere rerum fugit commodi doloribus deleniti at. Quibusdam omnis natus ea fuga qui possimus.", Email = "Turner80@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company892", ThemeId = 63, WebSite = "https://katelin.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 29, 1, 35, 38, 22, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Non qui sed.", UserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 29, 21, 28, 32, 430, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Aut excepturi ut necessitatibus omnis deleniti et.", UserId = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 29, 12, 9, 37, 782, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Minus rem nulla sit quo.", UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 29, 3, 14, 35, 561, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Blanditiis reiciendis quisquam error expedita.", UserId = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 30, 0, 19, 54, 189, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Et quod rem vitae rerum.", UserId = "331debbb-9ef7-4e78-8719-3cd159ac8696" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 29, 22, 18, 49, 545, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Sit iure optio architecto qui eos.", UserId = "bf93ed96-471c-40bb-a305-a93c713ac445" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 29, 1, 54, 47, 939, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Nisi et perferendis et.", UserId = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 29, 9, 6, 34, 356, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Autem nihil ut rerum cumque unde qui non architecto aut.", UserId = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 29, 10, 38, 38, 724, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Velit veritatis exercitationem tempore tempore eum.", UserId = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 30, 0, 9, 58, 218, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Repudiandae culpa perspiciatis aut corrupti dicta cupiditate nemo quibusdam.", UserId = "6891340b-97ec-4e29-8d45-1b09c9f643af" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme225" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme250" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme197" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme232" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme104" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme238" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme3" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme356" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme591" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme985" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", CreatedAt = new DateTime(2018, 8, 29, 13, 41, 11, 293, DateTimeKind.Local), DisplayName = "Francesca", Email = "Kennedi89@hotmail.com", FirstName = "Kiera", IsActive = true, IsDeleted = false, LastName = "Cronin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg", RoleId = 2 },
                        new { Id = "66d92780-d516-442f-a826-8fc9140ef63c", CreatedAt = new DateTime(2018, 8, 29, 19, 43, 1, 729, DateTimeKind.Local), DisplayName = "Nya", Email = "Ursula_Wilderman44@hotmail.com", FirstName = "Maximillia", IsActive = true, IsDeleted = false, LastName = "Dach", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg", RoleId = 2 },
                        new { Id = "76ecbd0e-b094-4209-a51c-4cdcedffe3e6", CreatedAt = new DateTime(2018, 8, 29, 22, 26, 3, 418, DateTimeKind.Local), DisplayName = "Keon", Email = "Theodore_Kirlin56@hotmail.com", FirstName = "Jared", IsActive = true, IsDeleted = false, LastName = "Conroy", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg", RoleId = 1 },
                        new { Id = "f758e32b-a6a2-431c-a408-42e333d7c3d1", CreatedAt = new DateTime(2018, 8, 29, 12, 0, 47, 312, DateTimeKind.Local), DisplayName = "Rebecca", Email = "Federico_Hahn@gmail.com", FirstName = "Hollis", IsActive = true, IsDeleted = false, LastName = "Gulgowski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg", RoleId = 2 },
                        new { Id = "d5099128-cc23-47c3-a1dd-dd3bbe8855bb", CreatedAt = new DateTime(2018, 8, 29, 15, 53, 2, 621, DateTimeKind.Local), DisplayName = "Renee", Email = "Nathan53@hotmail.com", FirstName = "Emilie", IsActive = true, IsDeleted = false, LastName = "Olson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg", RoleId = 1 },
                        new { Id = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f", CreatedAt = new DateTime(2018, 8, 29, 15, 47, 30, 675, DateTimeKind.Local), DisplayName = "Zetta", Email = "Cortney82@gmail.com", FirstName = "Shyann", IsActive = true, IsDeleted = false, LastName = "Mertz", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg", RoleId = 1 },
                        new { Id = "331debbb-9ef7-4e78-8719-3cd159ac8696", CreatedAt = new DateTime(2018, 8, 29, 6, 1, 57, 515, DateTimeKind.Local), DisplayName = "Maci", Email = "Lucy2@gmail.com", FirstName = "Karianne", IsActive = true, IsDeleted = false, LastName = "Koepp", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg", RoleId = 2 },
                        new { Id = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a", CreatedAt = new DateTime(2018, 8, 29, 19, 8, 32, 204, DateTimeKind.Local), DisplayName = "Clara", Email = "Mack39@gmail.com", FirstName = "Haskell", IsActive = true, IsDeleted = false, LastName = "Friesen", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg", RoleId = 2 },
                        new { Id = "bf93ed96-471c-40bb-a305-a93c713ac445", CreatedAt = new DateTime(2018, 8, 29, 22, 12, 12, 198, DateTimeKind.Local), DisplayName = "Damien", Email = "Dangelo74@gmail.com", FirstName = "Brett", IsActive = true, IsDeleted = false, LastName = "Jast", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg", RoleId = 1 },
                        new { Id = "6891340b-97ec-4e29-8d45-1b09c9f643af", CreatedAt = new DateTime(2018, 8, 29, 12, 10, 6, 871, DateTimeKind.Local), DisplayName = "Forest", Email = "Leonie.Roob84@gmail.com", FirstName = "Deangelo", IsActive = true, IsDeleted = false, LastName = "Carroll", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "6a2284f4-a3a2-428a-a9d7-bb60d27521d4", OrganizationId = 78 },
                        new { UserId = "66d92780-d516-442f-a826-8fc9140ef63c", OrganizationId = 74 },
                        new { UserId = "76ecbd0e-b094-4209-a51c-4cdcedffe3e6", OrganizationId = 75 },
                        new { UserId = "f758e32b-a6a2-431c-a408-42e333d7c3d1", OrganizationId = 75 },
                        new { UserId = "d5099128-cc23-47c3-a1dd-dd3bbe8855bb", OrganizationId = 74 },
                        new { UserId = "e7cd719e-8e07-42fe-b4c4-0d9388477b7f", OrganizationId = 74 },
                        new { UserId = "331debbb-9ef7-4e78-8719-3cd159ac8696", OrganizationId = 77 },
                        new { UserId = "cedb0948-5d41-40ad-8e8a-4e0d08820a7a", OrganizationId = 76 },
                        new { UserId = "bf93ed96-471c-40bb-a305-a93c713ac445", OrganizationId = 79 },
                        new { UserId = "6891340b-97ec-4e29-8d45-1b09c9f643af", OrganizationId = 71 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
