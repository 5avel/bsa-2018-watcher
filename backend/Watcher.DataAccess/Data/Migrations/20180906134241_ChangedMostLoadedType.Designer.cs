// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180906134241_ChangedMostLoadedType")]
    partial class ChangedMostLoadedType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 87, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 50, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 47, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 40, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 34, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 87, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 69, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 99, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 82, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 81, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "a5115d99-ad29-4ee1-a36c-bf19d9ed9024", IsDeleted = false, Name = "rem", Type = 0 },
                        new { Id = 22, CreatedById = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5", IsDeleted = false, Name = "suscipit", Type = 0 },
                        new { Id = 23, CreatedById = "9c25aab1-c9de-4f92-ad92-552cff82c801", IsDeleted = false, Name = "quidem", Type = 0 },
                        new { Id = 24, CreatedById = "bd968176-81d7-4c5d-bd2b-b20285d2d530", IsDeleted = false, Name = "est", Type = 0 },
                        new { Id = 25, CreatedById = "9c25aab1-c9de-4f92-ad92-552cff82c801", IsDeleted = false, Name = "magni", Type = 0 },
                        new { Id = 26, CreatedById = "336b6819-321b-4ad4-8bb5-035ad64d6554", IsDeleted = false, Name = "sit", Type = 0 },
                        new { Id = 27, CreatedById = "336b6819-321b-4ad4-8bb5-035ad64d6554", IsDeleted = false, Name = "voluptate", Type = 0 },
                        new { Id = 28, CreatedById = "709d2130-1cbc-440b-bcdc-59a22015fb59", IsDeleted = false, Name = "fugiat", Type = 0 },
                        new { Id = 29, CreatedById = "a5115d99-ad29-4ee1-a36c-bf19d9ed9024", IsDeleted = false, Name = "rerum", Type = 0 },
                        new { Id = 30, CreatedById = "710dd97d-5260-4f63-b41f-fad31ccb362b", IsDeleted = false, Name = "expedita", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 6, 4, 55, 40, 291, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title883" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 5, 21, 51, 7, 105, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title569" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 6, 2, 46, 36, 694, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title244" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 6, 8, 52, 8, 504, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title654" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 6, 14, 12, 27, 381, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title696" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 6, 12, 41, 59, 429, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title987" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 6, 8, 27, 49, 610, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title4" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 5, 22, 43, 16, 602, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title681" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 6, 16, 30, 35, 174, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title199" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 5, 23, 27, 12, 586, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title41" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 6, 14, 25, 45, 719, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ipsum aperiam pariatur deserunt laboriosam soluta facilis tempore.", UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 5, 21, 56, 58, 642, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatem occaecati officiis accusamus et sed.", UserId = "336b6819-321b-4ad4-8bb5-035ad64d6554", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 6, 8, 28, 52, 629, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sunt voluptas itaque commodi.", UserId = "710dd97d-5260-4f63-b41f-fad31ccb362b", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 5, 19, 57, 46, 172, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quo id est aliquid architecto in eum autem.", UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 6, 0, 41, 27, 757, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eos nulla ipsam maiores iure.", UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 6, 9, 33, 53, 406, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Excepturi quis quis non ut voluptatem.", UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 6, 10, 44, 39, 56, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sit aspernatur atque.", UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 5, 17, 53, 25, 316, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aut et voluptate nesciunt commodi eos eos et alias quod.", UserId = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 5, 18, 55, 53, 284, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Molestiae qui qui enim omnis.", UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 5, 19, 27, 17, 246, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Totam cum nisi aperiam omnis.", UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "5d:80:e7:21:37:15", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance680" },
                        new { Id = 82, Address = "84:f9:9f:77:fe:8e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", Title = "Instance781" },
                        new { Id = 83, Address = "b9:7b:96:db:5b:65", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", Title = "Instance783" },
                        new { Id = 84, Address = "e3:ae:b9:15:00:b7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance772" },
                        new { Id = 85, Address = "62:5d:97:00:53:47", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance194" },
                        new { Id = 86, Address = "7f:8f:9a:7b:03:e1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance64" },
                        new { Id = 87, Address = "41:c5:0e:b5:7e:d5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance772" },
                        new { Id = 88, Address = "98:41:1f:06:d0:5b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance464" },
                        new { Id = 89, Address = "49:26:a6:12:92:53", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance532" },
                        new { Id = 90, Address = "cd:ea:87:5f:81:9d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance68" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 29, CreatedAt = new DateTime(2018, 9, 6, 5, 33, 27, 589, DateTimeKind.Local), IsDeleted = false, Text = "Nostrum et at quia et dolor provident.", UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530", WasRead = false },
                        new { Id = 32, ChatId = 27, CreatedAt = new DateTime(2018, 9, 6, 6, 37, 0, 265, DateTimeKind.Local), IsDeleted = false, Text = "Quia ut debitis quo ratione aliquam quam.", UserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", WasRead = true },
                        new { Id = 33, ChatId = 21, CreatedAt = new DateTime(2018, 9, 5, 16, 46, 39, 272, DateTimeKind.Local), IsDeleted = false, Text = "Voluptas sed omnis.", UserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", WasRead = true },
                        new { Id = 34, ChatId = 29, CreatedAt = new DateTime(2018, 9, 6, 16, 35, 9, 346, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatum laboriosam sit soluta deleniti qui eos doloremque sed fuga.", UserId = "709d2130-1cbc-440b-bcdc-59a22015fb59", WasRead = false },
                        new { Id = 35, ChatId = 23, CreatedAt = new DateTime(2018, 9, 6, 13, 6, 58, 814, DateTimeKind.Local), IsDeleted = false, Text = "Non tenetur molestiae.", UserId = "709d2130-1cbc-440b-bcdc-59a22015fb59", WasRead = true },
                        new { Id = 36, ChatId = 25, CreatedAt = new DateTime(2018, 9, 6, 16, 35, 32, 858, DateTimeKind.Local), IsDeleted = false, Text = "Et quisquam qui suscipit.", UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", WasRead = false },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 9, 6, 8, 54, 16, 442, DateTimeKind.Local), IsDeleted = false, Text = "Assumenda laboriosam ab maiores quisquam velit.", UserId = "ab77a1b0-8a1b-46e8-a340-febd2c1d3ac7", WasRead = true },
                        new { Id = 38, ChatId = 25, CreatedAt = new DateTime(2018, 9, 6, 10, 55, 57, 0, DateTimeKind.Local), IsDeleted = false, Text = "Quibusdam ut architecto.", UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", WasRead = true },
                        new { Id = 39, ChatId = 26, CreatedAt = new DateTime(2018, 9, 6, 11, 51, 2, 822, DateTimeKind.Local), IsDeleted = false, Text = "Architecto unde eveniet est.", UserId = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5", WasRead = false },
                        new { Id = 40, ChatId = 25, CreatedAt = new DateTime(2018, 9, 6, 14, 17, 58, 869, DateTimeKind.Local), IsDeleted = false, Text = "Atque dolor accusantium optio doloremque dolore labore perspiciatis.", UserId = "710dd97d-5260-4f63-b41f-fad31ccb362b", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 5, 19, 22, 10, 338, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Non alias minima.", UserId = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 6, 3, 45, 15, 299, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Minus quaerat id nemo perferendis dolorum quasi iste.", UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 6, 15, 58, 55, 868, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Odit vel voluptatem tempora recusandae sit.", UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 6, 0, 57, 2, 275, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Earum veritatis rem animi eaque.", UserId = "ab77a1b0-8a1b-46e8-a340-febd2c1d3ac7", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 6, 12, 7, 48, 125, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Dolor earum omnis accusamus quisquam excepturi nesciunt rerum.", UserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 5, 22, 5, 5, 707, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Asperiores vitae dolorem quia dolore inventore.", UserId = "ab77a1b0-8a1b-46e8-a340-febd2c1d3ac7", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 6, 7, 16, 44, 806, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Rerum totam iusto ipsam tempore quo esse culpa esse magnam.", UserId = "336b6819-321b-4ad4-8bb5-035ad64d6554", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 5, 20, 33, 47, 989, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Nisi earum et quo est ut.", UserId = "336b6819-321b-4ad4-8bb5-035ad64d6554", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 5, 18, 58, 18, 353, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Hic voluptatibus facilis ad autem mollitia provident aut et.", UserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 6, 5, 58, 39, 80, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Ea voluptas quia tempora est soluta.", UserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "a5115d99-ad29-4ee1-a36c-bf19d9ed9024" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-334-416-3124 x30640", CreatedByUserId = "709d2130-1cbc-440b-bcdc-59a22015fb59", Description = "Laboriosam laborum quia aut quia sed laudantium quae odit consequuntur. Ullam aut molestiae consequatur qui dolorum labore dolorem magnam.", Email = "Brittany74@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company811", ThemeId = 69, WebSite = "https://clemens.com" },
                        new { Id = 72, ContactNumber = "859.789.0940 x5583", CreatedByUserId = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5", Description = "", Email = "Damon_McClure@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company643", ThemeId = 70, WebSite = "http://mona.info" },
                        new { Id = 73, ContactNumber = "273-245-1772 x8273", CreatedByUserId = "336b6819-321b-4ad4-8bb5-035ad64d6554", Description = "Aspernatur et impedit nulla natus blanditiis alias aliquid omnis.", Email = "Eduardo_Gutmann@gmail.com", IsActive = true, IsDeleted = false, Name = "Company983", ThemeId = 66, WebSite = "http://jovan.org" },
                        new { Id = 74, ContactNumber = "1-422-471-9590", CreatedByUserId = "709d2130-1cbc-440b-bcdc-59a22015fb59", Description = "Molestiae vel eos veritatis natus odit quam nulla ut. Rerum culpa dolor. Provident voluptatem magnam dignissimos tenetur.", Email = "Shaylee.Goyette89@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company467", ThemeId = 70, WebSite = "http://dejuan.com" },
                        new { Id = 75, ContactNumber = "644-784-3183 x936", CreatedByUserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", Description = "Qui harum est. Quas sunt perferendis repudiandae sapiente. Error facere ipsam eum ut sed.", Email = "Elmore18@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company468", ThemeId = 65, WebSite = "https://maiya.name" },
                        new { Id = 76, ContactNumber = "(696) 928-5940 x3584", CreatedByUserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530", Description = "", Email = "Scot_Bergnaum@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company219", ThemeId = 67, WebSite = "http://nikki.net" },
                        new { Id = 77, ContactNumber = "532-524-4611", CreatedByUserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", Description = "Non dolorem voluptate necessitatibus blanditiis et vel veritatis. Quia sunt reprehenderit. Iste modi aspernatur sed. Et commodi maiores maxime doloribus et asperiores ipsam error explicabo.", Email = "Avery.Harvey66@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company17", ThemeId = 67, WebSite = "https://josie.name" },
                        new { Id = 78, ContactNumber = "1-623-390-7130", CreatedByUserId = "a5115d99-ad29-4ee1-a36c-bf19d9ed9024", Description = "", Email = "Tamia48@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company538", ThemeId = 66, WebSite = "https://cory.org" },
                        new { Id = 79, ContactNumber = "326-906-0762 x4673", CreatedByUserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530", Description = "", Email = "Niko5@gmail.com", IsActive = true, IsDeleted = false, Name = "Company696", ThemeId = 69, WebSite = "http://kacie.info" },
                        new { Id = 80, ContactNumber = "(997) 861-9701", CreatedByUserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", Description = "Voluptate qui commodi. Eos iusto velit voluptas. Adipisci quis eum nulla aliquam minus qui inventore aliquam.", Email = "Genevieve.Kiehn41@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company911", ThemeId = 69, WebSite = "https://montana.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 6, 9, 45, 43, 63, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Assumenda reprehenderit consequatur.", UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 5, 17, 51, 58, 801, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Voluptatibus molestias modi in autem accusamus consequatur consectetur qui in.", UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 5, 17, 19, 11, 641, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Dolorem nihil laboriosam voluptatem animi laboriosam reprehenderit et consequuntur qui.", UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 6, 6, 42, 43, 945, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Ut rerum et blanditiis.", UserId = "709d2130-1cbc-440b-bcdc-59a22015fb59" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 6, 9, 38, 4, 70, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Omnis sit debitis atque aut atque rerum harum dolorem.", UserId = "710dd97d-5260-4f63-b41f-fad31ccb362b" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 6, 4, 41, 1, 314, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Est nam ut nostrum ipsum non sint eum rerum animi.", UserId = "a5115d99-ad29-4ee1-a36c-bf19d9ed9024" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 6, 6, 5, 23, 906, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Qui est dolores quia et voluptate et voluptatem aut.", UserId = "336b6819-321b-4ad4-8bb5-035ad64d6554" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 6, 12, 43, 57, 851, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Sed quos possimus soluta qui quis exercitationem distinctio veniam distinctio.", UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 6, 4, 51, 11, 571, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Autem repudiandae minus autem quasi aut facilis.", UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 6, 3, 51, 22, 712, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Et omnis officiis.", UserId = "709d2130-1cbc-440b-bcdc-59a22015fb59" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme173" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme891" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme129" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme111" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme855" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme65" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme625" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme278" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme628" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme519" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", CreatedAt = new DateTime(2018, 9, 6, 2, 43, 15, 725, DateTimeKind.Local), DisplayName = "Florencio", Email = "Wilfrid5@gmail.com", FirstName = "Linda", IsActive = true, IsDeleted = false, LastName = "Morar", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg", RoleId = 2 },
                        new { Id = "336b6819-321b-4ad4-8bb5-035ad64d6554", CreatedAt = new DateTime(2018, 9, 6, 11, 17, 1, 331, DateTimeKind.Local), DisplayName = "Joan", Email = "Ruben6@yahoo.com", FirstName = "Camilla", IsActive = true, IsDeleted = false, LastName = "Hodkiewicz", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg", RoleId = 1 },
                        new { Id = "bd968176-81d7-4c5d-bd2b-b20285d2d530", CreatedAt = new DateTime(2018, 9, 6, 3, 13, 15, 990, DateTimeKind.Local), DisplayName = "Jayde", Email = "Caesar.Bauch@hotmail.com", FirstName = "Josephine", IsActive = true, IsDeleted = false, LastName = "Senger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg", RoleId = 1 },
                        new { Id = "ab77a1b0-8a1b-46e8-a340-febd2c1d3ac7", CreatedAt = new DateTime(2018, 9, 6, 4, 38, 34, 697, DateTimeKind.Local), DisplayName = "Antonia", Email = "Marcelle.Bechtelar83@gmail.com", FirstName = "Deanna", IsActive = true, IsDeleted = false, LastName = "Kessler", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg", RoleId = 2 },
                        new { Id = "a5115d99-ad29-4ee1-a36c-bf19d9ed9024", CreatedAt = new DateTime(2018, 9, 5, 21, 43, 29, 742, DateTimeKind.Local), DisplayName = "Justen", Email = "Bernhard_Hoeger@gmail.com", FirstName = "Sandrine", IsActive = true, IsDeleted = false, LastName = "Kling", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg", RoleId = 1 },
                        new { Id = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", CreatedAt = new DateTime(2018, 9, 6, 7, 9, 33, 50, DateTimeKind.Local), DisplayName = "Myrtie", Email = "Stan_Brown@hotmail.com", FirstName = "Avery", IsActive = true, IsDeleted = false, LastName = "Lemke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg", RoleId = 2 },
                        new { Id = "709d2130-1cbc-440b-bcdc-59a22015fb59", CreatedAt = new DateTime(2018, 9, 6, 16, 10, 58, 572, DateTimeKind.Local), DisplayName = "Donna", Email = "Juanita69@yahoo.com", FirstName = "Bridget", IsActive = true, IsDeleted = false, LastName = "Berge", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg", RoleId = 1 },
                        new { Id = "710dd97d-5260-4f63-b41f-fad31ccb362b", CreatedAt = new DateTime(2018, 9, 6, 3, 44, 55, 798, DateTimeKind.Local), DisplayName = "Karianne", Email = "Aisha.Johnston@yahoo.com", FirstName = "Amani", IsActive = true, IsDeleted = false, LastName = "Moore", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg", RoleId = 1 },
                        new { Id = "9c25aab1-c9de-4f92-ad92-552cff82c801", CreatedAt = new DateTime(2018, 9, 6, 7, 39, 27, 741, DateTimeKind.Local), DisplayName = "Michele", Email = "Antoinette.Bechtelar87@hotmail.com", FirstName = "Dusty", IsActive = true, IsDeleted = false, LastName = "Wolf", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg", RoleId = 1 },
                        new { Id = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5", CreatedAt = new DateTime(2018, 9, 6, 13, 23, 1, 557, DateTimeKind.Local), DisplayName = "Nelson", Email = "Ruthie.Bogan@yahoo.com", FirstName = "Emmanuel", IsActive = true, IsDeleted = false, LastName = "Konopelski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "e7c95ed4-eb74-4d7d-8e43-54920f6130f6", OrganizationId = 76 },
                        new { UserId = "336b6819-321b-4ad4-8bb5-035ad64d6554", OrganizationId = 73 },
                        new { UserId = "bd968176-81d7-4c5d-bd2b-b20285d2d530", OrganizationId = 79 },
                        new { UserId = "ab77a1b0-8a1b-46e8-a340-febd2c1d3ac7", OrganizationId = 73 },
                        new { UserId = "a5115d99-ad29-4ee1-a36c-bf19d9ed9024", OrganizationId = 76 },
                        new { UserId = "ff9b7cd1-e6d4-4abe-afaa-34f8291ff90b", OrganizationId = 71 },
                        new { UserId = "709d2130-1cbc-440b-bcdc-59a22015fb59", OrganizationId = 76 },
                        new { UserId = "710dd97d-5260-4f63-b41f-fad31ccb362b", OrganizationId = 72 },
                        new { UserId = "9c25aab1-c9de-4f92-ad92-552cff82c801", OrganizationId = 71 },
                        new { UserId = "6ac0b034-9498-4ce8-bbc1-b627c976d8c5", OrganizationId = 77 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
