// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180905104716_OrganizationRole")]
    partial class OrganizationRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 43, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 1, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 99, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 49, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 20, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 42, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 66, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 56, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 65, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 66, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "8ce60506-64fa-4b47-a167-f77a2bbe46bc", IsDeleted = false, Name = "possimus", Type = 0 },
                        new { Id = 22, CreatedById = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", IsDeleted = false, Name = "in", Type = 0 },
                        new { Id = 23, CreatedById = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", IsDeleted = false, Name = "voluptas", Type = 0 },
                        new { Id = 24, CreatedById = "307ee358-2383-4f80-b94f-26f489bdb30f", IsDeleted = false, Name = "voluptate", Type = 0 },
                        new { Id = 25, CreatedById = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc", IsDeleted = false, Name = "ea", Type = 0 },
                        new { Id = 26, CreatedById = "52e27198-436d-4714-a6e7-e0d0738b847f", IsDeleted = false, Name = "alias", Type = 0 },
                        new { Id = 27, CreatedById = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", IsDeleted = false, Name = "voluptatem", Type = 0 },
                        new { Id = 28, CreatedById = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", IsDeleted = false, Name = "nam", Type = 0 },
                        new { Id = 29, CreatedById = "b3731d39-39d1-491c-950b-719b0606e9c5", IsDeleted = false, Name = "mollitia", Type = 0 },
                        new { Id = 30, CreatedById = "89babdf6-31d6-45d2-a725-16c5e80ea915", IsDeleted = false, Name = "omnis", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 5, 6, 43, 47, 22, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title556" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 5, 2, 4, 39, 669, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title712" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 5, 12, 52, 40, 361, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title656" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 4, 21, 22, 19, 518, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title746" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 5, 3, 10, 17, 995, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title906" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 5, 3, 32, 29, 301, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title745" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 4, 14, 19, 38, 8, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title101" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 4, 23, 24, 4, 133, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title940" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 5, 12, 26, 51, 702, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title868" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 5, 2, 24, 44, 677, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title17" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 5, 9, 59, 20, 95, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Magnam repellendus est suscipit cupiditate molestiae ad molestias.", UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 4, 19, 6, 16, 212, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eaque dolor amet.", UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 4, 17, 24, 56, 906, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Alias qui pariatur iusto.", UserId = "b57b3a69-a3c9-4efd-b242-0fc6b368ff92", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 4, 21, 10, 32, 102, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ea rerum assumenda perferendis ut.", UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 5, 11, 27, 57, 402, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "In rerum repellendus possimus hic aut suscipit nisi numquam.", UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 4, 18, 58, 19, 102, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Laborum voluptates quae.", UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 4, 23, 55, 2, 510, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Necessitatibus eius labore velit adipisci ea eum aliquid recusandae.", UserId = "89babdf6-31d6-45d2-a725-16c5e80ea915", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 4, 16, 17, 46, 648, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Delectus totam illo adipisci rerum.", UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 5, 2, 19, 7, 612, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Cum architecto libero.", UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 4, 14, 8, 28, 595, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quasi molestiae nobis dolores eveniet.", UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "61:d7:d8:5f:a4:61", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance361" },
                        new { Id = 82, Address = "70:53:49:f9:b8:1c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Linux", Title = "Instance960" },
                        new { Id = 83, Address = "e3:bd:e5:dc:2a:a1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance320" },
                        new { Id = 84, Address = "ec:2e:59:8e:d1:6f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance840" },
                        new { Id = 85, Address = "47:7d:20:a1:8c:dc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance784" },
                        new { Id = 86, Address = "e0:26:e3:79:24:a3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", Title = "Instance773" },
                        new { Id = 87, Address = "3d:8a:bd:92:33:41", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance209" },
                        new { Id = 88, Address = "08:38:5e:d9:9b:65", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", Title = "Instance157" },
                        new { Id = 89, Address = "2f:cc:eb:fe:82:c6", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance311" },
                        new { Id = 90, Address = "7c:17:e5:c5:3a:bd", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Linux", Title = "Instance415" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 23, CreatedAt = new DateTime(2018, 9, 4, 21, 19, 55, 38, DateTimeKind.Local), IsDeleted = false, Text = "Odit ipsum magni eum est delectus.", UserId = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc", WasRead = true },
                        new { Id = 32, ChatId = 21, CreatedAt = new DateTime(2018, 9, 5, 13, 14, 42, 109, DateTimeKind.Local), IsDeleted = false, Text = "Ut in et aperiam aut rem ullam ipsa iusto.", UserId = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc", WasRead = false },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 9, 4, 15, 22, 32, 910, DateTimeKind.Local), IsDeleted = false, Text = "Est temporibus deserunt repellat.", UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8", WasRead = false },
                        new { Id = 34, ChatId = 22, CreatedAt = new DateTime(2018, 9, 5, 10, 36, 8, 508, DateTimeKind.Local), IsDeleted = false, Text = "Est et enim dolor beatae quisquam.", UserId = "b57b3a69-a3c9-4efd-b242-0fc6b368ff92", WasRead = true },
                        new { Id = 35, ChatId = 22, CreatedAt = new DateTime(2018, 9, 5, 10, 49, 51, 602, DateTimeKind.Local), IsDeleted = false, Text = "Quia eos qui et.", UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8", WasRead = false },
                        new { Id = 36, ChatId = 27, CreatedAt = new DateTime(2018, 9, 5, 6, 33, 39, 8, DateTimeKind.Local), IsDeleted = false, Text = "Impedit vitae voluptatem est nam eaque dolor est.", UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", WasRead = false },
                        new { Id = 37, ChatId = 29, CreatedAt = new DateTime(2018, 9, 4, 22, 36, 26, 423, DateTimeKind.Local), IsDeleted = false, Text = "Molestiae delectus delectus cumque exercitationem modi quia.", UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", WasRead = true },
                        new { Id = 38, ChatId = 25, CreatedAt = new DateTime(2018, 9, 4, 20, 2, 47, 147, DateTimeKind.Local), IsDeleted = false, Text = "Eaque repellendus reprehenderit sapiente aliquid.", UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", WasRead = false },
                        new { Id = 39, ChatId = 27, CreatedAt = new DateTime(2018, 9, 5, 1, 59, 37, 774, DateTimeKind.Local), IsDeleted = false, Text = "Similique sint nam excepturi eaque perspiciatis animi ducimus eos.", UserId = "b57b3a69-a3c9-4efd-b242-0fc6b368ff92", WasRead = true },
                        new { Id = 40, ChatId = 21, CreatedAt = new DateTime(2018, 9, 5, 8, 28, 47, 861, DateTimeKind.Local), IsDeleted = false, Text = "Nam rerum eum ut in rem.", UserId = "8ce60506-64fa-4b47-a167-f77a2bbe46bc", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 5, 13, 27, 49, 68, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Soluta harum beatae esse quod enim occaecati illum voluptas.", UserId = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 4, 19, 45, 39, 412, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Omnis dolores officia sapiente recusandae dignissimos veniam similique quidem eligendi.", UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 5, 3, 59, 52, 324, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Doloribus cupiditate officia magnam laudantium.", UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 4, 22, 21, 21, 456, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Minima velit dignissimos magnam est et eos beatae beatae.", UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 5, 12, 57, 25, 749, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Quasi accusamus vel adipisci veniam ut quae earum voluptas.", UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 4, 22, 25, 14, 44, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Exercitationem aliquam voluptas odit est rerum repellendus.", UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 4, 20, 6, 50, 697, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Consectetur deserunt tenetur est et tempore.", UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 5, 10, 45, 49, 436, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Qui porro iusto ut.", UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 5, 11, 34, 16, 876, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Hic autem in nostrum nesciunt quia est ipsam aut accusamus.", UserId = "b57b3a69-a3c9-4efd-b242-0fc6b368ff92", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 5, 4, 25, 39, 387, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Ipsam voluptas consequatur est enim enim quia et ullam.", UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "52e27198-436d-4714-a6e7-e0d0738b847f" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "b3731d39-39d1-491c-950b-719b0606e9c5" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "52e27198-436d-4714-a6e7-e0d0738b847f" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "52e27198-436d-4714-a6e7-e0d0738b847f" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "8ce60506-64fa-4b47-a167-f77a2bbe46bc" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "307ee358-2383-4f80-b94f-26f489bdb30f" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "334-328-8431", CreatedByUserId = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc", Description = "", Email = "Chanel_Kuhn63@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company414", ThemeId = 69, WebSite = "https://rey.name" },
                        new { Id = 72, ContactNumber = "894.531.1390 x3861", CreatedByUserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", Description = "Molestiae fugiat exercitationem veniam quia placeat minima. Alias quae impedit cum porro enim. Voluptas eveniet in laborum aut repudiandae. Voluptatem sit aut aut harum at.", Email = "Thomas24@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company4", ThemeId = 62, WebSite = "https://freeda.biz" },
                        new { Id = 73, ContactNumber = "544-466-5590 x515", CreatedByUserId = "b57b3a69-a3c9-4efd-b242-0fc6b368ff92", Description = "Fugit enim consequatur fugit nihil illum aut consequuntur. Deserunt sed maiores molestias eligendi saepe repellat provident tempore corrupti.", Email = "Lavern.Hand0@gmail.com", IsActive = true, IsDeleted = false, Name = "Company920", ThemeId = 69, WebSite = "https://arnold.com" },
                        new { Id = 74, ContactNumber = "897.429.7651 x48560", CreatedByUserId = "89babdf6-31d6-45d2-a725-16c5e80ea915", Description = "Quasi sit ducimus. Perspiciatis qui aliquid. Eius consequuntur voluptatem quisquam placeat ad est fuga. Dolor labore id.", Email = "Xander13@gmail.com", IsActive = true, IsDeleted = false, Name = "Company761", ThemeId = 68, WebSite = "https://cyrus.org" },
                        new { Id = 75, ContactNumber = "225-882-4609", CreatedByUserId = "b3731d39-39d1-491c-950b-719b0606e9c5", Description = "Rerum consequatur necessitatibus facere modi esse atque. Qui recusandae minima blanditiis atque incidunt consequuntur consequuntur quasi. Est quibusdam hic et impedit quos cupiditate odit incidunt voluptates. Magni consequuntur et porro voluptate asperiores est consequatur provident.", Email = "Harvey72@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company560", ThemeId = 62, WebSite = "https://ericka.biz" },
                        new { Id = 76, ContactNumber = "(563) 213-2115", CreatedByUserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", Description = "", Email = "Berenice.Kutch65@gmail.com", IsActive = true, IsDeleted = false, Name = "Company843", ThemeId = 69, WebSite = "http://ena.name" },
                        new { Id = 77, ContactNumber = "597.605.7450 x468", CreatedByUserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", Description = "Esse corporis eum perferendis enim voluptas quasi. Voluptatem consequatur sapiente esse et. Alias sunt ut.", Email = "Dax53@gmail.com", IsActive = true, IsDeleted = false, Name = "Company478", ThemeId = 61, WebSite = "http://haleigh.org" },
                        new { Id = 78, ContactNumber = "(260) 482-0362", CreatedByUserId = "b3731d39-39d1-491c-950b-719b0606e9c5", Description = "Ut assumenda aut nesciunt sequi.", Email = "Ivory_Bayer@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company962", ThemeId = 66, WebSite = "https://hank.net" },
                        new { Id = 79, ContactNumber = "(859) 796-7617 x454", CreatedByUserId = "307ee358-2383-4f80-b94f-26f489bdb30f", Description = "Sed et soluta recusandae ducimus facilis odit. Modi id corrupti dolores doloribus aut rerum vel omnis. Non quos est est alias eum nihil autem omnis aliquid.", Email = "Ophelia1@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company506", ThemeId = 61, WebSite = "https://ethelyn.info" },
                        new { Id = 80, ContactNumber = "(834) 417-5237 x5129", CreatedByUserId = "8ce60506-64fa-4b47-a167-f77a2bbe46bc", Description = "Pariatur excepturi quasi sunt possimus maiores. Minus ipsam dolores a.", Email = "Alexandrine.Schneider@gmail.com", IsActive = true, IsDeleted = false, Name = "Company874", ThemeId = 64, WebSite = "http://vesta.net" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 5, 9, 31, 3, 983, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Et consequuntur laborum maiores eligendi eum non animi.", UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 5, 0, 34, 1, 176, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Magni enim voluptatibus quam ut voluptatem eum animi ipsum vel.", UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 4, 15, 33, 15, 700, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Sit ut nam odio soluta ipsum et ad nam.", UserId = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 4, 15, 55, 8, 986, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Perferendis explicabo beatae eveniet.", UserId = "8ce60506-64fa-4b47-a167-f77a2bbe46bc" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 4, 19, 52, 19, 935, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Possimus rerum ut tempora.", UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 4, 15, 23, 30, 324, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Maiores in pariatur quia quo ab accusantium.", UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 5, 12, 29, 21, 204, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Explicabo at est.", UserId = "307ee358-2383-4f80-b94f-26f489bdb30f" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 5, 4, 11, 18, 556, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Consequatur molestias sunt sint rerum rem aut est in a.", UserId = "8ce60506-64fa-4b47-a167-f77a2bbe46bc" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 4, 14, 37, 47, 174, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Et placeat cum aliquid minus ducimus consequatur.", UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 5, 11, 12, 57, 670, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Fugiat ad qui ex.", UserId = "307ee358-2383-4f80-b94f-26f489bdb30f" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme611" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme432" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme107" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme533" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme25" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme104" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme439" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme199" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme68" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme338" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", CreatedAt = new DateTime(2018, 9, 5, 0, 14, 16, 920, DateTimeKind.Local), DisplayName = "Ulices", Email = "Ayla.Lebsack@gmail.com", FirstName = "Salvatore", IsActive = true, IsDeleted = false, LastName = "Grant", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg", RoleId = 1 },
                        new { Id = "89babdf6-31d6-45d2-a725-16c5e80ea915", CreatedAt = new DateTime(2018, 9, 4, 21, 12, 16, 512, DateTimeKind.Local), DisplayName = "Ottis", Email = "Quinton.Jakubowski90@gmail.com", FirstName = "Nils", IsActive = true, IsDeleted = false, LastName = "Bogan", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg", RoleId = 2 },
                        new { Id = "8ce60506-64fa-4b47-a167-f77a2bbe46bc", CreatedAt = new DateTime(2018, 9, 5, 10, 52, 38, 973, DateTimeKind.Local), DisplayName = "Leopoldo", Email = "Yesenia_Will16@gmail.com", FirstName = "Xander", IsActive = true, IsDeleted = false, LastName = "Mohr", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg", RoleId = 2 },
                        new { Id = "52e27198-436d-4714-a6e7-e0d0738b847f", CreatedAt = new DateTime(2018, 9, 5, 6, 32, 42, 645, DateTimeKind.Local), DisplayName = "Jerrell", Email = "King_Eichmann67@hotmail.com", FirstName = "Adeline", IsActive = true, IsDeleted = false, LastName = "Hoppe", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg", RoleId = 1 },
                        new { Id = "b3731d39-39d1-491c-950b-719b0606e9c5", CreatedAt = new DateTime(2018, 9, 4, 18, 59, 44, 682, DateTimeKind.Local), DisplayName = "Alexzander", Email = "Werner_Beer@yahoo.com", FirstName = "Chauncey", IsActive = true, IsDeleted = false, LastName = "Hegmann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg", RoleId = 2 },
                        new { Id = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc", CreatedAt = new DateTime(2018, 9, 4, 14, 38, 53, 519, DateTimeKind.Local), DisplayName = "Gracie", Email = "Alysa_Hammes@yahoo.com", FirstName = "Maiya", IsActive = true, IsDeleted = false, LastName = "Kuhic", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg", RoleId = 2 },
                        new { Id = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", CreatedAt = new DateTime(2018, 9, 5, 6, 25, 27, 120, DateTimeKind.Local), DisplayName = "Tabitha", Email = "Marcellus_Paucek82@hotmail.com", FirstName = "Carolanne", IsActive = true, IsDeleted = false, LastName = "Johnson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg", RoleId = 1 },
                        new { Id = "4740e1d3-a664-49cf-bde9-24133792f2d8", CreatedAt = new DateTime(2018, 9, 5, 3, 33, 17, 365, DateTimeKind.Local), DisplayName = "Theo", Email = "Aglae.Brekke61@gmail.com", FirstName = "Ubaldo", IsActive = true, IsDeleted = false, LastName = "Nitzsche", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg", RoleId = 2 },
                        new { Id = "307ee358-2383-4f80-b94f-26f489bdb30f", CreatedAt = new DateTime(2018, 9, 5, 9, 25, 18, 97, DateTimeKind.Local), DisplayName = "Melisa", Email = "Idell95@hotmail.com", FirstName = "Herta", IsActive = true, IsDeleted = false, LastName = "Daugherty", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg", RoleId = 1 },
                        new { Id = "b57b3a69-a3c9-4efd-b242-0fc6b368ff92", CreatedAt = new DateTime(2018, 9, 5, 5, 15, 55, 959, DateTimeKind.Local), DisplayName = "Yasmine", Email = "Retta95@yahoo.com", FirstName = "Leta", IsActive = true, IsDeleted = false, LastName = "Marks", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "d59c9c41-ee13-42c2-adf8-862e5ada2a81", OrganizationId = 78 },
                        new { UserId = "89babdf6-31d6-45d2-a725-16c5e80ea915", OrganizationId = 75 },
                        new { UserId = "8ce60506-64fa-4b47-a167-f77a2bbe46bc", OrganizationId = 73 },
                        new { UserId = "52e27198-436d-4714-a6e7-e0d0738b847f", OrganizationId = 78 },
                        new { UserId = "b3731d39-39d1-491c-950b-719b0606e9c5", OrganizationId = 76 },
                        new { UserId = "e8512f99-a4a3-4cf4-bc56-15cc45d0b3dc", OrganizationId = 72 },
                        new { UserId = "45e74407-0146-4659-a4f6-de7d7c0d0b9b", OrganizationId = 78 },
                        new { UserId = "4740e1d3-a664-49cf-bde9-24133792f2d8", OrganizationId = 77 },
                        new { UserId = "307ee358-2383-4f80-b94f-26f489bdb30f", OrganizationId = 74 },
                        new { UserId = "b57b3a69-a3c9-4efd-b242-0fc6b368ff92", OrganizationId = 72 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
