// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180827141930_AddIsActiveToChat")]
    partial class AddIsActiveToChat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 10, Type = 0 },
                        new { Id = 102, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source2", Threshold = 55, Type = 1 },
                        new { Id = 103, DashboardId = 94, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 20, Type = 1 },
                        new { Id = 104, DashboardId = 94, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source2", Threshold = 97, Type = 2 },
                        new { Id = 105, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source3", Threshold = 44, Type = 0 },
                        new { Id = 106, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 37, Type = 1 },
                        new { Id = 107, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 17, Type = 2 },
                        new { Id = 108, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 15, Type = 2 },
                        new { Id = 109, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 20, Type = 0 },
                        new { Id = 110, DashboardId = 97, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 72, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", IsActive = false, Name = "saepe", Type = 0 },
                        new { Id = 22, CreatedById = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", IsActive = false, Name = "eos", Type = 0 },
                        new { Id = 23, CreatedById = "570fb7b2-30ac-46b7-98c2-5d171bafc042", IsActive = false, Name = "et", Type = 0 },
                        new { Id = 24, CreatedById = "57c67516-81b3-4916-a777-5acb7675826d", IsActive = false, Name = "sunt", Type = 0 },
                        new { Id = 25, CreatedById = "fe330cd3-7ea8-46f7-9c00-de6ebfe71f27", IsActive = false, Name = "dignissimos", Type = 0 },
                        new { Id = 26, CreatedById = "98b7a347-498b-4edb-be18-c736b985bd08", IsActive = false, Name = "repellendus", Type = 0 },
                        new { Id = 27, CreatedById = "fe330cd3-7ea8-46f7-9c00-de6ebfe71f27", IsActive = false, Name = "voluptatum", Type = 0 },
                        new { Id = 28, CreatedById = "98b7a347-498b-4edb-be18-c736b985bd08", IsActive = false, Name = "culpa", Type = 0 },
                        new { Id = 29, CreatedById = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", IsActive = false, Name = "repudiandae", Type = 0 },
                        new { Id = 30, CreatedById = "29a372ec-73b4-436a-b515-a3f17a5334a0", IsActive = false, Name = "iusto", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 27, 13, 4, 49, 110, DateTimeKind.Local), InstanceId = 81, Title = "Title380" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 27, 11, 13, 33, 652, DateTimeKind.Local), InstanceId = 85, Title = "Title32" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 27, 8, 29, 49, 40, DateTimeKind.Local), InstanceId = 89, Title = "Title276" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 26, 18, 29, 1, 111, DateTimeKind.Local), InstanceId = 85, Title = "Title140" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 26, 17, 54, 55, 844, DateTimeKind.Local), InstanceId = 81, Title = "Title964" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 27, 13, 57, 37, 186, DateTimeKind.Local), InstanceId = 89, Title = "Title703" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 27, 3, 41, 0, 914, DateTimeKind.Local), InstanceId = 83, Title = "Title606" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 27, 0, 10, 21, 271, DateTimeKind.Local), InstanceId = 90, Title = "Title510" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 27, 16, 56, 9, 945, DateTimeKind.Local), InstanceId = 89, Title = "Title945" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 27, 14, 26, 21, 124, DateTimeKind.Local), InstanceId = 87, Title = "Title545" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 27, 2, 45, 4, 815, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nisi sint et optio quia ea quam tenetur in.", UserId = "570fb7b2-30ac-46b7-98c2-5d171bafc042", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 27, 9, 57, 32, 703, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Alias molestiae amet.", UserId = "570fb7b2-30ac-46b7-98c2-5d171bafc042", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 27, 11, 57, 40, 333, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Tempore quod quis fugiat sequi qui libero nostrum aliquid dolores.", UserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 27, 16, 12, 39, 392, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Iure velit sunt molestias inventore.", UserId = "fe330cd3-7ea8-46f7-9c00-de6ebfe71f27", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 27, 15, 54, 43, 252, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nemo error nostrum quibusdam dolor quia consequatur fuga.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 26, 23, 1, 41, 234, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Rerum autem perspiciatis fugit corrupti excepturi.", UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 26, 23, 50, 1, 830, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Rerum illo molestiae.", UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 27, 14, 15, 7, 709, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Libero sint repudiandae et.", UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 26, 20, 44, 50, 657, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quis commodi dolor beatae eaque autem optio.", UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 27, 15, 20, 25, 691, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Id vel sit maiores nulla.", UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "ba:d9:61:ea:4b:59", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Windows", Title = "Instance132" },
                        new { Id = 82, Address = "3e:63:d0:4b:b8:cc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Windows", Title = "Instance427" },
                        new { Id = 83, Address = "1d:45:88:2c:6d:65", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Windows", Title = "Instance766" },
                        new { Id = 84, Address = "f5:f8:85:9a:97:df", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Linux", Title = "Instance769" },
                        new { Id = 85, Address = "6f:72:e0:2b:73:e7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Linux", Title = "Instance205" },
                        new { Id = 86, Address = "9c:70:87:42:cf:75", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Linux", Title = "Instance99" },
                        new { Id = 87, Address = "66:f2:79:7e:a9:46", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 79, Platform = "Windows", Title = "Instance489" },
                        new { Id = 88, Address = "8c:55:05:29:6f:ab", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Windows", Title = "Instance703" },
                        new { Id = 89, Address = "26:6d:e4:c5:52:85", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 75, Platform = "Windows", Title = "Instance722" },
                        new { Id = 90, Address = "8e:0a:63:4e:33:7d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Windows", Title = "Instance791" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 27, CreatedAt = new DateTime(2018, 8, 27, 2, 6, 55, 369, DateTimeKind.Local), Text = "Et et recusandae minima.", UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", WasRead = true },
                        new { Id = 32, ChatId = 27, CreatedAt = new DateTime(2018, 8, 27, 0, 43, 27, 240, DateTimeKind.Local), Text = "Officia quo quibusdam laboriosam animi non officiis vel autem tempore.", UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", WasRead = false },
                        new { Id = 33, ChatId = 26, CreatedAt = new DateTime(2018, 8, 27, 5, 25, 13, 479, DateTimeKind.Local), Text = "Optio facere dicta adipisci pariatur.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WasRead = false },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 8, 26, 19, 31, 21, 44, DateTimeKind.Local), Text = "Explicabo libero quia rerum nihil qui.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WasRead = true },
                        new { Id = 35, ChatId = 27, CreatedAt = new DateTime(2018, 8, 27, 17, 2, 41, 882, DateTimeKind.Local), Text = "Ut eos aut est nulla aspernatur culpa omnis labore et.", UserId = "4c6d6bc1-bfb2-4559-951c-f0c9e79ab859", WasRead = true },
                        new { Id = 36, ChatId = 26, CreatedAt = new DateTime(2018, 8, 26, 19, 51, 48, 22, DateTimeKind.Local), Text = "Unde praesentium et nostrum sunt labore.", UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", WasRead = false },
                        new { Id = 37, ChatId = 23, CreatedAt = new DateTime(2018, 8, 27, 2, 34, 34, 823, DateTimeKind.Local), Text = "Quia tenetur ad neque repellendus amet quisquam eum.", UserId = "4c6d6bc1-bfb2-4559-951c-f0c9e79ab859", WasRead = false },
                        new { Id = 38, ChatId = 30, CreatedAt = new DateTime(2018, 8, 26, 18, 43, 4, 720, DateTimeKind.Local), Text = "Mollitia sint quo.", UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", WasRead = false },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 8, 26, 17, 44, 12, 895, DateTimeKind.Local), Text = "Inventore hic pariatur aut voluptatum neque aut.", UserId = "7298ee98-e991-4c10-aaf4-60a9d191f818", WasRead = false },
                        new { Id = 40, ChatId = 23, CreatedAt = new DateTime(2018, 8, 27, 10, 19, 6, 310, DateTimeKind.Local), Text = "Sit molestiae fuga atque architecto porro.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 27, 16, 51, 47, 975, DateTimeKind.Local), NotificationSettingId = 11, Text = "Quia doloremque excepturi est tenetur itaque vero.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 26, 17, 49, 24, 807, DateTimeKind.Local), NotificationSettingId = 16, Text = "Qui quaerat voluptas possimus veniam.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 26, 23, 27, 20, 672, DateTimeKind.Local), NotificationSettingId = 15, Text = "Quis sit ut id quod velit sed aut.", UserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 26, 20, 21, 16, 895, DateTimeKind.Local), NotificationSettingId = 16, Text = "Explicabo laborum error laudantium ipsum aliquid error numquam.", UserId = "fe330cd3-7ea8-46f7-9c00-de6ebfe71f27", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 26, 20, 48, 55, 405, DateTimeKind.Local), NotificationSettingId = 12, Text = "Nesciunt et aut nam animi iure ea ut.", UserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 26, 21, 38, 12, 998, DateTimeKind.Local), NotificationSettingId = 13, Text = "Autem et et ut.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 26, 22, 5, 14, 766, DateTimeKind.Local), NotificationSettingId = 15, Text = "Nam cumque quos est minima nostrum fugit et dolore suscipit.", UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 27, 5, 1, 7, 165, DateTimeKind.Local), NotificationSettingId = 12, Text = "Ducimus consequuntur est qui velit ex mollitia.", UserId = "98b7a347-498b-4edb-be18-c736b985bd08", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 27, 16, 41, 54, 137, DateTimeKind.Local), NotificationSettingId = 17, Text = "Quis tempore voluptatem atque accusantium qui.", UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 27, 8, 0, 55, 933, DateTimeKind.Local), NotificationSettingId = 13, Text = "Blanditiis consequuntur sequi.", UserId = "7298ee98-e991-4c10-aaf4-60a9d191f818", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "570fb7b2-30ac-46b7-98c2-5d171bafc042" },
                        new { Id = 12, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418" },
                        new { Id = 13, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "57c67516-81b3-4916-a777-5acb7675826d" },
                        new { Id = 14, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "570fb7b2-30ac-46b7-98c2-5d171bafc042" },
                        new { Id = 15, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0" },
                        new { Id = 16, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "570fb7b2-30ac-46b7-98c2-5d171bafc042" },
                        new { Id = 18, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "57c67516-81b3-4916-a777-5acb7675826d" },
                        new { Id = 19, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "98b7a347-498b-4edb-be18-c736b985bd08" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "852.353.7752 x24098", CreatedByUserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", Description = "Voluptatem odio sunt in repellendus quisquam. Perspiciatis optio aliquid repudiandae assumenda quam omnis facilis laborum.", Email = "Lucie.Corkery@yahoo.com", IsActive = true, Name = "Company364", ThemeId = 63, WebSite = "http://tamara.biz" },
                        new { Id = 72, ContactNumber = "621-788-4740", CreatedByUserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", Description = "Qui eos perferendis debitis reiciendis qui distinctio est. Molestiae optio totam eaque eveniet autem labore voluptates excepturi.", Email = "Troy.Dooley@yahoo.com", IsActive = true, Name = "Company428", ThemeId = 63, WebSite = "http://josiah.com" },
                        new { Id = 73, ContactNumber = "368.201.7008", CreatedByUserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", Description = "Adipisci ipsa dolor architecto. Nihil incidunt eum eveniet molestiae eius maiores adipisci repellendus in.", Email = "Lessie_Ondricka@gmail.com", IsActive = true, Name = "Company749", ThemeId = 64, WebSite = "https://chanel.org" },
                        new { Id = 74, ContactNumber = "(353) 533-8585", CreatedByUserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", Description = "Rerum quae exercitationem facere autem. Harum exercitationem repellendus similique assumenda corrupti earum tenetur. A occaecati voluptatem est.", Email = "Wilhelmine.Feil@yahoo.com", IsActive = true, Name = "Company552", ThemeId = 62, WebSite = "http://april.biz" },
                        new { Id = 75, ContactNumber = "1-959-697-6749 x2560", CreatedByUserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", Description = "Velit et ab natus ut. Consectetur est nisi dolorem rerum sint alias vel iure.", Email = "Sandrine_Swaniawski@yahoo.com", IsActive = true, Name = "Company173", ThemeId = 63, WebSite = "https://reynold.biz" },
                        new { Id = 76, ContactNumber = "1-987-342-6977", CreatedByUserId = "98b7a347-498b-4edb-be18-c736b985bd08", Description = "In possimus officia. Aut placeat porro. Laborum ipsam voluptatem et totam illo rerum a. Exercitationem voluptates recusandae qui veritatis accusamus velit perferendis dicta qui.", Email = "Herminia75@yahoo.com", IsActive = true, Name = "Company41", ThemeId = 62, WebSite = "https://virginie.info" },
                        new { Id = 77, ContactNumber = "858-613-4360", CreatedByUserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", Description = "Necessitatibus est laboriosam rerum reprehenderit aut autem ullam alias. Quia dolores at in tenetur odit.", Email = "Crystal_Larkin65@yahoo.com", IsActive = true, Name = "Company404", ThemeId = 64, WebSite = "https://sebastian.org" },
                        new { Id = 78, ContactNumber = "436-663-8672", CreatedByUserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", Description = "Id dolore ut. Ducimus aut quibusdam autem nemo. Ea architecto veritatis.", Email = "Marley.Moore@gmail.com", IsActive = true, Name = "Company5", ThemeId = 63, WebSite = "http://raymond.net" },
                        new { Id = 79, ContactNumber = "314-240-2344 x228", CreatedByUserId = "57c67516-81b3-4916-a777-5acb7675826d", Description = "Eum minus nemo.", Email = "Aisha26@yahoo.com", IsActive = true, Name = "Company76", ThemeId = 63, WebSite = "https://stephanie.org" },
                        new { Id = 80, ContactNumber = "507-572-8538 x7478", CreatedByUserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", Description = "Fuga ut et non quia est harum quibusdam et. Autem est corporis temporibus optio exercitationem inventore illum qui quibusdam.", Email = "Nelson24@gmail.com", IsActive = true, Name = "Company639", ThemeId = 67, WebSite = "https://alvera.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 26, 19, 52, 16, 683, DateTimeKind.Local), FeedbackId = 42, Text = "Exercitationem iusto iusto maxime aliquam rerum error sit sed blanditiis.", UserId = "98b7a347-498b-4edb-be18-c736b985bd08" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 27, 13, 11, 27, 677, DateTimeKind.Local), FeedbackId = 48, Text = "Voluptatem eum sunt dolor itaque velit rem iure repudiandae.", UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 27, 9, 50, 23, 540, DateTimeKind.Local), FeedbackId = 49, Text = "Sint mollitia quaerat dolorem fugiat.", UserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 26, 18, 21, 16, 772, DateTimeKind.Local), FeedbackId = 49, Text = "Consequuntur ut aut sed sint at quo et sapiente.", UserId = "57c67516-81b3-4916-a777-5acb7675826d" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 27, 11, 2, 11, 728, DateTimeKind.Local), FeedbackId = 45, Text = "Harum saepe nam ratione consectetur cupiditate voluptates occaecati.", UserId = "4c6d6bc1-bfb2-4559-951c-f0c9e79ab859" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 27, 7, 45, 48, 421, DateTimeKind.Local), FeedbackId = 50, Text = "Facilis qui minima et inventore.", UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 27, 2, 28, 8, 352, DateTimeKind.Local), FeedbackId = 47, Text = "Aliquam unde quasi in saepe.", UserId = "4c6d6bc1-bfb2-4559-951c-f0c9e79ab859" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 26, 18, 9, 8, 399, DateTimeKind.Local), FeedbackId = 42, Text = "Quaerat est rem aliquam.", UserId = "7298ee98-e991-4c10-aaf4-60a9d191f818" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 26, 20, 26, 49, 757, DateTimeKind.Local), FeedbackId = 46, Text = "Quia in et corporis et perferendis et numquam.", UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 27, 3, 4, 58, 146, DateTimeKind.Local), FeedbackId = 43, Text = "Et natus itaque sint suscipit autem ut.", UserId = "98b7a347-498b-4edb-be18-c736b985bd08" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme903" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme265" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme618" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme277" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme389" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme24" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme304" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme921" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme945" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme452" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "570fb7b2-30ac-46b7-98c2-5d171bafc042", CreatedAt = new DateTime(2018, 8, 27, 9, 36, 45, 9, DateTimeKind.Local), DisplayName = "Clifford", Email = "Catherine3@yahoo.com", FirstName = "Edythe", IsActive = true, LastName = "Wolf", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg", RoleId = 2 },
                        new { Id = "57c67516-81b3-4916-a777-5acb7675826d", CreatedAt = new DateTime(2018, 8, 26, 17, 31, 50, 718, DateTimeKind.Local), DisplayName = "Burdette", Email = "Jerrold.Ziemann@yahoo.com", FirstName = "Ena", IsActive = true, LastName = "Powlowski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg", RoleId = 1 },
                        new { Id = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", CreatedAt = new DateTime(2018, 8, 27, 7, 50, 6, 891, DateTimeKind.Local), DisplayName = "Katelynn", Email = "Gaston27@yahoo.com", FirstName = "Stacey", IsActive = true, LastName = "Wilkinson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg", RoleId = 1 },
                        new { Id = "7298ee98-e991-4c10-aaf4-60a9d191f818", CreatedAt = new DateTime(2018, 8, 27, 6, 21, 46, 912, DateTimeKind.Local), DisplayName = "Javier", Email = "Terrill1@yahoo.com", FirstName = "Louvenia", IsActive = true, LastName = "Eichmann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg", RoleId = 1 },
                        new { Id = "fe330cd3-7ea8-46f7-9c00-de6ebfe71f27", CreatedAt = new DateTime(2018, 8, 26, 22, 21, 30, 42, DateTimeKind.Local), DisplayName = "Lourdes", Email = "Elmer89@gmail.com", FirstName = "Rebecca", IsActive = true, LastName = "Schmidt", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg", RoleId = 1 },
                        new { Id = "4c6d6bc1-bfb2-4559-951c-f0c9e79ab859", CreatedAt = new DateTime(2018, 8, 27, 14, 0, 23, 466, DateTimeKind.Local), DisplayName = "Deborah", Email = "Judd.Dibbert68@hotmail.com", FirstName = "Adolf", IsActive = true, LastName = "Block", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg", RoleId = 1 },
                        new { Id = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", CreatedAt = new DateTime(2018, 8, 27, 7, 24, 18, 805, DateTimeKind.Local), DisplayName = "Amani", Email = "Archibald.Renner35@gmail.com", FirstName = "Anastasia", IsActive = true, LastName = "Waters", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg", RoleId = 1 },
                        new { Id = "98b7a347-498b-4edb-be18-c736b985bd08", CreatedAt = new DateTime(2018, 8, 27, 11, 16, 37, 695, DateTimeKind.Local), DisplayName = "Cale", Email = "Jasmin_Barton@hotmail.com", FirstName = "Neil", IsActive = true, LastName = "Adams", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg", RoleId = 1 },
                        new { Id = "29a372ec-73b4-436a-b515-a3f17a5334a0", CreatedAt = new DateTime(2018, 8, 27, 1, 0, 20, 146, DateTimeKind.Local), DisplayName = "Tressa", Email = "Thea_Cartwright@gmail.com", FirstName = "Gregg", IsActive = true, LastName = "Collier", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg", RoleId = 2 },
                        new { Id = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", CreatedAt = new DateTime(2018, 8, 27, 1, 21, 51, 215, DateTimeKind.Local), DisplayName = "Deshaun", Email = "Cathy_Cummings2@yahoo.com", FirstName = "Korbin", IsActive = true, LastName = "Gulgowski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "570fb7b2-30ac-46b7-98c2-5d171bafc042", OrganizationId = 77 },
                        new { UserId = "57c67516-81b3-4916-a777-5acb7675826d", OrganizationId = 76 },
                        new { UserId = "ee541c3a-6c64-4dfe-b599-4f6886cb3837", OrganizationId = 75 },
                        new { UserId = "7298ee98-e991-4c10-aaf4-60a9d191f818", OrganizationId = 72 },
                        new { UserId = "fe330cd3-7ea8-46f7-9c00-de6ebfe71f27", OrganizationId = 73 },
                        new { UserId = "4c6d6bc1-bfb2-4559-951c-f0c9e79ab859", OrganizationId = 77 },
                        new { UserId = "338a8a9a-ed98-4c62-9de8-2e3ffe590ee7", OrganizationId = 73 },
                        new { UserId = "98b7a347-498b-4edb-be18-c736b985bd08", OrganizationId = 75 },
                        new { UserId = "29a372ec-73b4-436a-b515-a3f17a5334a0", OrganizationId = 77 },
                        new { UserId = "a7218763-5a9e-4cf3-8a8a-f4d76fb0a418", OrganizationId = 79 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
