// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180912174512_InstanceNotificationMigration")]
    partial class InstanceNotificationMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 85, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 32, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 60, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 90, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 21, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 70, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 85, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 18, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 84, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 72, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 26, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 87, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 39, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 83, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 4, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "350281ff-c0af-46cd-a795-1cd23fbece28", IsDeleted = false, Name = "porro", Type = 0 },
                        new { Id = 22, CreatedById = "4d07300b-6cdb-4336-8873-5b787fcc233d", IsDeleted = false, Name = "nihil", Type = 0 },
                        new { Id = 23, CreatedById = "4d07300b-6cdb-4336-8873-5b787fcc233d", IsDeleted = false, Name = "deserunt", Type = 0 },
                        new { Id = 24, CreatedById = "1b12dd3e-572c-4fc5-9874-4fd59b65fe28", IsDeleted = false, Name = "sit", Type = 0 },
                        new { Id = 25, CreatedById = "6ac80c55-193e-47e8-9926-112c1075a759", IsDeleted = false, Name = "vero", Type = 0 },
                        new { Id = 26, CreatedById = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735", IsDeleted = false, Name = "ut", Type = 0 },
                        new { Id = 27, CreatedById = "350281ff-c0af-46cd-a795-1cd23fbece28", IsDeleted = false, Name = "veniam", Type = 0 },
                        new { Id = 28, CreatedById = "4d07300b-6cdb-4336-8873-5b787fcc233d", IsDeleted = false, Name = "accusantium", Type = 0 },
                        new { Id = 29, CreatedById = "4d07300b-6cdb-4336-8873-5b787fcc233d", IsDeleted = false, Name = "facilis", Type = 0 },
                        new { Id = 30, CreatedById = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc", IsDeleted = false, Name = "provident", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.CollectorAppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DebLink");

                    b.Property<string>("ExeLink");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TgzLink");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("CollectorAppVersions");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 12, 11, 0, 32, 637, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title216" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 12, 2, 20, 52, 752, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title172" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 12, 5, 26, 17, 325, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title30" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 12, 2, 6, 21, 591, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title730" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 12, 9, 26, 40, 634, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title576" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 12, 6, 30, 55, 41, DateTimeKind.Local), InstanceId = 76, IsDeleted = false, Title = "Title43" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 12, 19, 57, 40, 204, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title781" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 12, 3, 18, 49, 847, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title59" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 12, 10, 7, 10, 767, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title24" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 12, 10, 22, 33, 501, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title329" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 12, 13, 38, 53, 966, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et excepturi eius minus ipsum et voluptatum impedit minima.", UserId = "350281ff-c0af-46cd-a795-1cd23fbece28", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 12, 1, 34, 18, 286, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptas error vel vel consequatur.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 12, 2, 24, 29, 321, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Enim ut consequatur eum sint.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 12, 10, 24, 29, 585, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Inventore ut tempora rerum rerum est maiores occaecati.", UserId = "e8825d6b-13e6-4790-ae0e-dc0c34ebdd9d", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 12, 13, 40, 5, 380, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nihil ipsam nihil possimus eum illum.", UserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 12, 1, 13, 28, 802, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sed impedit natus velit aut ut qui explicabo qui quo.", UserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 12, 11, 4, 34, 434, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Id et enim quasi.", UserId = "350281ff-c0af-46cd-a795-1cd23fbece28", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 12, 0, 22, 1, 157, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "In eos vel soluta enim at quae.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 12, 17, 22, 52, 498, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Similique fuga quia commodi velit ut voluptate illum veritatis soluta.", UserId = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 12, 10, 6, 20, 929, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Mollitia ipsam vitae non in assumenda.", UserId = "350281ff-c0af-46cd-a795-1cd23fbece28", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "d4:20:62:4c:d5:09", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance386" },
                        new { Id = 72, Address = "9d:73:46:bd:54:91", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance104" },
                        new { Id = 73, Address = "81:76:08:eb:c7:67", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance188" },
                        new { Id = 74, Address = "a0:d6:7f:a6:89:92", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance97" },
                        new { Id = 75, Address = "65:75:cd:b8:2e:d5", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance47" },
                        new { Id = 76, Address = "3a:ca:99:53:c6:5d", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance522" },
                        new { Id = 77, Address = "8b:c1:0c:96:6d:c6", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance519" },
                        new { Id = 78, Address = "95:32:57:f6:aa:0b", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 67, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance203" },
                        new { Id = 79, Address = "9a:13:16:00:49:d5", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance735" },
                        new { Id = 80, Address = "7b:85:89:9d:ae:a3", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance875" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 28, CreatedAt = new DateTime(2018, 9, 12, 18, 34, 14, 408, DateTimeKind.Local), IsDeleted = false, Text = "Voluptas suscipit eos eos corrupti placeat.", UserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28", WasRead = false },
                        new { Id = 32, ChatId = 29, CreatedAt = new DateTime(2018, 9, 12, 20, 38, 47, 654, DateTimeKind.Local), IsDeleted = false, Text = "In sint ratione aut pariatur doloribus quo repudiandae voluptatem omnis.", UserId = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc", WasRead = false },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 9, 12, 7, 17, 43, 406, DateTimeKind.Local), IsDeleted = false, Text = "Qui et dolorem distinctio laudantium dolorem aut numquam officiis.", UserId = "e8825d6b-13e6-4790-ae0e-dc0c34ebdd9d", WasRead = false },
                        new { Id = 34, ChatId = 30, CreatedAt = new DateTime(2018, 9, 12, 16, 3, 34, 412, DateTimeKind.Local), IsDeleted = false, Text = "Ut pariatur quia deserunt esse voluptatem.", UserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", WasRead = true },
                        new { Id = 35, ChatId = 28, CreatedAt = new DateTime(2018, 9, 12, 12, 11, 19, 15, DateTimeKind.Local), IsDeleted = false, Text = "Velit et iste soluta aut sit voluptatibus eaque.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", WasRead = false },
                        new { Id = 36, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 14, 12, 24, 868, DateTimeKind.Local), IsDeleted = false, Text = "Natus voluptas quis.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", WasRead = false },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 9, 45, 14, 921, DateTimeKind.Local), IsDeleted = false, Text = "Minus qui sint repudiandae et velit laudantium.", UserId = "e8825d6b-13e6-4790-ae0e-dc0c34ebdd9d", WasRead = false },
                        new { Id = 38, ChatId = 24, CreatedAt = new DateTime(2018, 9, 12, 6, 53, 4, 938, DateTimeKind.Local), IsDeleted = false, Text = "Consequatur ab unde iste provident est.", UserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", WasRead = false },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 9, 12, 5, 9, 5, 584, DateTimeKind.Local), IsDeleted = false, Text = "Sunt qui ab.", UserId = "6ac80c55-193e-47e8-9926-112c1075a759", WasRead = true },
                        new { Id = 40, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 15, 43, 12, 818, DateTimeKind.Local), IsDeleted = false, Text = "Temporibus dolores eaque soluta dolorem rerum assumenda corrupti sint occaecati.", UserId = "6ac80c55-193e-47e8-9926-112c1075a759", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 12, 14, 24, 51, 647, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Similique similique ut nihil itaque architecto ab.", UserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 12, 4, 47, 31, 497, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Sapiente aut nobis eum ipsa necessitatibus.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 12, 10, 3, 47, 798, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Sed hic reprehenderit.", UserId = "350281ff-c0af-46cd-a795-1cd23fbece28", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 12, 16, 20, 15, 284, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Illum officiis quos molestiae eum qui est et.", UserId = "6ac80c55-193e-47e8-9926-112c1075a759", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 12, 7, 32, 34, 437, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Officia fugiat id iusto itaque.", UserId = "350281ff-c0af-46cd-a795-1cd23fbece28", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 12, 5, 51, 13, 551, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Excepturi voluptatem ut cumque qui iste consequatur.", UserId = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 12, 16, 13, 0, 965, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Rem quam ducimus expedita eum ut dolores.", UserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 12, 20, 30, 37, 853, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Incidunt aut a quis numquam laudantium excepturi blanditiis saepe.", UserId = "6ac80c55-193e-47e8-9926-112c1075a759", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 12, 14, 55, 15, 829, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Quisquam hic modi et voluptatem.", UserId = "350281ff-c0af-46cd-a795-1cd23fbece28", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 12, 11, 12, 34, 704, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Et vel dolorem iure vitae est.", UserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "6ac80c55-193e-47e8-9926-112c1075a759" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "e8825d6b-13e6-4790-ae0e-dc0c34ebdd9d" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 4, UserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "6ac80c55-193e-47e8-9926-112c1075a759" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "1b12dd3e-572c-4fc5-9874-4fd59b65fe28" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "1-490-926-1308 x80944", CreatedByUserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28", Description = "Ex est nam sed enim est sed magnam culpa. Omnis quam et veritatis beatae voluptatem id repellendus commodi. Ea id numquam ut in nihil.", Email = "Graham18@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company726", ThemeId = 2, WebSite = "http://judy.net" },
                        new { Id = 62, ContactNumber = "386-573-8688", CreatedByUserId = "e8825d6b-13e6-4790-ae0e-dc0c34ebdd9d", Description = "Impedit sed nemo in et. Consequuntur eos id facere optio architecto. Non est aspernatur quae magnam et modi quia est.", Email = "Alison_Hamill@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company176", ThemeId = 2, WebSite = "https://avery.info" },
                        new { Id = 63, ContactNumber = "991.239.2447", CreatedByUserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", Description = "Et dolorum quibusdam error similique error quos sed recusandae. Ipsam dolorem in illo non rerum sint iste libero laborum. Minus aut dicta et inventore debitis.", Email = "Clint19@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company573", ThemeId = 2, WebSite = "http://jaleel.info" },
                        new { Id = 64, ContactNumber = "(929) 461-6306 x890", CreatedByUserId = "350281ff-c0af-46cd-a795-1cd23fbece28", Description = "", Email = "Reed_Donnelly@gmail.com", IsActive = true, IsDeleted = false, Name = "Company368", ThemeId = 1, WebSite = "https://judy.name" },
                        new { Id = 65, ContactNumber = "539-599-2614", CreatedByUserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735", Description = "Et odio error non suscipit deleniti. Aliquam cum et quam voluptas asperiores voluptatem sed est. Quia cumque expedita libero voluptatem labore vel est. Ut voluptatibus fugiat et ut nam tenetur voluptatem.", Email = "Jolie16@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company814", ThemeId = 1, WebSite = "https://edwina.com" },
                        new { Id = 66, ContactNumber = "890.572.7717 x56574", CreatedByUserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735", Description = "", Email = "Arvid.Lang57@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company127", ThemeId = 2, WebSite = "http://kyler.org" },
                        new { Id = 67, ContactNumber = "(779) 214-5197 x5883", CreatedByUserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735", Description = "Molestias quo aliquid voluptatem. Quia omnis enim.", Email = "Alvena.Oberbrunner61@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company809", ThemeId = 2, WebSite = "http://skyla.net" },
                        new { Id = 68, ContactNumber = "653-280-0512 x1114", CreatedByUserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28", Description = "Expedita velit voluptas laudantium in velit fuga eum. Facere eligendi voluptas et laboriosam commodi.", Email = "Caesar_Beer53@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company780", ThemeId = 1, WebSite = "http://haylee.org" },
                        new { Id = 69, ContactNumber = "1-206-722-8604 x223", CreatedByUserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", Description = "Aspernatur commodi enim nobis eum et aut vero labore laboriosam.", Email = "Kenneth_Murray@gmail.com", IsActive = true, IsDeleted = false, Name = "Company867", ThemeId = 1, WebSite = "http://ubaldo.name" },
                        new { Id = 70, ContactNumber = "(779) 586-8936 x338", CreatedByUserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", Description = "Id voluptates est quibusdam quis architecto sequi pariatur nam.", Email = "Donna.Klein37@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company25", ThemeId = 1, WebSite = "https://michel.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 12, 18, 22, 49, 33, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Eveniet quo ut cum voluptas debitis.", UserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 23, 4, 27, 806, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Aut nesciunt enim consectetur vitae pariatur ut corporis.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 12, 18, 50, 45, 375, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Praesentium nobis deleniti repellendus commodi incidunt facilis rem.", UserId = "094be847-b7b1-4ff5-ba11-60fc14bfd63a" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 12, 20, 13, 43, 704, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Est atque perferendis occaecati.", UserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 12, 15, 29, 57, 307, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Laudantium ea aut.", UserId = "350281ff-c0af-46cd-a795-1cd23fbece28" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 12, 7, 46, 40, 572, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Ea aperiam laudantium ut veritatis quasi amet vel nam velit.", UserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 12, 6, 22, 24, 313, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Placeat expedita aut quos fugit totam.", UserId = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 12, 4, 35, 36, 447, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Quis sed nemo magnam inventore.", UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 12, 15, 14, 22, 750, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Ut veniam iusto laborum.", UserId = "6ac80c55-193e-47e8-9926-112c1075a759" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 12, 3, 38, 20, 114, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Odit aliquid quia deleniti perferendis pariatur facilis.", UserId = "094be847-b7b1-4ff5-ba11-60fc14bfd63a" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "bfb1e6a4-218d-4333-b161-24ab083d7a28", CreatedAt = new DateTime(2018, 9, 12, 13, 32, 1, 826, DateTimeKind.Local), DisplayName = "Krystal", Email = "Arthur_Kshlerin74@gmail.com", FirstName = "Johnpaul", IsActive = true, IsDeleted = false, LastName = "Murray", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg", RoleId = 2 },
                        new { Id = "e8825d6b-13e6-4790-ae0e-dc0c34ebdd9d", CreatedAt = new DateTime(2018, 9, 12, 2, 47, 5, 986, DateTimeKind.Local), DisplayName = "Estella", Email = "Terry.DuBuque@gmail.com", FirstName = "Velda", IsActive = true, IsDeleted = false, LastName = "Hermiston", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg", RoleId = 2 },
                        new { Id = "4d07300b-6cdb-4336-8873-5b787fcc233d", CreatedAt = new DateTime(2018, 9, 12, 7, 36, 31, 769, DateTimeKind.Local), DisplayName = "Brigitte", Email = "Lennie_Dietrich81@hotmail.com", FirstName = "Georgianna", IsActive = true, IsDeleted = false, LastName = "Kovacek", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg", RoleId = 1 },
                        new { Id = "350281ff-c0af-46cd-a795-1cd23fbece28", CreatedAt = new DateTime(2018, 9, 12, 9, 50, 51, 382, DateTimeKind.Local), DisplayName = "Larue", Email = "Floyd78@yahoo.com", FirstName = "Benjamin", IsActive = true, IsDeleted = false, LastName = "Ullrich", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg", RoleId = 1 },
                        new { Id = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", CreatedAt = new DateTime(2018, 9, 12, 18, 40, 13, 480, DateTimeKind.Local), DisplayName = "Chadd", Email = "Violet_Rodriguez2@hotmail.com", FirstName = "Madilyn", IsActive = true, IsDeleted = false, LastName = "Denesik", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg", RoleId = 1 },
                        new { Id = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735", CreatedAt = new DateTime(2018, 9, 12, 11, 1, 19, 31, DateTimeKind.Local), DisplayName = "Naomie", Email = "Lauriane48@gmail.com", FirstName = "Raina", IsActive = true, IsDeleted = false, LastName = "West", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg", RoleId = 1 },
                        new { Id = "6ac80c55-193e-47e8-9926-112c1075a759", CreatedAt = new DateTime(2018, 9, 12, 13, 37, 23, 451, DateTimeKind.Local), DisplayName = "Eric", Email = "Eli_Kub93@yahoo.com", FirstName = "Dannie", IsActive = true, IsDeleted = false, LastName = "Cruickshank", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg", RoleId = 1 },
                        new { Id = "094be847-b7b1-4ff5-ba11-60fc14bfd63a", CreatedAt = new DateTime(2018, 9, 12, 3, 50, 33, 677, DateTimeKind.Local), DisplayName = "Jayda", Email = "Dale_Christiansen36@hotmail.com", FirstName = "Kaya", IsActive = true, IsDeleted = false, LastName = "Kemmer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg", RoleId = 2 },
                        new { Id = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc", CreatedAt = new DateTime(2018, 9, 11, 22, 3, 16, 874, DateTimeKind.Local), DisplayName = "Rey", Email = "Reymundo.Kunde25@yahoo.com", FirstName = "Matilde", IsActive = true, IsDeleted = false, LastName = "Morissette", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg", RoleId = 2 },
                        new { Id = "1b12dd3e-572c-4fc5-9874-4fd59b65fe28", CreatedAt = new DateTime(2018, 9, 12, 9, 34, 19, 341, DateTimeKind.Local), DisplayName = "Gladyce", Email = "Cleta27@yahoo.com", FirstName = "Loyce", IsActive = true, IsDeleted = false, LastName = "Davis", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "bfb1e6a4-218d-4333-b161-24ab083d7a28", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "e8825d6b-13e6-4790-ae0e-dc0c34ebdd9d", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "4d07300b-6cdb-4336-8873-5b787fcc233d", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "350281ff-c0af-46cd-a795-1cd23fbece28", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "0af03e47-8745-48a9-b0d5-dc03cb5ed6f5", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "1f3bc470-e5e8-41c4-9d4d-c0f4e6ea6735", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "6ac80c55-193e-47e8-9926-112c1075a759", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "094be847-b7b1-4ff5-ba11-60fc14bfd63a", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "a58c9ba8-90a7-4f2d-af5a-faf7797c34fc", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "1b12dd3e-572c-4fc5-9874-4fd59b65fe28", OrganizationId = 61, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
