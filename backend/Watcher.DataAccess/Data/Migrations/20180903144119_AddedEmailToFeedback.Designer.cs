// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180903144119_AddedEmailToFeedback")]
    partial class AddedEmailToFeedback
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 64, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 35, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 100, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 34, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 3, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 80, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 8, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 64, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 4, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 84, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 35, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", IsDeleted = false, Name = "a", Type = 0 },
                        new { Id = 22, CreatedById = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", IsDeleted = false, Name = "unde", Type = 0 },
                        new { Id = 23, CreatedById = "fdfd6ac9-b62b-4e4a-8d9d-08d525451e60", IsDeleted = false, Name = "voluptatem", Type = 0 },
                        new { Id = 24, CreatedById = "436a886f-d941-4eda-ae4b-0166d8d84611", IsDeleted = false, Name = "ea", Type = 0 },
                        new { Id = 25, CreatedById = "8f0ff7d5-a4b1-440b-b9cd-c30ea4593d8f", IsDeleted = false, Name = "doloribus", Type = 0 },
                        new { Id = 26, CreatedById = "2e3cb29a-adcd-400a-8f21-1790baa33375", IsDeleted = false, Name = "eum", Type = 0 },
                        new { Id = 27, CreatedById = "8f0ff7d5-a4b1-440b-b9cd-c30ea4593d8f", IsDeleted = false, Name = "quis", Type = 0 },
                        new { Id = 28, CreatedById = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", IsDeleted = false, Name = "iusto", Type = 0 },
                        new { Id = 29, CreatedById = "2e3cb29a-adcd-400a-8f21-1790baa33375", IsDeleted = false, Name = "quo", Type = 0 },
                        new { Id = 30, CreatedById = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", IsDeleted = false, Name = "minima", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 3, 6, 40, 22, 355, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title284" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 2, 23, 2, 54, 857, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title376" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 3, 1, 55, 52, 777, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title655" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 3, 17, 12, 47, 738, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title93" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 2, 23, 28, 35, 209, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title894" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 3, 9, 57, 32, 886, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title355" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 3, 2, 39, 59, 41, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title787" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 3, 12, 28, 11, 819, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title635" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 3, 13, 12, 14, 827, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title846" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 3, 6, 49, 10, 759, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title511" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserEmail");

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 3, 1, 51, 16, 184, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et voluptatem maxime atque.", UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 3, 13, 33, 54, 363, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "A dolorem veniam omnis deleniti expedita sit non atque.", UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 3, 15, 16, 44, 69, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Cum est qui.", UserId = "fdfd6ac9-b62b-4e4a-8d9d-08d525451e60", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 3, 4, 5, 23, 414, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sed aut vel consequatur.", UserId = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 3, 16, 17, 8, 690, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Alias doloribus doloremque.", UserId = "3e44d9ca-d67c-44d3-9660-58746a30d3ed", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 3, 13, 29, 21, 183, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quis veritatis dolores cum hic.", UserId = "436a886f-d941-4eda-ae4b-0166d8d84611", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 3, 2, 4, 9, 747, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Laboriosam eos reprehenderit.", UserId = "2e3cb29a-adcd-400a-8f21-1790baa33375", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 3, 11, 35, 42, 947, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ea fuga natus est neque reiciendis quaerat quia.", UserId = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 2, 19, 2, 40, 629, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Animi consequatur libero voluptatum libero sequi officiis dolorem rerum quisquam.", UserId = "af132db0-f4c3-4b96-b4a9-2749ea7fc4c1", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 3, 1, 12, 28, 136, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Officiis molestiae cupiditate numquam velit delectus doloribus ex qui facere.", UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "4e:4d:ad:70:30:1a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance760" },
                        new { Id = 82, Address = "d9:77:dc:14:e8:8e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance808" },
                        new { Id = 83, Address = "f7:bc:16:8e:a8:54", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", Title = "Instance512" },
                        new { Id = 84, Address = "8f:b8:da:bc:83:6d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance246" },
                        new { Id = 85, Address = "30:03:43:e5:96:c6", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", Title = "Instance757" },
                        new { Id = 86, Address = "1b:ea:fb:06:0b:92", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance255" },
                        new { Id = 87, Address = "6f:7d:5d:fa:f7:20", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance779" },
                        new { Id = 88, Address = "89:73:1d:53:8b:f4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance566" },
                        new { Id = 89, Address = "d4:ad:6a:02:b9:a4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance970" },
                        new { Id = 90, Address = "37:e6:3d:e6:c0:b3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Linux", Title = "Instance688" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 26, CreatedAt = new DateTime(2018, 9, 3, 13, 17, 37, 357, DateTimeKind.Local), IsDeleted = false, Text = "Iure dolor voluptate.", UserId = "8f0ff7d5-a4b1-440b-b9cd-c30ea4593d8f", WasRead = false },
                        new { Id = 32, ChatId = 27, CreatedAt = new DateTime(2018, 9, 3, 9, 28, 33, 173, DateTimeKind.Local), IsDeleted = false, Text = "Quaerat enim et culpa perferendis iure voluptatum qui vel.", UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", WasRead = false },
                        new { Id = 33, ChatId = 26, CreatedAt = new DateTime(2018, 9, 3, 12, 10, 43, 482, DateTimeKind.Local), IsDeleted = false, Text = "Aut officia aperiam maiores laboriosam eum ad neque cupiditate tempora.", UserId = "2e3cb29a-adcd-400a-8f21-1790baa33375", WasRead = true },
                        new { Id = 34, ChatId = 29, CreatedAt = new DateTime(2018, 9, 3, 0, 8, 13, 669, DateTimeKind.Local), IsDeleted = false, Text = "Molestiae delectus eius adipisci.", UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", WasRead = true },
                        new { Id = 35, ChatId = 29, CreatedAt = new DateTime(2018, 9, 2, 19, 9, 48, 515, DateTimeKind.Local), IsDeleted = false, Text = "Ad consequatur sapiente sunt voluptatem.", UserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", WasRead = false },
                        new { Id = 36, ChatId = 28, CreatedAt = new DateTime(2018, 9, 3, 15, 22, 30, 680, DateTimeKind.Local), IsDeleted = false, Text = "Quis qui occaecati velit consectetur omnis.", UserId = "af132db0-f4c3-4b96-b4a9-2749ea7fc4c1", WasRead = false },
                        new { Id = 37, ChatId = 25, CreatedAt = new DateTime(2018, 9, 3, 14, 44, 7, 749, DateTimeKind.Local), IsDeleted = false, Text = "Repellendus vel facilis magnam necessitatibus.", UserId = "3e44d9ca-d67c-44d3-9660-58746a30d3ed", WasRead = false },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 9, 3, 7, 33, 6, 128, DateTimeKind.Local), IsDeleted = false, Text = "Earum iste est quo.", UserId = "8f0ff7d5-a4b1-440b-b9cd-c30ea4593d8f", WasRead = false },
                        new { Id = 39, ChatId = 25, CreatedAt = new DateTime(2018, 9, 3, 16, 57, 44, 50, DateTimeKind.Local), IsDeleted = false, Text = "Nostrum dolores nemo nesciunt praesentium quia ea.", UserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", WasRead = false },
                        new { Id = 40, ChatId = 25, CreatedAt = new DateTime(2018, 9, 2, 22, 6, 58, 774, DateTimeKind.Local), IsDeleted = false, Text = "Sed blanditiis consequatur corrupti asperiores voluptatem voluptatem dolores.", UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 2, 17, 41, 22, 824, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Odio ex excepturi qui consequuntur labore et quaerat.", UserId = "fdfd6ac9-b62b-4e4a-8d9d-08d525451e60", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 2, 19, 19, 49, 542, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Iusto fugit quia exercitationem corrupti adipisci et voluptas magni assumenda.", UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 2, 23, 30, 22, 844, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Sit sunt ut molestias velit est.", UserId = "8f0ff7d5-a4b1-440b-b9cd-c30ea4593d8f", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 2, 21, 1, 29, 811, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Veritatis illo nemo consequatur natus eius corporis quisquam doloremque.", UserId = "3e44d9ca-d67c-44d3-9660-58746a30d3ed", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 3, 7, 45, 45, 62, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Illo sunt accusantium est ipsam occaecati libero nihil.", UserId = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 3, 10, 22, 28, 367, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Inventore accusantium quos.", UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 3, 7, 17, 28, 717, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Repudiandae commodi incidunt et necessitatibus.", UserId = "436a886f-d941-4eda-ae4b-0166d8d84611", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 3, 13, 18, 27, 331, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Non et voluptatem illum velit debitis.", UserId = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 3, 8, 20, 2, 736, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Dignissimos officia non.", UserId = "3e44d9ca-d67c-44d3-9660-58746a30d3ed", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 2, 21, 9, 48, 192, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Facere quas adipisci consequatur quam repellat eligendi corporis.", UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "436a886f-d941-4eda-ae4b-0166d8d84611" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "af132db0-f4c3-4b96-b4a9-2749ea7fc4c1" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "2e3cb29a-adcd-400a-8f21-1790baa33375" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "436a886f-d941-4eda-ae4b-0166d8d84611" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "2e3cb29a-adcd-400a-8f21-1790baa33375" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "fdfd6ac9-b62b-4e4a-8d9d-08d525451e60" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "615-670-4823", CreatedByUserId = "2e8efde3-b23e-409d-a296-6b9592a7020f", Description = "", Email = "Clotilde40@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company78", ThemeId = 66, WebSite = "http://adrain.name" },
                        new { Id = 72, ContactNumber = "991-633-3516 x4103", CreatedByUserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", Description = "", Email = "Lucinda_Fritsch92@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company565", ThemeId = 63, WebSite = "https://samson.org" },
                        new { Id = 73, ContactNumber = "757.428.8557", CreatedByUserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", Description = "Tempore aut autem. Alias et mollitia repudiandae eligendi architecto optio suscipit dolores voluptas. Odit itaque qui sint ut. Neque qui pariatur aut minus.", Email = "Domenick_Sawayn@gmail.com", IsActive = true, IsDeleted = false, Name = "Company649", ThemeId = 62, WebSite = "https://nona.com" },
                        new { Id = 74, ContactNumber = "314.366.1235 x7542", CreatedByUserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", Description = "Molestias voluptatibus cupiditate eum ut ducimus qui qui.", Email = "Jerry.Rolfson@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company520", ThemeId = 68, WebSite = "http://hailee.net" },
                        new { Id = 75, ContactNumber = "(394) 366-8092 x3684", CreatedByUserId = "436a886f-d941-4eda-ae4b-0166d8d84611", Description = "Excepturi id quo est molestiae officiis molestiae laborum sed. Rerum aut laboriosam et debitis maiores praesentium dolorem est ullam. Autem fugiat nulla qui repellat dolorem repudiandae consectetur praesentium iste. Vel ea at mollitia distinctio quos.", Email = "Irwin.Tremblay36@gmail.com", IsActive = true, IsDeleted = false, Name = "Company201", ThemeId = 64, WebSite = "http://garnett.biz" },
                        new { Id = 76, ContactNumber = "(797) 698-1405", CreatedByUserId = "436a886f-d941-4eda-ae4b-0166d8d84611", Description = "Commodi tempora velit voluptatibus non minima quia delectus. Et molestias fuga odio eos aut dolor.", Email = "Mattie_Windler84@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company793", ThemeId = 70, WebSite = "http://hailie.biz" },
                        new { Id = 77, ContactNumber = "1-828-463-7676", CreatedByUserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", Description = "", Email = "Jerome40@gmail.com", IsActive = true, IsDeleted = false, Name = "Company499", ThemeId = 63, WebSite = "http://mathew.net" },
                        new { Id = 78, ContactNumber = "559-850-5567 x1277", CreatedByUserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", Description = "Dolor sed ut consequatur. Voluptatibus aut molestiae voluptatem beatae vero molestiae vel. Nam tempora voluptatem labore minima praesentium non harum dolorem iste. Natus quidem id dolores pariatur in sed.", Email = "Erin_Gorczany36@gmail.com", IsActive = true, IsDeleted = false, Name = "Company487", ThemeId = 69, WebSite = "http://annabelle.com" },
                        new { Id = 79, ContactNumber = "760-799-5439", CreatedByUserId = "2e3cb29a-adcd-400a-8f21-1790baa33375", Description = "Autem dolorem eos ut enim. Corporis et voluptatem ut aut.", Email = "Luz_Weimann@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company183", ThemeId = 61, WebSite = "http://reba.info" },
                        new { Id = 80, ContactNumber = "928-700-6962 x98805", CreatedByUserId = "af132db0-f4c3-4b96-b4a9-2749ea7fc4c1", Description = "Asperiores eveniet eligendi quod quo eaque velit. Numquam laborum placeat qui qui. Blanditiis rerum nostrum aliquid fuga quasi nihil iusto. Commodi architecto neque autem.", Email = "Roscoe81@gmail.com", IsActive = true, IsDeleted = false, Name = "Company505", ThemeId = 68, WebSite = "https://ethyl.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 3, 0, 49, 57, 608, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Quam eveniet soluta voluptatem dolore consequatur.", UserId = "fdfd6ac9-b62b-4e4a-8d9d-08d525451e60" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 2, 21, 51, 29, 685, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "In provident libero voluptatibus occaecati.", UserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 2, 19, 27, 13, 930, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Vitae harum id labore blanditiis quae.", UserId = "436a886f-d941-4eda-ae4b-0166d8d84611" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 3, 14, 15, 8, 557, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Officiis inventore voluptatibus aut labore minus reiciendis.", UserId = "2e3cb29a-adcd-400a-8f21-1790baa33375" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 2, 18, 57, 53, 43, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Voluptas sed cupiditate natus.", UserId = "3e44d9ca-d67c-44d3-9660-58746a30d3ed" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 2, 18, 14, 45, 144, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Rem non dolor placeat tempora nostrum autem nobis distinctio tempora.", UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 3, 7, 22, 3, 522, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Magni voluptatum nemo deserunt et.", UserId = "436a886f-d941-4eda-ae4b-0166d8d84611" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 3, 8, 54, 37, 401, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Dicta cupiditate quia et molestiae numquam cum molestias.", UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 3, 13, 56, 15, 837, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Quasi explicabo nemo possimus consequatur dignissimos quae ipsam sint rerum.", UserId = "3e44d9ca-d67c-44d3-9660-58746a30d3ed" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 3, 11, 42, 41, 36, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Quae magnam ex.", UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme929" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme905" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme981" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme213" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme1" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme203" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme368" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme166" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme301" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme400" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", CreatedAt = new DateTime(2018, 9, 3, 0, 30, 32, 235, DateTimeKind.Local), DisplayName = "Ashlee", Email = "Judge.Lind@gmail.com", FirstName = "Edd", IsActive = true, IsDeleted = false, LastName = "Hamill", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg", RoleId = 1 },
                        new { Id = "8f0ff7d5-a4b1-440b-b9cd-c30ea4593d8f", CreatedAt = new DateTime(2018, 9, 3, 10, 23, 57, 415, DateTimeKind.Local), DisplayName = "Benton", Email = "Caleb.Williamson@gmail.com", FirstName = "Edward", IsActive = true, IsDeleted = false, LastName = "Wiza", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg", RoleId = 1 },
                        new { Id = "436a886f-d941-4eda-ae4b-0166d8d84611", CreatedAt = new DateTime(2018, 9, 3, 3, 34, 44, 522, DateTimeKind.Local), DisplayName = "Kay", Email = "Raleigh.Hammes@hotmail.com", FirstName = "Gilbert", IsActive = true, IsDeleted = false, LastName = "Anderson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg", RoleId = 1 },
                        new { Id = "2e8efde3-b23e-409d-a296-6b9592a7020f", CreatedAt = new DateTime(2018, 9, 3, 14, 13, 1, 89, DateTimeKind.Local), DisplayName = "Renee", Email = "Allie_Stiedemann@yahoo.com", FirstName = "Lionel", IsActive = true, IsDeleted = false, LastName = "Lesch", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg", RoleId = 1 },
                        new { Id = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", CreatedAt = new DateTime(2018, 9, 2, 23, 45, 20, 110, DateTimeKind.Local), DisplayName = "Jazmyn", Email = "Brigitte_Welch@hotmail.com", FirstName = "Earl", IsActive = true, IsDeleted = false, LastName = "Hirthe", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg", RoleId = 1 },
                        new { Id = "af132db0-f4c3-4b96-b4a9-2749ea7fc4c1", CreatedAt = new DateTime(2018, 9, 3, 13, 7, 2, 596, DateTimeKind.Local), DisplayName = "Ardella", Email = "Luis73@yahoo.com", FirstName = "Scarlett", IsActive = true, IsDeleted = false, LastName = "Waters", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg", RoleId = 2 },
                        new { Id = "3e44d9ca-d67c-44d3-9660-58746a30d3ed", CreatedAt = new DateTime(2018, 9, 3, 5, 43, 38, 895, DateTimeKind.Local), DisplayName = "Kianna", Email = "Nelda_Von@gmail.com", FirstName = "D'angelo", IsActive = true, IsDeleted = false, LastName = "Heidenreich", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg", RoleId = 1 },
                        new { Id = "fdfd6ac9-b62b-4e4a-8d9d-08d525451e60", CreatedAt = new DateTime(2018, 9, 3, 2, 56, 50, 576, DateTimeKind.Local), DisplayName = "Chase", Email = "Tyrel_Denesik@yahoo.com", FirstName = "Brannon", IsActive = true, IsDeleted = false, LastName = "Renner", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg", RoleId = 1 },
                        new { Id = "2e3cb29a-adcd-400a-8f21-1790baa33375", CreatedAt = new DateTime(2018, 9, 3, 16, 0, 51, 468, DateTimeKind.Local), DisplayName = "Sim", Email = "Larry_Eichmann6@gmail.com", FirstName = "Craig", IsActive = true, IsDeleted = false, LastName = "Olson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg", RoleId = 2 },
                        new { Id = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", CreatedAt = new DateTime(2018, 9, 2, 19, 44, 13, 949, DateTimeKind.Local), DisplayName = "Elda", Email = "Cleveland12@hotmail.com", FirstName = "Camilla", IsActive = true, IsDeleted = false, LastName = "Collins", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "03cdfd90-7099-41ff-ae4a-666cb98d80f4", OrganizationId = 76 },
                        new { UserId = "8f0ff7d5-a4b1-440b-b9cd-c30ea4593d8f", OrganizationId = 72 },
                        new { UserId = "436a886f-d941-4eda-ae4b-0166d8d84611", OrganizationId = 74 },
                        new { UserId = "2e8efde3-b23e-409d-a296-6b9592a7020f", OrganizationId = 71 },
                        new { UserId = "556655b2-1ce3-49db-aa85-e29bb1ceac3a", OrganizationId = 76 },
                        new { UserId = "af132db0-f4c3-4b96-b4a9-2749ea7fc4c1", OrganizationId = 72 },
                        new { UserId = "3e44d9ca-d67c-44d3-9660-58746a30d3ed", OrganizationId = 72 },
                        new { UserId = "fdfd6ac9-b62b-4e4a-8d9d-08d525451e60", OrganizationId = 74 },
                        new { UserId = "2e3cb29a-adcd-400a-8f21-1790baa33375", OrganizationId = 73 },
                        new { UserId = "ab6e60c6-9396-4a82-b6c2-a5eda5913563", OrganizationId = 78 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
