// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180910073705_AddHistoryTimeToChart")]
    partial class AddHistoryTimeToChart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 38, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 25, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 99, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 89, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 18, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 96, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 37, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 93, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 24, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 8, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 96, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 83, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 91, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 28, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "31d1aeea-fca1-4233-a640-d19ec2d5690a", IsDeleted = false, Name = "sed", Type = 0 },
                        new { Id = 22, CreatedById = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 23, CreatedById = "733804e3-2791-4002-81c8-c134b163717b", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 24, CreatedById = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85", IsDeleted = false, Name = "aspernatur", Type = 0 },
                        new { Id = 25, CreatedById = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", IsDeleted = false, Name = "voluptatem", Type = 0 },
                        new { Id = 26, CreatedById = "79e46537-a194-4592-b5ab-04b90c068eb3", IsDeleted = false, Name = "rerum", Type = 0 },
                        new { Id = 27, CreatedById = "48496f80-3505-4088-bce9-721237904d3e", IsDeleted = false, Name = "ipsam", Type = 0 },
                        new { Id = 28, CreatedById = "79e46537-a194-4592-b5ab-04b90c068eb3", IsDeleted = false, Name = "veritatis", Type = 0 },
                        new { Id = 29, CreatedById = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", IsDeleted = false, Name = "et", Type = 0 },
                        new { Id = 30, CreatedById = "94e2a11d-e4bd-4f1e-8e18-bd302131b886", IsDeleted = false, Name = "quasi", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 10, 8, 16, 59, 891, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title722" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 10, 2, 15, 5, 78, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title821" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 10, 7, 27, 12, 317, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title766" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 10, 6, 24, 17, 16, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title922" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 9, 19, 38, 28, 262, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title172" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 9, 16, 54, 3, 699, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title641" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 10, 2, 52, 5, 534, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title709" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 9, 18, 56, 45, 392, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title159" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 9, 22, 41, 18, 205, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title283" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 9, 14, 51, 20, 966, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title966" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 9, 15, 54, 54, 778, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nemo molestiae ipsum.", UserId = "48496f80-3505-4088-bce9-721237904d3e", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 9, 15, 2, 23, 793, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et est aliquid provident ut.", UserId = "94e2a11d-e4bd-4f1e-8e18-bd302131b886", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 9, 15, 6, 1, 775, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptas beatae aut.", UserId = "733804e3-2791-4002-81c8-c134b163717b", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 10, 9, 48, 5, 352, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Possimus laudantium perferendis.", UserId = "48496f80-3505-4088-bce9-721237904d3e", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 10, 2, 36, 38, 179, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eos dolorum unde omnis commodi recusandae soluta.", UserId = "48496f80-3505-4088-bce9-721237904d3e", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 9, 20, 37, 6, 418, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur deserunt fugiat.", UserId = "31d1aeea-fca1-4233-a640-d19ec2d5690a", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 10, 8, 19, 42, 479, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui vel rerum nihil est quibusdam ea.", UserId = "733804e3-2791-4002-81c8-c134b163717b", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 10, 10, 24, 38, 234, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Accusamus neque quis nulla voluptates dolores tempore error corrupti.", UserId = "48496f80-3505-4088-bce9-721237904d3e", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 10, 0, 37, 26, 100, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ipsum suscipit dolores sunt saepe enim architecto molestias reiciendis.", UserId = "31d1aeea-fca1-4233-a640-d19ec2d5690a", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 9, 13, 8, 51, 208, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Rerum harum reprehenderit soluta.", UserId = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "e8:d9:78:67:af:b3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", Title = "Instance543" },
                        new { Id = 82, Address = "b7:31:83:93:1b:c9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance184" },
                        new { Id = 83, Address = "14:7c:f9:1e:9e:63", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance814" },
                        new { Id = 84, Address = "49:c2:6b:97:56:ef", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance613" },
                        new { Id = 85, Address = "1e:db:44:46:0d:01", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance758" },
                        new { Id = 86, Address = "a1:db:5f:5c:24:6c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance520" },
                        new { Id = 87, Address = "c3:56:da:8a:2b:f5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance785" },
                        new { Id = 88, Address = "4b:dc:1d:3d:10:38", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance237" },
                        new { Id = 89, Address = "a5:23:bb:36:03:6e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Linux", Title = "Instance63" },
                        new { Id = 90, Address = "0f:23:83:76:cf:c7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", Title = "Instance449" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 27, CreatedAt = new DateTime(2018, 9, 9, 20, 36, 21, 994, DateTimeKind.Local), IsDeleted = false, Text = "Ut praesentium dolor voluptas.", UserId = "48496f80-3505-4088-bce9-721237904d3e", WasRead = false },
                        new { Id = 32, ChatId = 30, CreatedAt = new DateTime(2018, 9, 9, 21, 6, 38, 692, DateTimeKind.Local), IsDeleted = false, Text = "Qui eius ut.", UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", WasRead = true },
                        new { Id = 33, ChatId = 28, CreatedAt = new DateTime(2018, 9, 9, 20, 48, 3, 467, DateTimeKind.Local), IsDeleted = false, Text = "Saepe adipisci alias voluptatem ut aut nihil sapiente.", UserId = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6", WasRead = true },
                        new { Id = 34, ChatId = 23, CreatedAt = new DateTime(2018, 9, 9, 14, 27, 17, 993, DateTimeKind.Local), IsDeleted = false, Text = "Ut dolores dolor corporis voluptatem illo quia id numquam iure.", UserId = "94e2a11d-e4bd-4f1e-8e18-bd302131b886", WasRead = true },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 9, 9, 10, 42, 18, 245, DateTimeKind.Local), IsDeleted = false, Text = "Accusantium beatae et sunt velit reiciendis et debitis.", UserId = "94e2a11d-e4bd-4f1e-8e18-bd302131b886", WasRead = true },
                        new { Id = 36, ChatId = 28, CreatedAt = new DateTime(2018, 9, 10, 7, 35, 39, 765, DateTimeKind.Local), IsDeleted = false, Text = "Aut ut aut earum vero.", UserId = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85", WasRead = true },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 9, 9, 12, 9, 11, 787, DateTimeKind.Local), IsDeleted = false, Text = "Velit sint et quasi soluta aut similique enim aliquam voluptatum.", UserId = "733804e3-2791-4002-81c8-c134b163717b", WasRead = false },
                        new { Id = 38, ChatId = 29, CreatedAt = new DateTime(2018, 9, 9, 15, 23, 15, 962, DateTimeKind.Local), IsDeleted = false, Text = "Non earum ut et id nemo quisquam similique.", UserId = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6", WasRead = false },
                        new { Id = 39, ChatId = 30, CreatedAt = new DateTime(2018, 9, 10, 6, 31, 5, 489, DateTimeKind.Local), IsDeleted = false, Text = "Maiores quia quis earum itaque qui.", UserId = "733804e3-2791-4002-81c8-c134b163717b", WasRead = true },
                        new { Id = 40, ChatId = 29, CreatedAt = new DateTime(2018, 9, 9, 20, 10, 30, 838, DateTimeKind.Local), IsDeleted = false, Text = "Architecto officiis nobis quia.", UserId = "48496f80-3505-4088-bce9-721237904d3e", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 10, 0, 3, 50, 887, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Laborum tempora enim consequatur voluptas et odit at corporis modi.", UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 9, 16, 35, 42, 256, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Ratione neque eum animi omnis.", UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 9, 14, 44, 47, 498, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Cupiditate unde voluptatibus eos tenetur.", UserId = "733804e3-2791-4002-81c8-c134b163717b", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 9, 19, 26, 33, 203, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Culpa in et aut.", UserId = "94e2a11d-e4bd-4f1e-8e18-bd302131b886", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 10, 2, 9, 51, 365, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Et pariatur ea commodi rerum earum.", UserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 9, 20, 4, 59, 198, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Qui ducimus voluptas adipisci consequuntur.", UserId = "733804e3-2791-4002-81c8-c134b163717b", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 10, 5, 7, 59, 242, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Vero aut sequi accusantium qui ut.", UserId = "79e46537-a194-4592-b5ab-04b90c068eb3", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 9, 12, 5, 51, 545, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Dolores provident quam ex sunt nulla ut id.", UserId = "ec62c0a6-f281-40a1-a913-35c180dc66fd", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 10, 10, 3, 29, 820, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Molestiae debitis blanditiis blanditiis debitis ducimus eum ad.", UserId = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 9, 12, 3, 23, 887, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Iure ex facere qui consequatur laudantium expedita nam minima consequatur.", UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "733804e3-2791-4002-81c8-c134b163717b" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "79e46537-a194-4592-b5ab-04b90c068eb3" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "ec62c0a6-f281-40a1-a913-35c180dc66fd" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "ec62c0a6-f281-40a1-a913-35c180dc66fd" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "ec62c0a6-f281-40a1-a913-35c180dc66fd" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "711.651.8263", CreatedByUserId = "48496f80-3505-4088-bce9-721237904d3e", Description = "Inventore omnis consequatur sit. Autem ut saepe dolores debitis quaerat distinctio consequatur. Debitis quo delectus vero dignissimos possimus a illum dolor. Et non vel ad ipsa totam.", Email = "Vincenzo61@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company998", ThemeId = 69, WebSite = "https://jolie.info" },
                        new { Id = 72, ContactNumber = "(851) 373-1278 x02293", CreatedByUserId = "31d1aeea-fca1-4233-a640-d19ec2d5690a", Description = "Velit architecto pariatur accusantium facere molestiae. Omnis dignissimos eligendi est recusandae voluptates aliquid.", Email = "Cicero94@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company162", ThemeId = 65, WebSite = "http://casey.name" },
                        new { Id = 73, ContactNumber = "1-211-966-4607 x80803", CreatedByUserId = "48496f80-3505-4088-bce9-721237904d3e", Description = "Voluptatum laboriosam nulla sed corrupti aut exercitationem voluptatibus.", Email = "Bernita_Bayer@gmail.com", IsActive = true, IsDeleted = false, Name = "Company944", ThemeId = 63, WebSite = "https://clemens.info" },
                        new { Id = 74, ContactNumber = "1-246-456-0031 x633", CreatedByUserId = "733804e3-2791-4002-81c8-c134b163717b", Description = "Cupiditate voluptate deserunt veritatis illum quia praesentium suscipit vitae.", Email = "Whitney.Sipes@gmail.com", IsActive = true, IsDeleted = false, Name = "Company409", ThemeId = 70, WebSite = "http://river.biz" },
                        new { Id = 75, ContactNumber = "811-998-1747 x598", CreatedByUserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", Description = "", Email = "Estel_McGlynn@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company727", ThemeId = 68, WebSite = "http://howell.com" },
                        new { Id = 76, ContactNumber = "1-219-481-5686 x261", CreatedByUserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca", Description = "Quia ratione aperiam assumenda magnam omnis.", Email = "Ward_Hauck97@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company515", ThemeId = 65, WebSite = "http://garrett.com" },
                        new { Id = 77, ContactNumber = "(756) 217-5288 x0980", CreatedByUserId = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6", Description = "Dolorem ab id dolor facere.", Email = "Arvel.Boyer@gmail.com", IsActive = true, IsDeleted = false, Name = "Company835", ThemeId = 70, WebSite = "http://leila.net" },
                        new { Id = 78, ContactNumber = "(755) 580-7585 x792", CreatedByUserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca", Description = "", Email = "Afton66@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company360", ThemeId = 62, WebSite = "http://lindsey.org" },
                        new { Id = 79, ContactNumber = "1-223-240-3397 x2150", CreatedByUserId = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85", Description = "Aliquid officia adipisci occaecati earum distinctio.", Email = "Ada16@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company387", ThemeId = 63, WebSite = "http://johnnie.info" },
                        new { Id = 80, ContactNumber = "513-788-7830 x8497", CreatedByUserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca", Description = "Est ipsam aut et iusto sit rerum delectus vel. Repellendus sapiente nihil dignissimos. Impedit quia qui minus assumenda. Quaerat autem et consectetur.", Email = "Keely33@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company433", ThemeId = 68, WebSite = "http://janice.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 10, 9, 32, 3, 297, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Qui rerum in et occaecati.", UserId = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 9, 21, 12, 2, 129, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Et enim explicabo quas consequatur voluptatem non nemo nostrum.", UserId = "733804e3-2791-4002-81c8-c134b163717b" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 9, 18, 53, 18, 245, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Ea consequatur qui.", UserId = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 9, 18, 4, 37, 882, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Maxime doloribus libero nihil maxime.", UserId = "48496f80-3505-4088-bce9-721237904d3e" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 9, 20, 31, 13, 895, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Et quae iste quia quia.", UserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 10, 8, 34, 13, 587, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Debitis dolorum nihil.", UserId = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 9, 19, 54, 15, 772, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Ipsum et ut voluptas.", UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 9, 18, 32, 36, 556, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Accusamus consequuntur non animi.", UserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 10, 7, 31, 9, 531, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Et eaque cum sint ut delectus illum illum aut.", UserId = "ec62c0a6-f281-40a1-a913-35c180dc66fd" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 9, 12, 27, 49, 198, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "At expedita animi suscipit voluptatem in quaerat.", UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme751" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme79" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme242" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme47" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme206" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme483" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme13" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme407" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme786" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme921" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85", CreatedAt = new DateTime(2018, 9, 9, 19, 6, 27, 318, DateTimeKind.Local), DisplayName = "Zelma", Email = "Elmore.Heller29@yahoo.com", FirstName = "Maida", IsActive = true, IsDeleted = false, LastName = "Mayert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg", RoleId = 1 },
                        new { Id = "48496f80-3505-4088-bce9-721237904d3e", CreatedAt = new DateTime(2018, 9, 10, 4, 35, 50, 455, DateTimeKind.Local), DisplayName = "Mandy", Email = "Jazmyn66@yahoo.com", FirstName = "Margret", IsActive = true, IsDeleted = false, LastName = "Nikolaus", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg", RoleId = 1 },
                        new { Id = "79e46537-a194-4592-b5ab-04b90c068eb3", CreatedAt = new DateTime(2018, 9, 10, 6, 5, 32, 507, DateTimeKind.Local), DisplayName = "Alycia", Email = "Julio.Goodwin40@gmail.com", FirstName = "Brook", IsActive = true, IsDeleted = false, LastName = "Robel", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg", RoleId = 2 },
                        new { Id = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6", CreatedAt = new DateTime(2018, 9, 9, 18, 21, 41, 839, DateTimeKind.Local), DisplayName = "Emery", Email = "Wilhelmine_Hane@hotmail.com", FirstName = "Germaine", IsActive = true, IsDeleted = false, LastName = "Grimes", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg", RoleId = 1 },
                        new { Id = "94e2a11d-e4bd-4f1e-8e18-bd302131b886", CreatedAt = new DateTime(2018, 9, 10, 0, 45, 46, 297, DateTimeKind.Local), DisplayName = "Agustina", Email = "Odessa.Leannon@yahoo.com", FirstName = "Axel", IsActive = true, IsDeleted = false, LastName = "Fay", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg", RoleId = 1 },
                        new { Id = "31d1aeea-fca1-4233-a640-d19ec2d5690a", CreatedAt = new DateTime(2018, 9, 9, 23, 14, 45, 22, DateTimeKind.Local), DisplayName = "Destini", Email = "Enos.Schinner@yahoo.com", FirstName = "Russell", IsActive = true, IsDeleted = false, LastName = "Olson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg", RoleId = 1 },
                        new { Id = "ec62c0a6-f281-40a1-a913-35c180dc66fd", CreatedAt = new DateTime(2018, 9, 10, 8, 54, 43, 614, DateTimeKind.Local), DisplayName = "Bridgette", Email = "Micheal_Dicki@gmail.com", FirstName = "Simeon", IsActive = true, IsDeleted = false, LastName = "Gottlieb", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg", RoleId = 1 },
                        new { Id = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca", CreatedAt = new DateTime(2018, 9, 9, 19, 33, 28, 461, DateTimeKind.Local), DisplayName = "Pansy", Email = "Savanah.Blick@yahoo.com", FirstName = "Melisa", IsActive = true, IsDeleted = false, LastName = "White", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg", RoleId = 1 },
                        new { Id = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", CreatedAt = new DateTime(2018, 9, 9, 21, 12, 13, 440, DateTimeKind.Local), DisplayName = "Madalyn", Email = "Lura.Abbott98@yahoo.com", FirstName = "Blanche", IsActive = true, IsDeleted = false, LastName = "Kessler", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg", RoleId = 2 },
                        new { Id = "733804e3-2791-4002-81c8-c134b163717b", CreatedAt = new DateTime(2018, 9, 10, 1, 9, 38, 564, DateTimeKind.Local), DisplayName = "Domenic", Email = "Quincy_Cummerata84@yahoo.com", FirstName = "Eula", IsActive = true, IsDeleted = false, LastName = "Rippin", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "8311d2de-57c8-4c5c-8641-ebf1e1fb1c85", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "48496f80-3505-4088-bce9-721237904d3e", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "79e46537-a194-4592-b5ab-04b90c068eb3", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "4d0ca69b-3af6-4f4f-91c0-4c40af481ac6", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "94e2a11d-e4bd-4f1e-8e18-bd302131b886", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "31d1aeea-fca1-4233-a640-d19ec2d5690a", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "ec62c0a6-f281-40a1-a913-35c180dc66fd", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "eb45ec73-aae9-4fc7-9f1c-9e4ab43bd4ca", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "8ad214b9-dbd3-4eb6-ada3-eda95c538e17", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "733804e3-2791-4002-81c8-c134b163717b", OrganizationId = 77, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
