// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180809084951_AddedSeedsData")]
    partial class AddedSeedsData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 26, Type = 2 },
                        new { Id = 102, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 69, Type = 2 },
                        new { Id = 103, DashboardId = 91, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 63, Type = 1 },
                        new { Id = 104, DashboardId = 91, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 25, Type = 1 },
                        new { Id = 105, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 18, Type = 2 },
                        new { Id = 106, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 17, Type = 0 },
                        new { Id = 107, DashboardId = 100, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 55, Type = 2 },
                        new { Id = 108, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 79, Type = 0 },
                        new { Id = 109, DashboardId = 93, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source2", Threshold = 14, Type = 1 },
                        new { Id = 110, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 85, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = 9, Name = "veritatis", Type = 0 },
                        new { Id = 22, CreatedById = 3, Name = "quis", Type = 0 },
                        new { Id = 23, CreatedById = 2, Name = "deleniti", Type = 0 },
                        new { Id = 24, CreatedById = 3, Name = "ullam", Type = 0 },
                        new { Id = 25, CreatedById = 4, Name = "cum", Type = 0 },
                        new { Id = 26, CreatedById = 1, Name = "molestiae", Type = 0 },
                        new { Id = 27, CreatedById = 1, Name = "non", Type = 0 },
                        new { Id = 28, CreatedById = 5, Name = "facilis", Type = 0 },
                        new { Id = 29, CreatedById = 5, Name = "sit", Type = 0 },
                        new { Id = 30, CreatedById = 1, Name = "doloremque", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 9, 5, 21, 1, 110, DateTimeKind.Local), InstanceId = 84, Title = "Title307" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 8, 15, 58, 18, 476, DateTimeKind.Local), InstanceId = 87, Title = "Title825" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 9, 11, 49, 17, 190, DateTimeKind.Local), InstanceId = 83, Title = "Title267" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 9, 5, 47, 20, 907, DateTimeKind.Local), InstanceId = 82, Title = "Title150" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 8, 16, 11, 23, 708, DateTimeKind.Local), InstanceId = 90, Title = "Title150" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 9, 7, 3, 48, 805, DateTimeKind.Local), InstanceId = 83, Title = "Title158" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 9, 4, 30, 40, 157, DateTimeKind.Local), InstanceId = 86, Title = "Title36" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 9, 7, 29, 47, 213, DateTimeKind.Local), InstanceId = 81, Title = "Title7" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 9, 6, 43, 21, 234, DateTimeKind.Local), InstanceId = 83, Title = "Title269" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 8, 15, 55, 58, 640, DateTimeKind.Local), InstanceId = 87, Title = "Title201" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 9, 0, 10, 45, 480, DateTimeKind.Local), Text = "Atque rerum aliquam est.", UserId = 7 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 9, 8, 49, 3, 956, DateTimeKind.Local), Text = "Tempore blanditiis esse facilis tempora velit ut odit soluta.", UserId = 4 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 9, 2, 1, 40, 711, DateTimeKind.Local), Text = "Ratione sit nihil rem pariatur.", UserId = 10 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 9, 4, 3, 26, 721, DateTimeKind.Local), Text = "Et rerum consequatur est fugit.", UserId = 9 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 9, 10, 33, 0, 332, DateTimeKind.Local), Text = "Laudantium animi sequi ut.", UserId = 8 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 9, 0, 53, 25, 205, DateTimeKind.Local), Text = "Vel est alias.", UserId = 8 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 8, 21, 4, 40, 430, DateTimeKind.Local), Text = "Rem odit dolores et.", UserId = 7 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 8, 17, 24, 59, 639, DateTimeKind.Local), Text = "Veritatis velit voluptate commodi corrupti in eos est dicta.", UserId = 6 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 8, 15, 9, 5, 244, DateTimeKind.Local), Text = "Corporis ea facilis vitae ut et sed consequatur corporis ipsa.", UserId = 9 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 9, 10, 37, 36, 44, DateTimeKind.Local), Text = "Labore eos ratione voluptas ut nulla et et accusantium architecto.", UserId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "8f:ec:37:ae:27:ad", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 82, Address = "1c:c2:74:83:0a:5f", OrganizationId = 74, Platform = "Windows" },
                        new { Id = 83, Address = "36:11:8d:2c:69:ea", OrganizationId = 77, Platform = "Windows" },
                        new { Id = 84, Address = "29:11:35:1c:7f:a7", OrganizationId = 72, Platform = "Linux" },
                        new { Id = 85, Address = "56:04:a5:91:b3:ae", OrganizationId = 74, Platform = "Linux" },
                        new { Id = 86, Address = "4e:55:46:8e:16:da", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 87, Address = "c7:ab:d6:4e:e5:11", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 88, Address = "51:8c:85:15:78:28", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 89, Address = "a0:ed:2d:06:ba:bd", OrganizationId = 75, Platform = "Windows" },
                        new { Id = 90, Address = "bb:e3:dd:13:a3:0c", OrganizationId = 76, Platform = "Linux" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 22, CreatedAt = new DateTime(2018, 8, 9, 2, 30, 2, 912, DateTimeKind.Local), Text = "Aut harum cupiditate dolor voluptatem nulla.", UserId = 2, WasRead = true },
                        new { Id = 32, ChatId = 21, CreatedAt = new DateTime(2018, 8, 9, 6, 21, 22, 679, DateTimeKind.Local), Text = "Est omnis qui quia.", UserId = 10, WasRead = false },
                        new { Id = 33, ChatId = 30, CreatedAt = new DateTime(2018, 8, 9, 9, 7, 23, 654, DateTimeKind.Local), Text = "Pariatur rerum suscipit commodi qui est autem nesciunt qui.", UserId = 2, WasRead = true },
                        new { Id = 34, ChatId = 29, CreatedAt = new DateTime(2018, 8, 9, 8, 54, 35, 476, DateTimeKind.Local), Text = "Illo aliquam nulla doloremque voluptas.", UserId = 6, WasRead = true },
                        new { Id = 35, ChatId = 30, CreatedAt = new DateTime(2018, 8, 8, 20, 4, 11, 374, DateTimeKind.Local), Text = "Quod vel facere et.", UserId = 5, WasRead = true },
                        new { Id = 36, ChatId = 25, CreatedAt = new DateTime(2018, 8, 9, 7, 59, 2, 363, DateTimeKind.Local), Text = "Dolorem harum consequatur.", UserId = 6, WasRead = true },
                        new { Id = 37, ChatId = 25, CreatedAt = new DateTime(2018, 8, 9, 5, 37, 30, 115, DateTimeKind.Local), Text = "Sit asperiores nobis.", UserId = 5, WasRead = true },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 8, 8, 20, 41, 55, 817, DateTimeKind.Local), Text = "Tenetur aut velit.", UserId = 10, WasRead = false },
                        new { Id = 39, ChatId = 28, CreatedAt = new DateTime(2018, 8, 8, 18, 33, 38, 768, DateTimeKind.Local), Text = "Aspernatur dolorum ut vero.", UserId = 6, WasRead = false },
                        new { Id = 40, ChatId = 29, CreatedAt = new DateTime(2018, 8, 9, 9, 23, 16, 857, DateTimeKind.Local), Text = "Quo accusantium est nobis tenetur est culpa temporibus.", UserId = 9, WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 8, 12, 8, 54, 488, DateTimeKind.Local), NotificationSettingId = 19, Text = "Sunt quam totam optio iure perspiciatis rerum.", UserId = 6 },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 8, 16, 25, 20, 147, DateTimeKind.Local), NotificationSettingId = 17, Text = "Qui facere animi in sequi enim culpa autem.", UserId = 9 },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 8, 21, 46, 18, 27, DateTimeKind.Local), NotificationSettingId = 20, Text = "Esse at et animi ab.", UserId = 2 },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 8, 20, 47, 36, 51, DateTimeKind.Local), NotificationSettingId = 11, Text = "Quod eaque rerum sint.", UserId = 7 },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 8, 14, 40, 55, 137, DateTimeKind.Local), NotificationSettingId = 18, Text = "Perspiciatis neque asperiores quisquam.", UserId = 6 },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 9, 10, 32, 51, 702, DateTimeKind.Local), NotificationSettingId = 19, Text = "Omnis reprehenderit ea ut saepe molestiae cum laudantium.", UserId = 1 },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 8, 18, 40, 50, 277, DateTimeKind.Local), NotificationSettingId = 11, Text = "Earum deserunt in ea itaque totam voluptas.", UserId = 8 },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 8, 23, 0, 24, 608, DateTimeKind.Local), NotificationSettingId = 11, Text = "Eligendi deleniti unde voluptatem libero quidem facilis.", UserId = 4 },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 8, 17, 13, 31, 896, DateTimeKind.Local), NotificationSettingId = 14, Text = "Et adipisci quo expedita aliquid illum ea nihil praesentium sunt.", UserId = 6 },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 8, 16, 56, 46, 724, DateTimeKind.Local), NotificationSettingId = 17, Text = "Omnis harum dolor velit quo inventore recusandae corrupti eos libero.", UserId = 4 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = 6 },
                        new { Id = 12, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = 3 },
                        new { Id = 13, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = 2 },
                        new { Id = 14, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = 9 },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = 3 },
                        new { Id = 16, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = 6 },
                        new { Id = 17, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = 6 },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = 8 },
                        new { Id = 19, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = 9 },
                        new { Id = 20, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = 3 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(972) 589-7915 x2885", CreatedByUserId = 8, Description = "Amet est quis a sapiente alias.", Email = "Jaydon.Cassin78@hotmail.com", IsActive = true, Name = "Company717", ThemeId = 63, WebSite = "https://beverly.biz" },
                        new { Id = 72, ContactNumber = "306-667-0280 x65595", CreatedByUserId = 1, Description = "Voluptatem optio voluptatibus distinctio dignissimos vel sit molestiae. Quia exercitationem iusto ut fugit sed beatae ea. Qui est porro laboriosam. Asperiores culpa ea in.", Email = "Bell.Rice37@gmail.com", IsActive = true, Name = "Company435", ThemeId = 65, WebSite = "https://eliezer.info" },
                        new { Id = 73, ContactNumber = "896.777.9915 x1703", CreatedByUserId = 10, Description = "", Email = "Barton_Murray@gmail.com", IsActive = true, Name = "Company524", ThemeId = 66, WebSite = "http://buster.net" },
                        new { Id = 74, ContactNumber = "(662) 947-7935", CreatedByUserId = 6, Description = "Dignissimos voluptatum et voluptates aliquid consequatur sed qui id.", Email = "Hardy.Dach@gmail.com", IsActive = true, Name = "Company988", ThemeId = 61, WebSite = "http://arnoldo.biz" },
                        new { Id = 75, ContactNumber = "(499) 322-6059 x7259", CreatedByUserId = 2, Description = "Quibusdam quam aut id nam perferendis pariatur.", Email = "Gene79@hotmail.com", IsActive = true, Name = "Company483", ThemeId = 62, WebSite = "http://lloyd.info" },
                        new { Id = 76, ContactNumber = "1-279-515-0177 x1446", CreatedByUserId = 10, Description = "Placeat eum accusantium enim quia omnis quisquam quas et. Quaerat et similique illo necessitatibus nulla dolor. Deserunt commodi cum saepe dolores sunt hic. Ut in quidem aut harum voluptatem est dolorum.", Email = "Ollie_Mitchell@gmail.com", IsActive = true, Name = "Company758", ThemeId = 66, WebSite = "http://newell.com" },
                        new { Id = 77, ContactNumber = "726.980.6083 x936", CreatedByUserId = 8, Description = "Accusamus dolorem non aut enim. Voluptatem laboriosam quia itaque consequuntur consequatur est odio nihil tenetur.", Email = "Dangelo18@yahoo.com", IsActive = true, Name = "Company724", ThemeId = 69, WebSite = "https://elvis.com" },
                        new { Id = 78, ContactNumber = "573.833.6286 x5517", CreatedByUserId = 6, Description = "Voluptatibus facilis voluptatem vel nesciunt unde ducimus aut. Molestias excepturi amet doloribus suscipit velit aut consequuntur suscipit. Voluptas sunt aliquam et nisi laboriosam.", Email = "Flossie.Hahn97@yahoo.com", IsActive = true, Name = "Company158", ThemeId = 70, WebSite = "https://amalia.biz" },
                        new { Id = 79, ContactNumber = "995-488-4241 x4482", CreatedByUserId = 8, Description = "Qui culpa aut. Culpa natus ut.", Email = "Consuelo.McKenzie99@hotmail.com", IsActive = true, Name = "Company546", ThemeId = 69, WebSite = "https://stacey.org" },
                        new { Id = 80, ContactNumber = "624.793.4354 x33532", CreatedByUserId = 5, Description = "Autem ab autem.", Email = "Justice.Harvey@gmail.com", IsActive = true, Name = "Company303", ThemeId = 63, WebSite = "http://meaghan.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 8, 18, 0, 26, 611, DateTimeKind.Local), FeedbackId = 41, Text = "Maxime et rerum nemo nostrum voluptas rem omnis qui.", UserId = 9 },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 9, 11, 24, 18, 965, DateTimeKind.Local), FeedbackId = 46, Text = "Id velit corporis similique.", UserId = 6 },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 9, 11, 5, 4, 575, DateTimeKind.Local), FeedbackId = 43, Text = "Dolore quaerat asperiores rerum at et.", UserId = 3 },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 8, 18, 21, 35, 968, DateTimeKind.Local), FeedbackId = 48, Text = "Deserunt rerum sit voluptatem unde.", UserId = 10 },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 9, 2, 19, 37, 678, DateTimeKind.Local), FeedbackId = 49, Text = "Autem in temporibus.", UserId = 4 },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 9, 0, 47, 24, 297, DateTimeKind.Local), FeedbackId = 45, Text = "Aut dicta ut.", UserId = 1 },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 9, 4, 37, 10, 117, DateTimeKind.Local), FeedbackId = 45, Text = "Autem et reprehenderit facilis nihil odio et odio.", UserId = 2 },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 8, 21, 58, 40, 531, DateTimeKind.Local), FeedbackId = 43, Text = "Qui voluptatibus esse eos.", UserId = 6 },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 8, 16, 24, 49, 691, DateTimeKind.Local), FeedbackId = 50, Text = "Sit aut praesentium et cum quasi repellendus.", UserId = 10 },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 9, 9, 31, 19, 655, DateTimeKind.Local), FeedbackId = 41, Text = "Enim explicabo dolore aut qui sequi vitae sunt enim.", UserId = 10 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme609" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme87" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme888" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme364" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme352" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme395" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme894" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme493" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme245" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme594" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecondName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 8, 9, 1, 4, 28, 760, DateTimeKind.Local), DisplayName = "Ova", Email = "Weldon_Steuber92@yahoo.com", FirstName = "Novella", IsActive = true, RoleId = 2, SecondName = "Okuneva" },
                        new { Id = 2, CreatedAt = new DateTime(2018, 8, 9, 3, 1, 46, 140, DateTimeKind.Local), DisplayName = "Josiah", Email = "Sharon.Ondricka@hotmail.com", FirstName = "Breanna", IsActive = true, RoleId = 2, SecondName = "Powlowski" },
                        new { Id = 3, CreatedAt = new DateTime(2018, 8, 9, 2, 21, 13, 78, DateTimeKind.Local), DisplayName = "Isabel", Email = "Carole_Sauer58@yahoo.com", FirstName = "Eleanore", IsActive = true, RoleId = 1, SecondName = "Hilpert" },
                        new { Id = 4, CreatedAt = new DateTime(2018, 8, 8, 22, 42, 32, 977, DateTimeKind.Local), DisplayName = "Emilia", Email = "Boris_Cruickshank57@yahoo.com", FirstName = "Tierra", IsActive = true, RoleId = 2, SecondName = "Ledner" },
                        new { Id = 5, CreatedAt = new DateTime(2018, 8, 8, 16, 42, 36, 241, DateTimeKind.Local), DisplayName = "Katlynn", Email = "Isaac.Harvey47@yahoo.com", FirstName = "Burley", IsActive = true, RoleId = 1, SecondName = "Botsford" },
                        new { Id = 6, CreatedAt = new DateTime(2018, 8, 9, 5, 52, 29, 466, DateTimeKind.Local), DisplayName = "Edna", Email = "Velva3@yahoo.com", FirstName = "Maribel", IsActive = true, RoleId = 1, SecondName = "Kovacek" },
                        new { Id = 7, CreatedAt = new DateTime(2018, 8, 8, 23, 23, 47, 940, DateTimeKind.Local), DisplayName = "Connie", Email = "Colten.Crona66@gmail.com", FirstName = "Amir", IsActive = true, RoleId = 2, SecondName = "O'Kon" },
                        new { Id = 8, CreatedAt = new DateTime(2018, 8, 8, 20, 48, 28, 902, DateTimeKind.Local), DisplayName = "Dannie", Email = "Sheldon.Metz@yahoo.com", FirstName = "Camilla", IsActive = true, RoleId = 1, SecondName = "Hegmann" },
                        new { Id = 9, CreatedAt = new DateTime(2018, 8, 8, 22, 53, 59, 855, DateTimeKind.Local), DisplayName = "Lia", Email = "Roscoe.Hegmann1@hotmail.com", FirstName = "Teagan", IsActive = true, RoleId = 2, SecondName = "Kirlin" },
                        new { Id = 10, CreatedAt = new DateTime(2018, 8, 9, 7, 20, 5, 871, DateTimeKind.Local), DisplayName = "Audreanne", Email = "Fanny18@yahoo.com", FirstName = "Elias", IsActive = true, RoleId = 2, SecondName = "Monahan" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = 1, OrganizationId = 71 },
                        new { UserId = 2, OrganizationId = 78 },
                        new { UserId = 3, OrganizationId = 74 },
                        new { UserId = 4, OrganizationId = 75 },
                        new { UserId = 5, OrganizationId = 75 },
                        new { UserId = 6, OrganizationId = 76 },
                        new { UserId = 7, OrganizationId = 79 },
                        new { UserId = 8, OrganizationId = 71 },
                        new { UserId = 9, OrganizationId = 72 },
                        new { UserId = 10, OrganizationId = 75 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Feedback", "Feedback")
                        .WithOne("Response")
                        .HasForeignKey("Watcher.DataAccess.Entities.Response", "FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
