// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180907075320_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 99, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 89, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 23, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 22, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 87, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 99, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 14, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 6, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 71, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 97, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 5, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614", IsDeleted = false, Name = "aperiam", Type = 0 },
                        new { Id = 22, CreatedById = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614", IsDeleted = false, Name = "optio", Type = 0 },
                        new { Id = 23, CreatedById = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", IsDeleted = false, Name = "nisi", Type = 0 },
                        new { Id = 24, CreatedById = "a0901b20-6809-408e-99ad-34bad597bc1a", IsDeleted = false, Name = "facilis", Type = 0 },
                        new { Id = 25, CreatedById = "bea1b89b-27f6-471d-a9ef-3ff7452d038a", IsDeleted = false, Name = "harum", Type = 0 },
                        new { Id = 26, CreatedById = "d379db4b-5ad6-4186-930f-f7e8ae97ec21", IsDeleted = false, Name = "dignissimos", Type = 0 },
                        new { Id = 27, CreatedById = "a0901b20-6809-408e-99ad-34bad597bc1a", IsDeleted = false, Name = "dolorem", Type = 0 },
                        new { Id = 28, CreatedById = "0d96ad0e-f880-415b-85bd-3cf6e4786597", IsDeleted = false, Name = "vel", Type = 0 },
                        new { Id = 29, CreatedById = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", IsDeleted = false, Name = "similique", Type = 0 },
                        new { Id = 30, CreatedById = "0d96ad0e-f880-415b-85bd-3cf6e4786597", IsDeleted = false, Name = "pariatur", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 6, 21, 44, 51, 45, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title492" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 7, 4, 30, 19, 379, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title2" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 6, 14, 32, 5, 12, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title228" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 7, 6, 9, 15, 909, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title117" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 7, 8, 7, 1, 438, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title140" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 7, 1, 30, 12, 117, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title629" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 6, 16, 19, 11, 952, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title920" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 6, 11, 17, 43, 631, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title612" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 6, 18, 55, 14, 482, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title28" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 7, 2, 7, 44, 351, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title493" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 6, 21, 59, 54, 202, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptates quia sunt quis.", UserId = "a0901b20-6809-408e-99ad-34bad597bc1a", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 6, 11, 3, 0, 419, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Mollitia aliquam nesciunt officiis doloremque libero minus et cumque ut.", UserId = "a0901b20-6809-408e-99ad-34bad597bc1a", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 7, 6, 25, 12, 296, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Blanditiis non et ipsum iusto hic quam architecto.", UserId = "d379db4b-5ad6-4186-930f-f7e8ae97ec21", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 6, 13, 4, 30, 580, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Atque accusamus soluta nobis qui et quae sunt omnis culpa.", UserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 6, 19, 25, 27, 122, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ea animi iure eos animi eaque itaque unde.", UserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 7, 6, 51, 58, 540, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Eum laboriosam et itaque qui qui necessitatibus voluptate dolores.", UserId = "bea1b89b-27f6-471d-a9ef-3ff7452d038a", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 7, 5, 38, 5, 947, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Doloribus ab dolor blanditiis.", UserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 6, 14, 54, 40, 410, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequuntur unde ipsam eos consequatur.", UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 7, 3, 43, 15, 643, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatum ratione sit dignissimos voluptas animi necessitatibus.", UserId = "bea1b89b-27f6-471d-a9ef-3ff7452d038a", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 7, 9, 3, 22, 983, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aut quas sequi est et.", UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "65:d0:e6:b6:83:80", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance756" },
                        new { Id = 82, Address = "95:76:69:4b:4a:66", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance403" },
                        new { Id = 83, Address = "e8:81:96:73:04:12", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance366" },
                        new { Id = 84, Address = "e4:b9:d5:b4:34:a7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance65" },
                        new { Id = 85, Address = "67:cf:59:8e:68:76", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance317" },
                        new { Id = 86, Address = "07:fd:fe:1f:37:e3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance900" },
                        new { Id = 87, Address = "e2:34:ea:db:4b:dc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance695" },
                        new { Id = 88, Address = "c8:cd:dc:24:3a:19", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Linux", Title = "Instance89" },
                        new { Id = 89, Address = "5d:c5:40:49:84:e7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance41" },
                        new { Id = 90, Address = "6d:2b:66:e0:56:33", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance491" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 30, CreatedAt = new DateTime(2018, 9, 7, 6, 13, 4, 682, DateTimeKind.Local), IsDeleted = false, Text = "Blanditiis iure facere beatae rerum iusto a sequi.", UserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", WasRead = false },
                        new { Id = 32, ChatId = 29, CreatedAt = new DateTime(2018, 9, 6, 17, 19, 2, 923, DateTimeKind.Local), IsDeleted = false, Text = "Sit quia omnis voluptatum modi et autem sunt rerum minus.", UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259", WasRead = false },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 9, 6, 18, 4, 25, 27, DateTimeKind.Local), IsDeleted = false, Text = "Molestiae nisi maiores ipsa voluptatem et culpa distinctio earum.", UserId = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", WasRead = false },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 9, 7, 10, 18, 11, 946, DateTimeKind.Local), IsDeleted = false, Text = "Et eos et necessitatibus fugiat vero quia sed.", UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259", WasRead = true },
                        new { Id = 35, ChatId = 29, CreatedAt = new DateTime(2018, 9, 6, 16, 17, 14, 249, DateTimeKind.Local), IsDeleted = false, Text = "Excepturi et molestiae.", UserId = "d379db4b-5ad6-4186-930f-f7e8ae97ec21", WasRead = true },
                        new { Id = 36, ChatId = 26, CreatedAt = new DateTime(2018, 9, 6, 22, 23, 45, 398, DateTimeKind.Local), IsDeleted = false, Text = "Modi non et a dolores odio perspiciatis fugiat.", UserId = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", WasRead = false },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 9, 6, 11, 4, 0, 936, DateTimeKind.Local), IsDeleted = false, Text = "Debitis mollitia voluptas voluptas aperiam nobis dolorum modi magnam.", UserId = "073419fb-85d6-483c-8bff-d74d8f1c1fd3", WasRead = false },
                        new { Id = 38, ChatId = 26, CreatedAt = new DateTime(2018, 9, 7, 3, 1, 42, 356, DateTimeKind.Local), IsDeleted = false, Text = "Consequatur sit culpa.", UserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597", WasRead = false },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 9, 6, 13, 39, 29, 974, DateTimeKind.Local), IsDeleted = false, Text = "Non mollitia recusandae suscipit quam et consequatur perspiciatis quas.", UserId = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", WasRead = true },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 9, 6, 21, 56, 8, 782, DateTimeKind.Local), IsDeleted = false, Text = "Mollitia molestias quod.", UserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 6, 13, 21, 1, 153, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Consectetur aut at qui dolor qui dolor earum excepturi.", UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 6, 23, 47, 18, 578, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Aperiam molestiae voluptates laudantium et voluptas hic.", UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 6, 12, 3, 30, 577, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Voluptas aspernatur quia minima non aspernatur aliquam dolorem aut.", UserId = "6cd2b6ca-6f73-4032-8da0-e7ce8d042aee", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 6, 14, 47, 25, 229, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Soluta delectus blanditiis dicta ut omnis provident.", UserId = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 6, 11, 13, 4, 849, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Ipsa nihil deserunt.", UserId = "073419fb-85d6-483c-8bff-d74d8f1c1fd3", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 6, 22, 49, 54, 367, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Tempore quia consequatur ullam vitae laudantium.", UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 7, 1, 37, 7, 906, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Voluptates consequatur fuga et voluptas vel dolor nam.", UserId = "a0901b20-6809-408e-99ad-34bad597bc1a", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 6, 19, 19, 32, 486, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Enim aut labore delectus illo labore quas molestias ut omnis.", UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 6, 22, 42, 28, 478, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Non vel rerum doloribus culpa a eos necessitatibus non mollitia.", UserId = "a0901b20-6809-408e-99ad-34bad597bc1a", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 7, 3, 51, 19, 196, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Consequatur quia voluptatem.", UserId = "a0901b20-6809-408e-99ad-34bad597bc1a", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "d379db4b-5ad6-4186-930f-f7e8ae97ec21" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "bea1b89b-27f6-471d-a9ef-3ff7452d038a" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "d379db4b-5ad6-4186-930f-f7e8ae97ec21" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "d379db4b-5ad6-4186-930f-f7e8ae97ec21" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "906-360-0689", CreatedByUserId = "6cd2b6ca-6f73-4032-8da0-e7ce8d042aee", Description = "Provident rerum nihil nulla esse reiciendis unde impedit inventore facere. Aut tempora ab temporibus totam. Ut ut aut nemo dolorem est ratione recusandae molestiae quis. Quo quidem voluptas quis voluptas quos corporis esse enim quia.", Email = "Robb.Becker15@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company255", ThemeId = 65, WebSite = "http://kristian.info" },
                        new { Id = 72, ContactNumber = "563-982-9966 x9490", CreatedByUserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614", Description = "Placeat autem nesciunt autem quos sed aut soluta. Error incidunt aut. Maxime sunt dicta sapiente neque vero qui vel recusandae unde.", Email = "Cordell.VonRueden62@gmail.com", IsActive = true, IsDeleted = false, Name = "Company34", ThemeId = 63, WebSite = "http://linwood.net" },
                        new { Id = 73, ContactNumber = "1-513-990-3309 x08094", CreatedByUserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597", Description = "Iure et vel eum. Sed id ullam. Quae ad nisi ipsam autem labore accusamus. Dolorum beatae inventore unde iusto consequatur culpa et.", Email = "Lorenza91@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company755", ThemeId = 64, WebSite = "http://monroe.org" },
                        new { Id = 74, ContactNumber = "1-430-439-0971", CreatedByUserId = "073419fb-85d6-483c-8bff-d74d8f1c1fd3", Description = "Blanditiis quis vel assumenda mollitia tenetur fugit ut officia magni. Alias laboriosam sit voluptatem. Hic perspiciatis alias.", Email = "Molly_Goldner@gmail.com", IsActive = true, IsDeleted = false, Name = "Company734", ThemeId = 69, WebSite = "https://quinn.com" },
                        new { Id = 75, ContactNumber = "984.986.1868", CreatedByUserId = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", Description = "Magni commodi cum voluptatem. Beatae perferendis amet ratione aliquid amet molestiae perferendis.", Email = "Martine84@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company531", ThemeId = 61, WebSite = "http://dusty.biz" },
                        new { Id = 76, ContactNumber = "1-417-490-0638", CreatedByUserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", Description = "", Email = "Mya.Haag5@gmail.com", IsActive = true, IsDeleted = false, Name = "Company64", ThemeId = 65, WebSite = "http://jolie.org" },
                        new { Id = 77, ContactNumber = "230-333-5796 x896", CreatedByUserId = "073419fb-85d6-483c-8bff-d74d8f1c1fd3", Description = "Tenetur quae facere quia vel inventore ipsam ipsa quibusdam sit.", Email = "Lavonne.Sauer24@gmail.com", IsActive = true, IsDeleted = false, Name = "Company267", ThemeId = 66, WebSite = "https://bernadine.org" },
                        new { Id = 78, ContactNumber = "1-254-645-2095 x941", CreatedByUserId = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", Description = "Nesciunt consequatur dolor ipsum perspiciatis et vero quisquam saepe nemo. Sint omnis temporibus. Laboriosam odit incidunt provident quod.", Email = "Olga31@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company616", ThemeId = 63, WebSite = "https://providenci.net" },
                        new { Id = 79, ContactNumber = "490.261.4186 x13672", CreatedByUserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", Description = "Debitis et libero illo. Eveniet omnis sint nihil. Sunt qui cumque.", Email = "Kailyn.Wolf@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company609", ThemeId = 64, WebSite = "https://willard.name" },
                        new { Id = 80, ContactNumber = "658-587-7777 x99111", CreatedByUserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597", Description = "", Email = "Nick47@gmail.com", IsActive = true, IsDeleted = false, Name = "Company445", ThemeId = 62, WebSite = "http://arnold.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 7, 9, 15, 25, 448, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Odio in consequatur quam qui quisquam facilis laboriosam qui et.", UserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 7, 4, 35, 13, 847, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Voluptatem quo esse.", UserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 7, 7, 15, 37, 143, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Natus aspernatur facere autem dolores odit qui.", UserId = "073419fb-85d6-483c-8bff-d74d8f1c1fd3" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 6, 16, 53, 57, 457, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "In voluptas reprehenderit dolorem.", UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 7, 5, 50, 28, 591, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Quibusdam quas blanditiis est incidunt sit.", UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 6, 13, 45, 7, 424, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Enim labore quia quo quam.", UserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 7, 4, 27, 17, 974, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Qui laborum dolore amet impedit adipisci eum fuga.", UserId = "6cd2b6ca-6f73-4032-8da0-e7ce8d042aee" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 6, 12, 38, 45, 728, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Commodi cumque quos.", UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 7, 6, 56, 27, 465, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Cupiditate est et aut voluptates fugiat.", UserId = "a0901b20-6809-408e-99ad-34bad597bc1a" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 7, 3, 19, 26, 857, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Nihil excepturi et eligendi nihil aut pariatur unde.", UserId = "6cd2b6ca-6f73-4032-8da0-e7ce8d042aee" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme402" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme630" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme632" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme846" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme512" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme383" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme201" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme591" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme354" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme980" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614", CreatedAt = new DateTime(2018, 9, 6, 15, 6, 49, 835, DateTimeKind.Local), DisplayName = "Myrtice", Email = "Polly_Gutmann50@gmail.com", FirstName = "Nicklaus", IsActive = true, IsDeleted = false, LastName = "Braun", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg", RoleId = 1 },
                        new { Id = "d379db4b-5ad6-4186-930f-f7e8ae97ec21", CreatedAt = new DateTime(2018, 9, 7, 3, 4, 35, 136, DateTimeKind.Local), DisplayName = "Teresa", Email = "Landen.Wolff69@gmail.com", FirstName = "Betsy", IsActive = true, IsDeleted = false, LastName = "Will", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg", RoleId = 1 },
                        new { Id = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", CreatedAt = new DateTime(2018, 9, 6, 18, 17, 35, 182, DateTimeKind.Local), DisplayName = "Lauretta", Email = "Tristin_West@gmail.com", FirstName = "Mary", IsActive = true, IsDeleted = false, LastName = "Bruen", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg", RoleId = 2 },
                        new { Id = "bea1b89b-27f6-471d-a9ef-3ff7452d038a", CreatedAt = new DateTime(2018, 9, 7, 8, 31, 44, 288, DateTimeKind.Local), DisplayName = "Anderson", Email = "Maria.Kuvalis4@hotmail.com", FirstName = "Juwan", IsActive = true, IsDeleted = false, LastName = "Kulas", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg", RoleId = 1 },
                        new { Id = "073419fb-85d6-483c-8bff-d74d8f1c1fd3", CreatedAt = new DateTime(2018, 9, 7, 3, 46, 32, 709, DateTimeKind.Local), DisplayName = "Jordane", Email = "Athena.Kovacek78@yahoo.com", FirstName = "Glenna", IsActive = true, IsDeleted = false, LastName = "Dickens", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg", RoleId = 2 },
                        new { Id = "4178fd39-7def-4d3b-a1bc-6306e894b259", CreatedAt = new DateTime(2018, 9, 7, 9, 45, 12, 531, DateTimeKind.Local), DisplayName = "Melba", Email = "Kaylah48@hotmail.com", FirstName = "Marta", IsActive = true, IsDeleted = false, LastName = "Quitzon", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg", RoleId = 1 },
                        new { Id = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", CreatedAt = new DateTime(2018, 9, 7, 10, 37, 4, 948, DateTimeKind.Local), DisplayName = "Amaya", Email = "Norma.Wolff57@gmail.com", FirstName = "Mable", IsActive = true, IsDeleted = false, LastName = "Lemke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg", RoleId = 1 },
                        new { Id = "6cd2b6ca-6f73-4032-8da0-e7ce8d042aee", CreatedAt = new DateTime(2018, 9, 7, 6, 11, 57, 319, DateTimeKind.Local), DisplayName = "Irving", Email = "Alford.Ryan@yahoo.com", FirstName = "Tony", IsActive = true, IsDeleted = false, LastName = "Kassulke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg", RoleId = 1 },
                        new { Id = "a0901b20-6809-408e-99ad-34bad597bc1a", CreatedAt = new DateTime(2018, 9, 7, 2, 34, 14, 163, DateTimeKind.Local), DisplayName = "Peyton", Email = "Martin_Senger@hotmail.com", FirstName = "Dayna", IsActive = true, IsDeleted = false, LastName = "Wintheiser", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg", RoleId = 2 },
                        new { Id = "0d96ad0e-f880-415b-85bd-3cf6e4786597", CreatedAt = new DateTime(2018, 9, 6, 11, 7, 51, 995, DateTimeKind.Local), DisplayName = "Aliza", Email = "Darrel50@gmail.com", FirstName = "Salvador", IsActive = true, IsDeleted = false, LastName = "Wisoky", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "b8983bf1-3fb8-41eb-baab-03f3e5dfb614", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "d379db4b-5ad6-4186-930f-f7e8ae97ec21", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "b8e2aaa9-e682-4b55-a302-3e2a4b00be11", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "bea1b89b-27f6-471d-a9ef-3ff7452d038a", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "073419fb-85d6-483c-8bff-d74d8f1c1fd3", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "4178fd39-7def-4d3b-a1bc-6306e894b259", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "b7f0e7a7-ff95-4a2d-9d2a-8cf99a381294", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "6cd2b6ca-6f73-4032-8da0-e7ce8d042aee", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "a0901b20-6809-408e-99ad-34bad597bc1a", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "0d96ad0e-f880-415b-85bd-3cf6e4786597", OrganizationId = 72, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
