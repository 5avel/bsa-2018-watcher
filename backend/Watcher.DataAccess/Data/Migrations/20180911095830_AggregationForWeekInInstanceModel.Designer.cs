// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180911095830_AggregationForWeekInInstanceModel")]
    partial class AggregationForWeekInInstanceModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 50, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 63, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 95, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 10, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 97, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 92, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 92, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 35, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 100, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 1, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 100, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 85, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 98, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 3, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 94, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 59, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 96, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 39, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "b24b21aa-3996-4d86-8f7d-e05aa486d370", IsDeleted = false, Name = "ut", Type = 0 },
                        new { Id = 22, CreatedById = "cda19867-84de-4479-93a6-43270bef193f", IsDeleted = false, Name = "est", Type = 0 },
                        new { Id = 23, CreatedById = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", IsDeleted = false, Name = "eos", Type = 0 },
                        new { Id = 24, CreatedById = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 25, CreatedById = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", IsDeleted = false, Name = "harum", Type = 0 },
                        new { Id = 26, CreatedById = "cda19867-84de-4479-93a6-43270bef193f", IsDeleted = false, Name = "suscipit", Type = 0 },
                        new { Id = 27, CreatedById = "e2e54396-b4f8-4a18-b086-3eb415e3c272", IsDeleted = false, Name = "hic", Type = 0 },
                        new { Id = 28, CreatedById = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", IsDeleted = false, Name = "eum", Type = 0 },
                        new { Id = 29, CreatedById = "6cc549f2-afeb-4c8c-9900-9f218ad0e2dc", IsDeleted = false, Name = "ad", Type = 0 },
                        new { Id = 30, CreatedById = "9ae2e670-2176-43d0-961e-09eac31bce0e", IsDeleted = false, Name = "impedit", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 10, 16, 15, 19, 429, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title684" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 11, 8, 44, 20, 243, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title920" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 11, 7, 23, 11, 466, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title570" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 11, 12, 54, 36, 692, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title221" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 10, 23, 0, 7, 463, DateTimeKind.Local), InstanceId = 81, IsDeleted = false, Title = "Title507" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 10, 19, 57, 42, 908, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title527" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 11, 3, 38, 5, 834, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title234" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 11, 11, 13, 5, 975, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title424" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 10, 21, 26, 8, 974, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title446" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 10, 19, 59, 27, 358, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title654" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 10, 18, 23, 40, 565, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolore eveniet impedit.", UserId = "389a422b-9013-4486-b81f-7b6dcca703f1", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 11, 9, 46, 43, 101, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Vel quo enim sit error quaerat nisi et nisi quae.", UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 11, 10, 20, 50, 846, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Animi ut velit ipsa ipsa perferendis dolor voluptatibus quaerat placeat.", UserId = "389a422b-9013-4486-b81f-7b6dcca703f1", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 11, 1, 32, 25, 406, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Adipisci commodi aut.", UserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 10, 14, 40, 40, 825, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui autem eveniet inventore voluptas aut.", UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 10, 20, 42, 42, 916, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ipsum impedit consequuntur enim est rerum et.", UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 11, 11, 26, 58, 700, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Libero omnis vel reiciendis sed sapiente nesciunt fugiat natus.", UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 10, 20, 7, 14, 696, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et dolorem est ea officia.", UserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 11, 4, 11, 50, 440, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Doloremque fugit enim nesciunt vel unde fuga quibusdam velit.", UserId = "6cc549f2-afeb-4c8c-9900-9f218ad0e2dc", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 11, 8, 59, 32, 401, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Possimus dolorum omnis est aliquid qui dolor explicabo.", UserId = "389a422b-9013-4486-b81f-7b6dcca703f1", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "33:90:26:f1:8e:38", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance201" },
                        new { Id = 82, Address = "60:4b:27:ad:d2:ee", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance778" },
                        new { Id = 83, Address = "a9:31:38:ea:75:a2", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", RamMaxPercent = 90f, Title = "Instance432" },
                        new { Id = 84, Address = "5f:d6:f4:11:a6:71", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance42" },
                        new { Id = 85, Address = "4c:9f:dc:e2:66:7c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance189" },
                        new { Id = 86, Address = "ed:41:fb:d8:42:02", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance553" },
                        new { Id = 87, Address = "2f:af:16:2c:d3:89", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance480" },
                        new { Id = 88, Address = "8f:5a:56:bf:0e:09", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance29" },
                        new { Id = 89, Address = "a0:9a:ad:8f:ad:1e", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance517" },
                        new { Id = 90, Address = "1a:23:87:43:7f:9c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Windows", RamMaxPercent = 90f, Title = "Instance809" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 27, CreatedAt = new DateTime(2018, 9, 10, 14, 15, 16, 905, DateTimeKind.Local), IsDeleted = false, Text = "Aliquam dolores iusto ut nisi maxime voluptas optio.", UserId = "9ae2e670-2176-43d0-961e-09eac31bce0e", WasRead = true },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 9, 10, 16, 44, 48, 869, DateTimeKind.Local), IsDeleted = false, Text = "Non veritatis qui odio est.", UserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", WasRead = false },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 9, 11, 11, 25, 36, 107, DateTimeKind.Local), IsDeleted = false, Text = "Adipisci natus iusto similique.", UserId = "9ae2e670-2176-43d0-961e-09eac31bce0e", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 9, 10, 13, 49, 12, 945, DateTimeKind.Local), IsDeleted = false, Text = "Enim cupiditate explicabo nisi ipsum quae quibusdam.", UserId = "b24b21aa-3996-4d86-8f7d-e05aa486d370", WasRead = false },
                        new { Id = 35, ChatId = 22, CreatedAt = new DateTime(2018, 9, 10, 18, 32, 19, 920, DateTimeKind.Local), IsDeleted = false, Text = "Distinctio unde eligendi.", UserId = "9ae2e670-2176-43d0-961e-09eac31bce0e", WasRead = true },
                        new { Id = 36, ChatId = 29, CreatedAt = new DateTime(2018, 9, 10, 21, 48, 2, 783, DateTimeKind.Local), IsDeleted = false, Text = "Ut reiciendis eos ipsa ut et repellendus et quia.", UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", WasRead = false },
                        new { Id = 37, ChatId = 30, CreatedAt = new DateTime(2018, 9, 11, 3, 33, 4, 739, DateTimeKind.Local), IsDeleted = false, Text = "Omnis qui sed porro.", UserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", WasRead = false },
                        new { Id = 38, ChatId = 23, CreatedAt = new DateTime(2018, 9, 10, 22, 24, 53, 767, DateTimeKind.Local), IsDeleted = false, Text = "Fugit autem architecto provident perferendis maxime numquam enim et omnis.", UserId = "cda19867-84de-4479-93a6-43270bef193f", WasRead = true },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 9, 11, 4, 57, 0, 976, DateTimeKind.Local), IsDeleted = false, Text = "Autem molestiae quaerat.", UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740", WasRead = false },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 9, 10, 16, 19, 18, 624, DateTimeKind.Local), IsDeleted = false, Text = "Doloremque quos repellat sapiente ut illo ipsum.", UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 11, 1, 55, 4, 901, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Molestiae ipsum alias aut aut suscipit nulla et.", UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 11, 3, 52, 20, 9, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Veritatis consectetur animi ratione commodi ea facilis voluptatibus accusamus non.", UserId = "cda19867-84de-4479-93a6-43270bef193f", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 10, 13, 2, 18, 331, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Sed aspernatur sed quibusdam voluptas dolores.", UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 10, 22, 45, 13, 539, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Quos itaque quod est dolores eius similique temporibus.", UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 11, 3, 9, 3, 52, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Voluptates quod accusantium voluptatem.", UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 11, 3, 50, 57, 648, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Autem rerum laudantium quisquam quibusdam placeat.", UserId = "6cc549f2-afeb-4c8c-9900-9f218ad0e2dc", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 11, 2, 44, 33, 715, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Et aut est et et.", UserId = "6cc549f2-afeb-4c8c-9900-9f218ad0e2dc", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 11, 4, 35, 26, 340, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Et ea officia assumenda culpa vero.", UserId = "389a422b-9013-4486-b81f-7b6dcca703f1", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 10, 16, 31, 9, 639, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Eligendi est et dolores dicta itaque pariatur rem sit.", UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 11, 2, 12, 19, 130, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Cumque aliquam voluptas esse culpa ipsa sunt animi provident esse.", UserId = "389a422b-9013-4486-b81f-7b6dcca703f1", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "e2e54396-b4f8-4a18-b086-3eb415e3c272" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "389a422b-9013-4486-b81f-7b6dcca703f1" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 4, UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "b24b21aa-3996-4d86-8f7d-e05aa486d370" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9" },
                        new { Id = 18, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 0, UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "772.448.0953", CreatedByUserId = "e2e54396-b4f8-4a18-b086-3eb415e3c272", Description = "", Email = "Sophie.Schuppe@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company829", ThemeId = 69, WebSite = "http://isaias.org" },
                        new { Id = 72, ContactNumber = "(565) 567-0870 x21916", CreatedByUserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9", Description = "Ratione corrupti omnis vero sunt iste veniam distinctio sequi. Ut quibusdam consequatur rerum in aliquam eum. Iure ex in.", Email = "Treva.Rippin56@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company342", ThemeId = 67, WebSite = "http://nelda.name" },
                        new { Id = 73, ContactNumber = "(408) 783-8415 x19468", CreatedByUserId = "cda19867-84de-4479-93a6-43270bef193f", Description = "Corporis reprehenderit nihil. Et est adipisci atque. Repellat qui sed accusantium voluptatem.", Email = "Dion_Grant57@gmail.com", IsActive = true, IsDeleted = false, Name = "Company989", ThemeId = 61, WebSite = "http://izaiah.net" },
                        new { Id = 74, ContactNumber = "(686) 293-4903 x639", CreatedByUserId = "b24b21aa-3996-4d86-8f7d-e05aa486d370", Description = "Id vel veritatis nostrum dicta. Omnis voluptates optio ea. Et ut consequatur velit et. Aliquid quia quidem commodi praesentium eum voluptas pariatur similique.", Email = "Florence_Emmerich@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company740", ThemeId = 63, WebSite = "https://haven.name" },
                        new { Id = 75, ContactNumber = "812-361-5164", CreatedByUserId = "389a422b-9013-4486-b81f-7b6dcca703f1", Description = "Facilis adipisci voluptatibus. Repellat modi dignissimos sint. Deleniti ipsum dolorum odio et porro accusantium et vel. Optio molestiae sunt quo voluptatem voluptas.", Email = "Karli_Legros59@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company739", ThemeId = 63, WebSite = "http://braden.info" },
                        new { Id = 76, ContactNumber = "1-669-343-0588 x3518", CreatedByUserId = "cda19867-84de-4479-93a6-43270bef193f", Description = "Fugit iste ex fugiat. Accusamus sit cumque quas cupiditate pariatur nulla iure error. Eum eos dolor numquam eius perferendis sit tempore occaecati aut. Enim quis aliquid atque aut autem ea beatae omnis.", Email = "London87@gmail.com", IsActive = true, IsDeleted = false, Name = "Company742", ThemeId = 70, WebSite = "https://estell.org" },
                        new { Id = 77, ContactNumber = "(930) 267-1088", CreatedByUserId = "b24b21aa-3996-4d86-8f7d-e05aa486d370", Description = "Iste est ut. Quam illo corrupti. Et natus voluptate beatae aliquam.", Email = "Cristopher_Wolff@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company58", ThemeId = 61, WebSite = "http://cleveland.com" },
                        new { Id = 78, ContactNumber = "664.913.9156", CreatedByUserId = "cda19867-84de-4479-93a6-43270bef193f", Description = "Velit impedit illum qui autem animi.", Email = "Amina.Veum43@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company36", ThemeId = 68, WebSite = "http://aubree.com" },
                        new { Id = 79, ContactNumber = "1-483-911-2733 x44236", CreatedByUserId = "cda19867-84de-4479-93a6-43270bef193f", Description = "Id inventore placeat omnis suscipit doloremque accusamus nulla amet.", Email = "Javon_Braun32@gmail.com", IsActive = true, IsDeleted = false, Name = "Company140", ThemeId = 64, WebSite = "http://creola.com" },
                        new { Id = 80, ContactNumber = "1-454-483-6271", CreatedByUserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", Description = "Saepe sequi magnam sequi doloribus at. Occaecati hic placeat. Eius facere quidem vitae omnis repellendus neque aut autem esse.", Email = "Fidel.Murphy@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company524", ThemeId = 68, WebSite = "https://richie.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 10, 21, 3, 55, 122, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Cum rerum voluptates nulla ullam.", UserId = "b24b21aa-3996-4d86-8f7d-e05aa486d370" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 11, 4, 17, 32, 205, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Iure dolor qui omnis corrupti eius dolorem sunt suscipit.", UserId = "b24b21aa-3996-4d86-8f7d-e05aa486d370" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 11, 12, 45, 34, 840, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Exercitationem quas et ad et.", UserId = "389a422b-9013-4486-b81f-7b6dcca703f1" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 11, 0, 28, 46, 461, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Nihil at quod mollitia.", UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 10, 23, 5, 18, 774, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Dolores repellat ipsam eveniet exercitationem.", UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 10, 17, 40, 23, 766, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Magni incidunt quia omnis.", UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 11, 3, 15, 7, 240, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Nisi ea animi voluptatem quod.", UserId = "9ae2e670-2176-43d0-961e-09eac31bce0e" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 10, 20, 11, 35, 810, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Rem ut vel saepe.", UserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 11, 1, 43, 52, 431, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Tempora nihil debitis.", UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 10, 15, 20, 24, 132, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Minima nobis debitis sapiente porro iusto.", UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme285" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme303" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme26" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme185" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme337" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme301" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme157" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme895" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme875" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme765" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", CreatedAt = new DateTime(2018, 9, 10, 14, 40, 18, 378, DateTimeKind.Local), DisplayName = "Sim", Email = "Elvis72@hotmail.com", FirstName = "Shany", IsActive = true, IsDeleted = false, LastName = "Lemke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg", RoleId = 2 },
                        new { Id = "389a422b-9013-4486-b81f-7b6dcca703f1", CreatedAt = new DateTime(2018, 9, 10, 23, 2, 46, 958, DateTimeKind.Local), DisplayName = "Zackary", Email = "Howell.Johnston96@gmail.com", FirstName = "Amely", IsActive = true, IsDeleted = false, LastName = "White", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg", RoleId = 1 },
                        new { Id = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", CreatedAt = new DateTime(2018, 9, 11, 7, 48, 9, 752, DateTimeKind.Local), DisplayName = "Veronica", Email = "Al.Sauer35@gmail.com", FirstName = "Justine", IsActive = true, IsDeleted = false, LastName = "Lindgren", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg", RoleId = 2 },
                        new { Id = "cda19867-84de-4479-93a6-43270bef193f", CreatedAt = new DateTime(2018, 9, 11, 12, 8, 4, 120, DateTimeKind.Local), DisplayName = "Jalon", Email = "Ethelyn_Lakin@gmail.com", FirstName = "Madonna", IsActive = true, IsDeleted = false, LastName = "Collins", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg", RoleId = 1 },
                        new { Id = "b24b21aa-3996-4d86-8f7d-e05aa486d370", CreatedAt = new DateTime(2018, 9, 11, 5, 42, 50, 414, DateTimeKind.Local), DisplayName = "Garrett", Email = "Trevor_Steuber@gmail.com", FirstName = "Adelia", IsActive = true, IsDeleted = false, LastName = "Rolfson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg", RoleId = 1 },
                        new { Id = "e2e54396-b4f8-4a18-b086-3eb415e3c272", CreatedAt = new DateTime(2018, 9, 11, 9, 39, 11, 707, DateTimeKind.Local), DisplayName = "Fern", Email = "Candido67@yahoo.com", FirstName = "Forrest", IsActive = true, IsDeleted = false, LastName = "Goldner", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg", RoleId = 2 },
                        new { Id = "6cc549f2-afeb-4c8c-9900-9f218ad0e2dc", CreatedAt = new DateTime(2018, 9, 11, 1, 16, 23, 993, DateTimeKind.Local), DisplayName = "Elijah", Email = "Gabriella.Bailey@hotmail.com", FirstName = "Frankie", IsActive = true, IsDeleted = false, LastName = "Moen", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg", RoleId = 1 },
                        new { Id = "b1758db9-1724-4e4c-a732-d7bb439a2740", CreatedAt = new DateTime(2018, 9, 11, 4, 14, 20, 523, DateTimeKind.Local), DisplayName = "Howard", Email = "Jakob_Strosin@yahoo.com", FirstName = "Brooks", IsActive = true, IsDeleted = false, LastName = "White", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg", RoleId = 1 },
                        new { Id = "9ae2e670-2176-43d0-961e-09eac31bce0e", CreatedAt = new DateTime(2018, 9, 11, 6, 40, 36, 866, DateTimeKind.Local), DisplayName = "Claude", Email = "Nikita_Herman21@hotmail.com", FirstName = "Jett", IsActive = true, IsDeleted = false, LastName = "Ryan", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg", RoleId = 1 },
                        new { Id = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9", CreatedAt = new DateTime(2018, 9, 10, 20, 54, 26, 830, DateTimeKind.Local), DisplayName = "Aimee", Email = "Jazmin_Kilback@hotmail.com", FirstName = "Gideon", IsActive = true, IsDeleted = false, LastName = "Runte", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "2b7f0286-0e54-4e1c-aac6-9682797bc9eb", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "389a422b-9013-4486-b81f-7b6dcca703f1", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "2f792c47-2b5d-4cbc-9317-ecf25bd550b9", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "cda19867-84de-4479-93a6-43270bef193f", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "b24b21aa-3996-4d86-8f7d-e05aa486d370", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "e2e54396-b4f8-4a18-b086-3eb415e3c272", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "6cc549f2-afeb-4c8c-9900-9f218ad0e2dc", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "b1758db9-1724-4e4c-a732-d7bb439a2740", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "9ae2e670-2176-43d0-961e-09eac31bce0e", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "fad7ef4f-74ed-4957-bf42-08f8cad0bcb9", OrganizationId = 76, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
