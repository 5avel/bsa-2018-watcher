// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180909191319_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 97, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 14, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 59, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 91, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 37, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 73, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 3, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 98, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 40, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 57, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 78, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "632bbf3e-2c78-49fc-ad87-e2e5e93b02e1", IsDeleted = false, Name = "id", Type = 0 },
                        new { Id = 22, CreatedById = "36410a7e-ff1b-4570-8a45-82e6d045bfda", IsDeleted = false, Name = "commodi", Type = 0 },
                        new { Id = 23, CreatedById = "0da18978-1656-4b4d-ac10-940871d87e18", IsDeleted = false, Name = "voluptatem", Type = 0 },
                        new { Id = 24, CreatedById = "0b22d062-92ae-494c-9481-11c2931737da", IsDeleted = false, Name = "aliquam", Type = 0 },
                        new { Id = 25, CreatedById = "9a549b2b-8fd0-4d70-9145-569474fea109", IsDeleted = false, Name = "dolorem", Type = 0 },
                        new { Id = 26, CreatedById = "36410a7e-ff1b-4570-8a45-82e6d045bfda", IsDeleted = false, Name = "recusandae", Type = 0 },
                        new { Id = 27, CreatedById = "0b22d062-92ae-494c-9481-11c2931737da", IsDeleted = false, Name = "commodi", Type = 0 },
                        new { Id = 28, CreatedById = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", IsDeleted = false, Name = "animi", Type = 0 },
                        new { Id = 29, CreatedById = "14e7d6f2-3626-423b-959b-e8ca1b882173", IsDeleted = false, Name = "quos", Type = 0 },
                        new { Id = 30, CreatedById = "36410a7e-ff1b-4570-8a45-82e6d045bfda", IsDeleted = false, Name = "id", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 9, 1, 13, 23, 708, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title187" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 9, 9, 7, 26, 619, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title344" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 9, 6, 26, 18, 615, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title328" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 9, 6, 20, 43, 423, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title568" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 9, 13, 3, 4, 274, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title317" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 9, 7, 13, 27, 393, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title756" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 9, 5, 36, 59, 89, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title712" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 9, 12, 18, 28, 429, DateTimeKind.Local), InstanceId = 89, IsDeleted = false, Title = "Title719" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 9, 18, 42, 20, 709, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title235" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 9, 4, 23, 15, 916, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title956" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 9, 15, 52, 11, 195, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nulla et perspiciatis.", UserId = "0b22d062-92ae-494c-9481-11c2931737da", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 9, 2, 29, 5, 920, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et est voluptatibus et qui cumque eos nesciunt praesentium illo.", UserId = "0bddde5f-5756-4d7f-8521-42d0476f3aa0", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 9, 19, 25, 23, 926, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Adipisci quo dolores animi quo doloribus qui eos velit unde.", UserId = "632bbf3e-2c78-49fc-ad87-e2e5e93b02e1", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 9, 19, 8, 28, 32, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sequi reprehenderit est delectus sit dolor.", UserId = "0da18978-1656-4b4d-ac10-940871d87e18", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 9, 14, 8, 1, 415, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Repellendus error officia tenetur et qui possimus voluptas.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 9, 13, 51, 41, 285, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Consequatur dolor quia.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 9, 4, 16, 23, 539, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ad fugiat odit quam modi et debitis est perspiciatis.", UserId = "6aa322ac-217f-449e-8ebf-12b4f2e2436c", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 8, 23, 54, 56, 711, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Est ipsa consequatur ut provident ab.", UserId = "732bab35-8c9e-4812-b4ff-251abdf5b857", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 9, 17, 44, 49, 86, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Maxime earum odit et non quisquam occaecati nobis aut.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 9, 14, 51, 6, 29, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quas quas exercitationem officiis et error cumque impedit.", UserId = "632bbf3e-2c78-49fc-ad87-e2e5e93b02e1", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "54:bc:6c:85:e1:55", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance802" },
                        new { Id = 82, Address = "93:89:86:96:e6:11", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 79, Platform = "Linux", Title = "Instance46" },
                        new { Id = 83, Address = "2d:74:0e:71:6f:7a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", Title = "Instance819" },
                        new { Id = 84, Address = "04:d6:00:79:e3:b7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 72, Platform = "Windows", Title = "Instance161" },
                        new { Id = 85, Address = "df:be:1e:09:9c:ab", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Linux", Title = "Instance856" },
                        new { Id = 86, Address = "5e:42:96:2e:00:e0", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 77, Platform = "Windows", Title = "Instance731" },
                        new { Id = 87, Address = "c8:5c:b1:ee:61:bc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", Title = "Instance85" },
                        new { Id = 88, Address = "e7:0a:de:ee:bf:6e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance701" },
                        new { Id = 89, Address = "16:66:b1:ef:be:c1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance831" },
                        new { Id = 90, Address = "09:2f:b3:74:1b:82", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance474" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 26, CreatedAt = new DateTime(2018, 9, 9, 4, 38, 36, 540, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatum adipisci repellendus vitae facilis odit.", UserId = "0b22d062-92ae-494c-9481-11c2931737da", WasRead = false },
                        new { Id = 32, ChatId = 25, CreatedAt = new DateTime(2018, 9, 9, 7, 44, 12, 280, DateTimeKind.Local), IsDeleted = false, Text = "Quia eaque reiciendis id non.", UserId = "0bddde5f-5756-4d7f-8521-42d0476f3aa0", WasRead = true },
                        new { Id = 33, ChatId = 25, CreatedAt = new DateTime(2018, 9, 9, 18, 34, 36, 38, DateTimeKind.Local), IsDeleted = false, Text = "Sequi odit inventore unde quibusdam tempore voluptates consequuntur et.", UserId = "0da18978-1656-4b4d-ac10-940871d87e18", WasRead = true },
                        new { Id = 34, ChatId = 23, CreatedAt = new DateTime(2018, 9, 9, 10, 21, 58, 678, DateTimeKind.Local), IsDeleted = false, Text = "Quam culpa qui autem accusamus.", UserId = "0b22d062-92ae-494c-9481-11c2931737da", WasRead = true },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 9, 9, 6, 44, 26, 9, DateTimeKind.Local), IsDeleted = false, Text = "Nihil quia ad et odio et dolorem.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WasRead = true },
                        new { Id = 36, ChatId = 27, CreatedAt = new DateTime(2018, 9, 9, 0, 54, 33, 391, DateTimeKind.Local), IsDeleted = false, Text = "Est sed pariatur.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WasRead = true },
                        new { Id = 37, ChatId = 24, CreatedAt = new DateTime(2018, 9, 9, 13, 45, 57, 927, DateTimeKind.Local), IsDeleted = false, Text = "Numquam facere ipsa porro.", UserId = "0b22d062-92ae-494c-9481-11c2931737da", WasRead = true },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 9, 9, 21, 9, 39, 318, DateTimeKind.Local), IsDeleted = false, Text = "Qui ut non accusamus quos voluptas voluptatum.", UserId = "36410a7e-ff1b-4570-8a45-82e6d045bfda", WasRead = true },
                        new { Id = 39, ChatId = 21, CreatedAt = new DateTime(2018, 9, 9, 1, 15, 27, 632, DateTimeKind.Local), IsDeleted = false, Text = "Maiores dolor nihil earum suscipit at consectetur non et sunt.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WasRead = false },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 9, 9, 16, 35, 21, 699, DateTimeKind.Local), IsDeleted = false, Text = "Minima natus unde dicta aspernatur earum deserunt sint tempora reprehenderit.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 9, 18, 37, 9, 256, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Tempora omnis nobis a enim explicabo qui vitae.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 9, 11, 58, 14, 361, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Aut adipisci facere perferendis.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 9, 5, 26, 37, 181, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Porro et architecto nulla.", UserId = "9a549b2b-8fd0-4d70-9145-569474fea109", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 9, 19, 49, 50, 408, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Sequi eius est dolores aspernatur.", UserId = "9a549b2b-8fd0-4d70-9145-569474fea109", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 9, 16, 29, 11, 14, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Doloremque impedit quod aut odit dolore delectus fuga rem mollitia.", UserId = "14e7d6f2-3626-423b-959b-e8ca1b882173", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 9, 5, 23, 32, 536, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Officiis dolores dolores tenetur nesciunt.", UserId = "36410a7e-ff1b-4570-8a45-82e6d045bfda", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 9, 6, 20, 10, 310, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Et beatae non non natus quasi fugit officiis.", UserId = "0bddde5f-5756-4d7f-8521-42d0476f3aa0", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 9, 16, 54, 34, 750, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Soluta sit iure est qui odit.", UserId = "0b22d062-92ae-494c-9481-11c2931737da", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 9, 0, 37, 52, 879, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Unde accusantium accusamus.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 9, 21, 57, 27, 602, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Quis sint beatae assumenda.", UserId = "0da18978-1656-4b4d-ac10-940871d87e18", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 3, UserId = "0bddde5f-5756-4d7f-8521-42d0476f3aa0" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "0da18978-1656-4b4d-ac10-940871d87e18" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "732bab35-8c9e-4812-b4ff-251abdf5b857" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "14e7d6f2-3626-423b-959b-e8ca1b882173" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "0b22d062-92ae-494c-9481-11c2931737da" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "6aa322ac-217f-449e-8ebf-12b4f2e2436c" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "632bbf3e-2c78-49fc-ad87-e2e5e93b02e1" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "632bbf3e-2c78-49fc-ad87-e2e5e93b02e1" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "9a549b2b-8fd0-4d70-9145-569474fea109" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "0b22d062-92ae-494c-9481-11c2931737da" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "439-419-3955 x8548", CreatedByUserId = "36410a7e-ff1b-4570-8a45-82e6d045bfda", Description = "Adipisci molestias non quisquam earum dolorum molestias iste. Explicabo ea ut mollitia itaque repudiandae. Est unde quasi.", Email = "Jarrod_Hammes29@gmail.com", IsActive = true, IsDeleted = false, Name = "Company541", ThemeId = 67, WebSite = "https://chadrick.name" },
                        new { Id = 72, ContactNumber = "(204) 999-6677 x405", CreatedByUserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", Description = "", Email = "Domingo.Stiedemann@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company114", ThemeId = 67, WebSite = "http://janis.com" },
                        new { Id = 73, ContactNumber = "(440) 509-1684", CreatedByUserId = "14e7d6f2-3626-423b-959b-e8ca1b882173", Description = "", Email = "Sofia_Schaefer8@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company613", ThemeId = 69, WebSite = "http://lew.info" },
                        new { Id = 74, ContactNumber = "662.300.3345", CreatedByUserId = "14e7d6f2-3626-423b-959b-e8ca1b882173", Description = "Nostrum iusto voluptatem culpa ut.", Email = "Madyson19@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company435", ThemeId = 68, WebSite = "https://mose.info" },
                        new { Id = 75, ContactNumber = "614.292.9580 x822", CreatedByUserId = "36410a7e-ff1b-4570-8a45-82e6d045bfda", Description = "", Email = "Alessandra.Heller42@gmail.com", IsActive = true, IsDeleted = false, Name = "Company165", ThemeId = 67, WebSite = "https://kamron.biz" },
                        new { Id = 76, ContactNumber = "1-958-620-8119 x139", CreatedByUserId = "0da18978-1656-4b4d-ac10-940871d87e18", Description = "", Email = "Elias.Schmeler76@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company221", ThemeId = 61, WebSite = "http://bert.biz" },
                        new { Id = 77, ContactNumber = "631.889.3525 x9022", CreatedByUserId = "36410a7e-ff1b-4570-8a45-82e6d045bfda", Description = "Enim sit quia nemo tempore accusantium. Voluptatibus eum aliquid ab. Mollitia iure doloremque omnis quaerat voluptatem ut suscipit.", Email = "Dorothy.Torphy@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company782", ThemeId = 68, WebSite = "https://alvina.org" },
                        new { Id = 78, ContactNumber = "(938) 960-5637", CreatedByUserId = "0bddde5f-5756-4d7f-8521-42d0476f3aa0", Description = "Quo consequatur vero sint ut autem aut doloremque ullam laborum. Rerum repellendus est qui sit rerum.", Email = "Juliet_Powlowski@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company297", ThemeId = 65, WebSite = "https://josiane.com" },
                        new { Id = 79, ContactNumber = "(259) 858-0505 x993", CreatedByUserId = "36410a7e-ff1b-4570-8a45-82e6d045bfda", Description = "Dicta a hic tempora illo dolorem. Dolorum voluptas nemo ea ea.", Email = "Lura_Kling61@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company833", ThemeId = 64, WebSite = "http://marianna.name" },
                        new { Id = 80, ContactNumber = "(732) 704-3028 x624", CreatedByUserId = "0bddde5f-5756-4d7f-8521-42d0476f3aa0", Description = "Id modi distinctio animi dolorem. Amet quia sint id harum exercitationem.", Email = "Madison.Collins@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company179", ThemeId = 70, WebSite = "http://orlo.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 9, 12, 10, 3, 91, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Voluptas enim laborum ex explicabo voluptates est sequi.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 9, 8, 27, 14, 956, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Saepe alias maiores aut qui ea delectus.", UserId = "9a549b2b-8fd0-4d70-9145-569474fea109" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 9, 20, 59, 34, 800, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Modi sed quo doloremque quis atque incidunt corporis qui.", UserId = "0b22d062-92ae-494c-9481-11c2931737da" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 9, 14, 27, 16, 499, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Animi consequatur molestiae omnis.", UserId = "732bab35-8c9e-4812-b4ff-251abdf5b857" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 9, 8, 58, 39, 165, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Et aut ea accusamus aliquam.", UserId = "9a549b2b-8fd0-4d70-9145-569474fea109" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 9, 2, 34, 33, 692, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Quia qui ad nihil reprehenderit.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 9, 6, 24, 31, 160, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Libero consectetur alias dolorum deleniti.", UserId = "0b22d062-92ae-494c-9481-11c2931737da" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 9, 9, 54, 52, 111, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Omnis recusandae consectetur magnam provident explicabo.", UserId = "14e7d6f2-3626-423b-959b-e8ca1b882173" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 9, 19, 36, 22, 152, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Nesciunt aperiam recusandae tempore a.", UserId = "0da18978-1656-4b4d-ac10-940871d87e18" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 9, 3, 44, 42, 883, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Id quia unde quae eveniet delectus ea.", UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme497" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme140" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme871" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme602" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme326" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme509" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme91" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme292" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme180" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme513" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "732bab35-8c9e-4812-b4ff-251abdf5b857", CreatedAt = new DateTime(2018, 9, 9, 13, 36, 12, 571, DateTimeKind.Local), DisplayName = "Leslie", Email = "Javier.Paucek@gmail.com", FirstName = "Rylee", IsActive = true, IsDeleted = false, LastName = "Kuhlman", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg", RoleId = 2 },
                        new { Id = "0bddde5f-5756-4d7f-8521-42d0476f3aa0", CreatedAt = new DateTime(2018, 9, 9, 1, 55, 45, 527, DateTimeKind.Local), DisplayName = "Ethyl", Email = "Raphael.Murazik@hotmail.com", FirstName = "Cali", IsActive = true, IsDeleted = false, LastName = "Kutch", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg", RoleId = 1 },
                        new { Id = "0b22d062-92ae-494c-9481-11c2931737da", CreatedAt = new DateTime(2018, 9, 9, 5, 37, 2, 549, DateTimeKind.Local), DisplayName = "Winston", Email = "Austyn77@yahoo.com", FirstName = "Shayna", IsActive = true, IsDeleted = false, LastName = "Parker", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg", RoleId = 1 },
                        new { Id = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", CreatedAt = new DateTime(2018, 9, 9, 19, 34, 7, 631, DateTimeKind.Local), DisplayName = "Andrew", Email = "Ezekiel.Hermiston1@yahoo.com", FirstName = "Grover", IsActive = true, IsDeleted = false, LastName = "Ryan", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg", RoleId = 2 },
                        new { Id = "6aa322ac-217f-449e-8ebf-12b4f2e2436c", CreatedAt = new DateTime(2018, 9, 9, 8, 19, 36, 70, DateTimeKind.Local), DisplayName = "Makenna", Email = "Davin_Schulist60@gmail.com", FirstName = "Crawford", IsActive = true, IsDeleted = false, LastName = "Gaylord", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg", RoleId = 2 },
                        new { Id = "9a549b2b-8fd0-4d70-9145-569474fea109", CreatedAt = new DateTime(2018, 9, 9, 4, 14, 16, 766, DateTimeKind.Local), DisplayName = "Rodrigo", Email = "Benton14@yahoo.com", FirstName = "Tom", IsActive = true, IsDeleted = false, LastName = "Hauck", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg", RoleId = 1 },
                        new { Id = "632bbf3e-2c78-49fc-ad87-e2e5e93b02e1", CreatedAt = new DateTime(2018, 9, 9, 3, 38, 22, 832, DateTimeKind.Local), DisplayName = "Jacinthe", Email = "Zoe82@gmail.com", FirstName = "Kellie", IsActive = true, IsDeleted = false, LastName = "Stehr", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg", RoleId = 2 },
                        new { Id = "14e7d6f2-3626-423b-959b-e8ca1b882173", CreatedAt = new DateTime(2018, 9, 9, 11, 48, 24, 489, DateTimeKind.Local), DisplayName = "Hope", Email = "Sydnee90@yahoo.com", FirstName = "Oliver", IsActive = true, IsDeleted = false, LastName = "Hoppe", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg", RoleId = 1 },
                        new { Id = "36410a7e-ff1b-4570-8a45-82e6d045bfda", CreatedAt = new DateTime(2018, 9, 9, 0, 52, 56, 943, DateTimeKind.Local), DisplayName = "Adan", Email = "Bridget74@yahoo.com", FirstName = "Jacky", IsActive = true, IsDeleted = false, LastName = "Keebler", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg", RoleId = 1 },
                        new { Id = "0da18978-1656-4b4d-ac10-940871d87e18", CreatedAt = new DateTime(2018, 9, 9, 14, 28, 5, 94, DateTimeKind.Local), DisplayName = "Dillan", Email = "Justus44@hotmail.com", FirstName = "Carmel", IsActive = true, IsDeleted = false, LastName = "Bradtke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "732bab35-8c9e-4812-b4ff-251abdf5b857", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "0bddde5f-5756-4d7f-8521-42d0476f3aa0", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "0b22d062-92ae-494c-9481-11c2931737da", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "cd12165e-60bb-40a0-a6da-ee98a35e2a2c", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "6aa322ac-217f-449e-8ebf-12b4f2e2436c", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "9a549b2b-8fd0-4d70-9145-569474fea109", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "632bbf3e-2c78-49fc-ad87-e2e5e93b02e1", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "14e7d6f2-3626-423b-959b-e8ca1b882173", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "36410a7e-ff1b-4570-8a45-82e6d045bfda", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "0da18978-1656-4b4d-ac10-940871d87e18", OrganizationId = 79, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
