// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180913060107_Added_CollectorAppVersions_Entity")]
    partial class Added_CollectorAppVersions_Entity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 81, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 95, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 43, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 90, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 36, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 6, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 58, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 50, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 84, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 33, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 81, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 18, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 81, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 0, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 64, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "43c24b44-2dab-478d-b5e5-72e951c390ab", IsDeleted = false, Name = "voluptates", Type = 0 },
                        new { Id = 22, CreatedById = "8054cd22-9b52-4575-a04c-ae76707de796", IsDeleted = false, Name = "nisi", Type = 0 },
                        new { Id = 23, CreatedById = "43c24b44-2dab-478d-b5e5-72e951c390ab", IsDeleted = false, Name = "repellendus", Type = 0 },
                        new { Id = 24, CreatedById = "3c753ffd-420a-4b93-b091-01ac55aaeff3", IsDeleted = false, Name = "nulla", Type = 0 },
                        new { Id = 25, CreatedById = "8054cd22-9b52-4575-a04c-ae76707de796", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 26, CreatedById = "43c24b44-2dab-478d-b5e5-72e951c390ab", IsDeleted = false, Name = "velit", Type = 0 },
                        new { Id = 27, CreatedById = "8054cd22-9b52-4575-a04c-ae76707de796", IsDeleted = false, Name = "quia", Type = 0 },
                        new { Id = 28, CreatedById = "7db6b06e-1b5a-4cad-836c-1467243ef929", IsDeleted = false, Name = "corporis", Type = 0 },
                        new { Id = 29, CreatedById = "43c24b44-2dab-478d-b5e5-72e951c390ab", IsDeleted = false, Name = "quia", Type = 0 },
                        new { Id = 30, CreatedById = "9939ac91-9e2a-4381-bddb-147506b6b5d3", IsDeleted = false, Name = "deserunt", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.CollectorAppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DebLink");

                    b.Property<string>("ExeLink");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TgzLink");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("CollectorAppVersions");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 12, 19, 34, 3, 52, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title300" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 12, 20, 6, 30, 909, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title301" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 12, 17, 59, 54, 121, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title763" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 12, 13, 43, 28, 478, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title244" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 12, 13, 0, 10, 41, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title203" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 12, 12, 41, 18, 163, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title911" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 12, 13, 54, 58, 836, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title533" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 13, 3, 6, 31, 580, DateTimeKind.Local), InstanceId = 73, IsDeleted = false, Title = "Title768" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 12, 19, 26, 46, 239, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title955" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 12, 17, 34, 29, 486, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title388" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 13, 1, 19, 45, 806, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Repudiandae et sit dolor consequuntur error voluptas temporibus molestias quas.", UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 13, 7, 49, 43, 629, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut accusamus aut.", UserId = "fc1af5c2-5260-4979-a30d-6c49759955ba", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 12, 16, 16, 30, 968, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sit qui magnam tempore laborum est.", UserId = "1e4e1d3e-8076-43bd-bd3c-5987739a71dc", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 12, 16, 54, 51, 197, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ea est repellat in eligendi quis.", UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 12, 11, 50, 2, 253, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sed et delectus deserunt est velit expedita soluta quasi.", UserId = "8054cd22-9b52-4575-a04c-ae76707de796", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 13, 7, 36, 3, 605, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Vel facere suscipit rerum et.", UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 12, 14, 58, 6, 857, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quisquam similique et suscipit ea eum eos quas et qui.", UserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 12, 20, 8, 2, 160, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ad excepturi molestiae odio quod ipsum ab perferendis non.", UserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 12, 14, 5, 15, 762, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatem officia eveniet distinctio excepturi.", UserId = "fc1af5c2-5260-4979-a30d-6c49759955ba", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 12, 21, 36, 54, 759, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quia fugit delectus.", UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "78:02:26:0c:e4:c8", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 63, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance162" },
                        new { Id = 72, Address = "ba:72:c1:b4:fd:29", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance783" },
                        new { Id = 73, Address = "48:dc:0f:5d:77:4d", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance36" },
                        new { Id = 74, Address = "a0:e0:a8:b3:42:1c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance596" },
                        new { Id = 75, Address = "16:8c:fe:ea:6a:16", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance760" },
                        new { Id = 76, Address = "ad:fd:d2:67:fa:9c", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance415" },
                        new { Id = 77, Address = "f0:5f:f4:b1:7b:da", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance582" },
                        new { Id = 78, Address = "92:e9:6a:32:ab:bc", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance445" },
                        new { Id = 79, Address = "f2:1a:7b:0a:69:a2", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance948" },
                        new { Id = 80, Address = "29:cd:7e:2b:e7:b7", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance719" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 30, CreatedAt = new DateTime(2018, 9, 13, 6, 0, 12, 8, DateTimeKind.Local), IsDeleted = false, Text = "Maiores qui hic quas id.", UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", WasRead = false },
                        new { Id = 32, ChatId = 28, CreatedAt = new DateTime(2018, 9, 13, 8, 49, 30, 640, DateTimeKind.Local), IsDeleted = false, Text = "Est aut debitis.", UserId = "32d7cde9-73c3-405a-ba2f-fbdda364d9dd", WasRead = false },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 9, 13, 6, 55, 51, 236, DateTimeKind.Local), IsDeleted = false, Text = "Reprehenderit atque ut possimus est vel et nesciunt et.", UserId = "7ce0aded-8003-4d6b-b4b9-9b2ed32beb31", WasRead = true },
                        new { Id = 34, ChatId = 29, CreatedAt = new DateTime(2018, 9, 12, 15, 44, 53, 746, DateTimeKind.Local), IsDeleted = false, Text = "Perferendis impedit et recusandae reprehenderit praesentium sit.", UserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a", WasRead = true },
                        new { Id = 35, ChatId = 21, CreatedAt = new DateTime(2018, 9, 13, 3, 28, 30, 271, DateTimeKind.Local), IsDeleted = false, Text = "Omnis libero voluptas perferendis exercitationem eum dolorum consequatur sed error.", UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", WasRead = true },
                        new { Id = 36, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 23, 59, 21, 726, DateTimeKind.Local), IsDeleted = false, Text = "Ducimus rerum consequatur fugiat quis non fugit a ipsum perferendis.", UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", WasRead = true },
                        new { Id = 37, ChatId = 27, CreatedAt = new DateTime(2018, 9, 12, 13, 6, 29, 485, DateTimeKind.Local), IsDeleted = false, Text = "Voluptas consequatur itaque voluptas quaerat.", UserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a", WasRead = false },
                        new { Id = 38, ChatId = 22, CreatedAt = new DateTime(2018, 9, 12, 15, 20, 20, 128, DateTimeKind.Local), IsDeleted = false, Text = "Est nobis voluptas ducimus libero eligendi non magnam.", UserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3", WasRead = false },
                        new { Id = 39, ChatId = 21, CreatedAt = new DateTime(2018, 9, 13, 5, 13, 20, 76, DateTimeKind.Local), IsDeleted = false, Text = "Non et iusto.", UserId = "1e4e1d3e-8076-43bd-bd3c-5987739a71dc", WasRead = false },
                        new { Id = 40, ChatId = 23, CreatedAt = new DateTime(2018, 9, 12, 16, 54, 51, 704, DateTimeKind.Local), IsDeleted = false, Text = "Dolores sed molestiae.", UserId = "1e4e1d3e-8076-43bd-bd3c-5987739a71dc", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("InstanceGuidId");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 13, 5, 51, 14, 568, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Necessitatibus ex et consequuntur quisquam modi magni blanditiis unde.", UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 12, 15, 36, 11, 724, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Nemo quia pariatur corporis minus explicabo id quis.", UserId = "1e4e1d3e-8076-43bd-bd3c-5987739a71dc", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 12, 23, 53, 14, 78, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Non ipsa debitis fugiat.", UserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 12, 17, 53, 28, 313, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Odit est totam velit eius est odit est est.", UserId = "8054cd22-9b52-4575-a04c-ae76707de796", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 13, 5, 2, 43, 946, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Quia porro dolorem alias suscipit ab minima ad corrupti.", UserId = "9939ac91-9e2a-4381-bddb-147506b6b5d3", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 12, 17, 18, 44, 252, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Consectetur sit magnam fuga dolorem suscipit et iste similique cumque.", UserId = "7ce0aded-8003-4d6b-b4b9-9b2ed32beb31", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 13, 6, 43, 50, 500, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Maiores dicta est.", UserId = "fc1af5c2-5260-4979-a30d-6c49759955ba", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 12, 15, 5, 33, 269, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Sed quia illo fugiat quae.", UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 13, 8, 29, 8, 260, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Dignissimos eum magni quaerat esse molestiae in.", UserId = "7ce0aded-8003-4d6b-b4b9-9b2ed32beb31", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 13, 2, 0, 56, 544, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Quaerat facere sit ipsum error magnam molestiae.", UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 4, UserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "8054cd22-9b52-4575-a04c-ae76707de796" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "32d7cde9-73c3-405a-ba2f-fbdda364d9dd" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "7ce0aded-8003-4d6b-b4b9-9b2ed32beb31" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "9939ac91-9e2a-4381-bddb-147506b6b5d3" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "1-502-709-6765 x0831", CreatedByUserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", Description = "Molestias quibusdam voluptatem itaque eveniet et architecto. Quis ut architecto similique ut.", Email = "Violet.Kihn@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company964", ThemeId = 1, WebSite = "https://reggie.org" },
                        new { Id = 62, ContactNumber = "989-307-9969", CreatedByUserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", Description = "Aut voluptas facilis est non aut voluptas odit repellendus cupiditate. Nostrum est eos aut eum exercitationem. Doloribus aut dolorum soluta.", Email = "Armani34@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company790", ThemeId = 2, WebSite = "https://alysson.biz" },
                        new { Id = 63, ContactNumber = "1-854-262-2437 x5216", CreatedByUserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", Description = "", Email = "Eleanore47@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company459", ThemeId = 2, WebSite = "http://bobbie.biz" },
                        new { Id = 64, ContactNumber = "1-215-313-7772 x8428", CreatedByUserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", Description = "Dicta nobis et mollitia voluptate ut ullam iste consequatur.", Email = "Brady.Corwin58@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company920", ThemeId = 2, WebSite = "http://karlee.info" },
                        new { Id = 65, ContactNumber = "487-466-9834", CreatedByUserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3", Description = "Error non voluptas laboriosam architecto necessitatibus et.", Email = "Ivory_Ondricka32@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company370", ThemeId = 2, WebSite = "https://hayley.net" },
                        new { Id = 66, ContactNumber = "(422) 752-6887 x288", CreatedByUserId = "fc1af5c2-5260-4979-a30d-6c49759955ba", Description = "Id non ut dolore rerum et aperiam excepturi qui molestiae.", Email = "Tod64@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company745", ThemeId = 2, WebSite = "https://jayce.net" },
                        new { Id = 67, ContactNumber = "878-384-4669 x47220", CreatedByUserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3", Description = "Magni nihil ex dolores reprehenderit. Dignissimos perspiciatis nihil iure quia recusandae dolorem delectus explicabo quis. Iure nihil quasi sit nihil explicabo odio.", Email = "Elnora_Streich15@gmail.com", IsActive = true, IsDeleted = false, Name = "Company791", ThemeId = 1, WebSite = "https://lucienne.name" },
                        new { Id = 68, ContactNumber = "(523) 431-3649 x3368", CreatedByUserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3", Description = "Consequuntur nihil est sint nisi quia eaque. Hic suscipit facere ea facilis quia quia. Dolorem vero repudiandae dicta.", Email = "Ashlee.Nicolas84@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company841", ThemeId = 2, WebSite = "https://tressa.biz" },
                        new { Id = 69, ContactNumber = "1-732-432-2730 x3901", CreatedByUserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a", Description = "Quia dolorem non perspiciatis. Magnam aspernatur laborum nulla modi qui dolor tenetur optio. Sapiente voluptatem itaque est aut eum rerum occaecati et temporibus. Occaecati ad est fugit aspernatur expedita ab corporis architecto in.", Email = "Bobbie_Ryan25@gmail.com", IsActive = true, IsDeleted = false, Name = "Company324", ThemeId = 2, WebSite = "http://paula.com" },
                        new { Id = 70, ContactNumber = "1-505-704-2337", CreatedByUserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", Description = "Qui sapiente minus quia id consequuntur et fuga. Aspernatur omnis accusantium ratione sed. Ducimus voluptate porro.", Email = "Mike90@gmail.com", IsActive = true, IsDeleted = false, Name = "Company910", ThemeId = 1, WebSite = "http://richard.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 12, 18, 9, 47, 30, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Ut laboriosam voluptatem omnis.", UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 12, 10, 42, 16, 818, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Ut labore et dignissimos neque rerum laborum.", UserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 12, 22, 28, 25, 657, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Inventore quia quibusdam delectus nulla voluptate nam.", UserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 12, 11, 15, 59, 228, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Perspiciatis tenetur consequatur quas.", UserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 13, 7, 50, 37, 355, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Sint nobis consectetur sunt.", UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 13, 3, 8, 1, 995, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Fuga nihil qui.", UserId = "fc1af5c2-5260-4979-a30d-6c49759955ba" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 13, 8, 54, 39, 893, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Sunt doloremque totam autem nemo aliquid tenetur eligendi modi.", UserId = "fc1af5c2-5260-4979-a30d-6c49759955ba" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 12, 15, 4, 58, 691, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Harum distinctio voluptatibus ut et et fugit non accusamus quidem.", UserId = "fc1af5c2-5260-4979-a30d-6c49759955ba" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 12, 18, 22, 0, 822, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Eaque perferendis totam sit quo.", UserId = "9939ac91-9e2a-4381-bddb-147506b6b5d3" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 12, 9, 43, 45, 606, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Iusto suscipit natus qui sapiente asperiores.", UserId = "32d7cde9-73c3-405a-ba2f-fbdda364d9dd" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "9939ac91-9e2a-4381-bddb-147506b6b5d3", CreatedAt = new DateTime(2018, 9, 12, 12, 52, 9, 475, DateTimeKind.Local), DisplayName = "Xander", Email = "Hipolito.Armstrong18@yahoo.com", FirstName = "Enos", IsActive = true, IsDeleted = false, LastName = "Dicki", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg", RoleId = 2 },
                        new { Id = "7db6b06e-1b5a-4cad-836c-1467243ef929", CreatedAt = new DateTime(2018, 9, 12, 12, 38, 41, 272, DateTimeKind.Local), DisplayName = "Zelma", Email = "Carmine56@hotmail.com", FirstName = "Fausto", IsActive = true, IsDeleted = false, LastName = "Shanahan", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg", RoleId = 1 },
                        new { Id = "1e4e1d3e-8076-43bd-bd3c-5987739a71dc", CreatedAt = new DateTime(2018, 9, 13, 6, 21, 39, 532, DateTimeKind.Local), DisplayName = "Rigoberto", Email = "Christelle67@hotmail.com", FirstName = "Lorine", IsActive = true, IsDeleted = false, LastName = "Bernhard", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg", RoleId = 2 },
                        new { Id = "fc1af5c2-5260-4979-a30d-6c49759955ba", CreatedAt = new DateTime(2018, 9, 12, 17, 40, 57, 3, DateTimeKind.Local), DisplayName = "Destiny", Email = "Kelly52@gmail.com", FirstName = "Ofelia", IsActive = true, IsDeleted = false, LastName = "Kuhic", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg", RoleId = 1 },
                        new { Id = "7ce0aded-8003-4d6b-b4b9-9b2ed32beb31", CreatedAt = new DateTime(2018, 9, 13, 2, 54, 20, 374, DateTimeKind.Local), DisplayName = "Furman", Email = "Gail.Little@hotmail.com", FirstName = "Brandy", IsActive = true, IsDeleted = false, LastName = "Dare", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg", RoleId = 1 },
                        new { Id = "32d7cde9-73c3-405a-ba2f-fbdda364d9dd", CreatedAt = new DateTime(2018, 9, 12, 15, 8, 37, 355, DateTimeKind.Local), DisplayName = "Estrella", Email = "Bryon.Kutch@yahoo.com", FirstName = "Candido", IsActive = true, IsDeleted = false, LastName = "Heller", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg", RoleId = 2 },
                        new { Id = "43c24b44-2dab-478d-b5e5-72e951c390ab", CreatedAt = new DateTime(2018, 9, 12, 15, 27, 34, 77, DateTimeKind.Local), DisplayName = "Johnathon", Email = "Barry24@yahoo.com", FirstName = "Marianne", IsActive = true, IsDeleted = false, LastName = "Bednar", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg", RoleId = 1 },
                        new { Id = "3c753ffd-420a-4b93-b091-01ac55aaeff3", CreatedAt = new DateTime(2018, 9, 12, 14, 40, 18, 62, DateTimeKind.Local), DisplayName = "Madilyn", Email = "Gracie.Mante@yahoo.com", FirstName = "Josiah", IsActive = true, IsDeleted = false, LastName = "Weissnat", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg", RoleId = 1 },
                        new { Id = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a", CreatedAt = new DateTime(2018, 9, 13, 0, 6, 19, 978, DateTimeKind.Local), DisplayName = "Sydney", Email = "Vincenzo_Stamm95@hotmail.com", FirstName = "Eleazar", IsActive = true, IsDeleted = false, LastName = "Harris", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg", RoleId = 1 },
                        new { Id = "8054cd22-9b52-4575-a04c-ae76707de796", CreatedAt = new DateTime(2018, 9, 12, 15, 11, 12, 531, DateTimeKind.Local), DisplayName = "Doug", Email = "Imelda9@hotmail.com", FirstName = "Jessika", IsActive = true, IsDeleted = false, LastName = "Haley", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "9939ac91-9e2a-4381-bddb-147506b6b5d3", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "7db6b06e-1b5a-4cad-836c-1467243ef929", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "1e4e1d3e-8076-43bd-bd3c-5987739a71dc", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "fc1af5c2-5260-4979-a30d-6c49759955ba", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "7ce0aded-8003-4d6b-b4b9-9b2ed32beb31", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "32d7cde9-73c3-405a-ba2f-fbdda364d9dd", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "43c24b44-2dab-478d-b5e5-72e951c390ab", OrganizationId = 62, OrganizationRoleId = 1 },
                        new { UserId = "3c753ffd-420a-4b93-b091-01ac55aaeff3", OrganizationId = 68, OrganizationRoleId = 1 },
                        new { UserId = "bb34cad5-9e7c-48af-a5ee-6e0fd7f5019a", OrganizationId = 62, OrganizationRoleId = 1 },
                        new { UserId = "8054cd22-9b52-4575-a04c-ae76707de796", OrganizationId = 66, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
