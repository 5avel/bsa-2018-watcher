// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180909193113_AddedNameAndEmailToFeedback")]
    partial class AddedNameAndEmailToFeedback
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 17, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 54, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 31, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 5, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 35, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 49, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 40, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 0, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 33, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 98, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "f8094016-a206-4a40-adc3-b92ec1410934", IsDeleted = false, Name = "culpa", Type = 0 },
                        new { Id = 22, CreatedById = "ed435334-5229-4335-9e90-7da8e259a354", IsDeleted = false, Name = "nihil", Type = 0 },
                        new { Id = 23, CreatedById = "5570b2e9-9936-49f9-b17b-3919c5eecacf", IsDeleted = false, Name = "quisquam", Type = 0 },
                        new { Id = 24, CreatedById = "07114155-cfa1-47cd-952b-8f5c4ec240be", IsDeleted = false, Name = "deleniti", Type = 0 },
                        new { Id = 25, CreatedById = "07114155-cfa1-47cd-952b-8f5c4ec240be", IsDeleted = false, Name = "dolor", Type = 0 },
                        new { Id = 26, CreatedById = "7f3dc2fa-8341-48be-93f5-135ba32a7910", IsDeleted = false, Name = "quo", Type = 0 },
                        new { Id = 27, CreatedById = "e9d34229-2688-47b3-9662-fa8f33739186", IsDeleted = false, Name = "voluptas", Type = 0 },
                        new { Id = 28, CreatedById = "07114155-cfa1-47cd-952b-8f5c4ec240be", IsDeleted = false, Name = "corrupti", Type = 0 },
                        new { Id = 29, CreatedById = "07114155-cfa1-47cd-952b-8f5c4ec240be", IsDeleted = false, Name = "commodi", Type = 0 },
                        new { Id = 30, CreatedById = "562fab8e-6fd6-4550-9ce2-673081577bac", IsDeleted = false, Name = "voluptatem", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 9, 15, 55, 42, 27, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title466" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 9, 8, 5, 18, 781, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title453" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 9, 5, 22, 31, 426, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title834" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 9, 18, 32, 59, 530, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title702" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 9, 16, 11, 12, 237, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title2" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 9, 8, 55, 22, 68, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title280" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 9, 4, 26, 23, 903, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title512" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 8, 22, 42, 27, 35, DateTimeKind.Local), InstanceId = 82, IsDeleted = false, Title = "Title761" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 8, 23, 36, 41, 938, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title659" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 9, 7, 52, 58, 444, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title678" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 9, 6, 8, 54, 324, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Id voluptatibus consequuntur et occaecati earum.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 9, 16, 1, 16, 939, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ipsam alias officiis et qui rerum odio.", UserId = "f8094016-a206-4a40-adc3-b92ec1410934", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 9, 9, 1, 49, 926, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Fuga delectus non eius sit recusandae.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 9, 3, 41, 13, 381, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolor repellendus totam at.", UserId = "cddea15a-1ff8-4e6c-aea2-8dfb5402e136", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 9, 0, 41, 53, 897, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sit consectetur aut dolorem deleniti.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 9, 14, 1, 8, 78, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Corrupti quaerat error ipsum provident est perferendis eum reiciendis.", UserId = "7f3dc2fa-8341-48be-93f5-135ba32a7910", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 9, 11, 59, 40, 519, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Cupiditate omnis earum magni a et.", UserId = "cddea15a-1ff8-4e6c-aea2-8dfb5402e136", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 9, 13, 18, 11, 335, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Nulla voluptatem sunt eos odit et dolore ullam.", UserId = "562fab8e-6fd6-4550-9ce2-673081577bac", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 9, 18, 33, 18, 866, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sit voluptate minus molestiae quis reprehenderit ipsum iste.", UserId = "562fab8e-6fd6-4550-9ce2-673081577bac", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 9, 2, 19, 54, 74, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et aut sequi qui similique dolore.", UserId = "e9d34229-2688-47b3-9662-fa8f33739186", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "31:23:57:1c:7b:1f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance17" },
                        new { Id = 82, Address = "44:e4:73:ce:17:62", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Linux", Title = "Instance805" },
                        new { Id = 83, Address = "50:cf:c8:0c:ad:79", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance821" },
                        new { Id = 84, Address = "f4:72:6a:7e:b7:d3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Linux", Title = "Instance909" },
                        new { Id = 85, Address = "cd:b2:63:98:18:3e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance468" },
                        new { Id = 86, Address = "7d:d8:30:73:51:62", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance866" },
                        new { Id = 87, Address = "07:b2:a0:ec:ad:d2", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance433" },
                        new { Id = 88, Address = "6d:a8:73:79:c3:9d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance88" },
                        new { Id = 89, Address = "10:c3:c5:59:63:1c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance952" },
                        new { Id = 90, Address = "78:aa:30:75:51:1a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance178" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 29, CreatedAt = new DateTime(2018, 9, 9, 6, 40, 10, 618, DateTimeKind.Local), IsDeleted = false, Text = "Vel totam vero adipisci.", UserId = "7eadfcff-b583-4407-89a0-1bb85c0a1c84", WasRead = true },
                        new { Id = 32, ChatId = 24, CreatedAt = new DateTime(2018, 9, 9, 6, 18, 41, 774, DateTimeKind.Local), IsDeleted = false, Text = "Quibusdam tenetur quia illum dolorem suscipit.", UserId = "5570b2e9-9936-49f9-b17b-3919c5eecacf", WasRead = true },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 9, 9, 12, 17, 42, 910, DateTimeKind.Local), IsDeleted = false, Text = "Velit et sunt facilis temporibus culpa earum.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", WasRead = true },
                        new { Id = 34, ChatId = 26, CreatedAt = new DateTime(2018, 9, 9, 12, 59, 25, 777, DateTimeKind.Local), IsDeleted = false, Text = "Assumenda dolores velit est pariatur nostrum.", UserId = "e9d34229-2688-47b3-9662-fa8f33739186", WasRead = true },
                        new { Id = 35, ChatId = 27, CreatedAt = new DateTime(2018, 9, 9, 0, 19, 54, 581, DateTimeKind.Local), IsDeleted = false, Text = "Ipsam rerum voluptatum accusantium ab.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", WasRead = true },
                        new { Id = 36, ChatId = 26, CreatedAt = new DateTime(2018, 9, 9, 22, 27, 23, 495, DateTimeKind.Local), IsDeleted = false, Text = "Qui aut sint saepe numquam voluptate quod porro sint debitis.", UserId = "ed435334-5229-4335-9e90-7da8e259a354", WasRead = true },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 9, 9, 16, 18, 44, 948, DateTimeKind.Local), IsDeleted = false, Text = "Fuga natus iure eum ut soluta a autem.", UserId = "7eadfcff-b583-4407-89a0-1bb85c0a1c84", WasRead = false },
                        new { Id = 38, ChatId = 29, CreatedAt = new DateTime(2018, 9, 9, 6, 7, 24, 969, DateTimeKind.Local), IsDeleted = false, Text = "Saepe numquam et excepturi voluptatem dignissimos quis.", UserId = "7f3dc2fa-8341-48be-93f5-135ba32a7910", WasRead = true },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 9, 9, 9, 38, 28, 498, DateTimeKind.Local), IsDeleted = false, Text = "Expedita soluta vitae rerum vitae enim voluptatem eaque nisi nihil.", UserId = "e9d34229-2688-47b3-9662-fa8f33739186", WasRead = false },
                        new { Id = 40, ChatId = 29, CreatedAt = new DateTime(2018, 9, 9, 18, 2, 0, 859, DateTimeKind.Local), IsDeleted = false, Text = "Odio animi voluptatibus quidem blanditiis.", UserId = "f8094016-a206-4a40-adc3-b92ec1410934", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 9, 20, 4, 27, 200, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Vel atque odio veniam voluptatum.", UserId = "ed435334-5229-4335-9e90-7da8e259a354", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 9, 0, 7, 29, 929, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Sint delectus voluptate.", UserId = "5570b2e9-9936-49f9-b17b-3919c5eecacf", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 9, 18, 10, 10, 229, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Consectetur voluptatem maiores aliquam voluptatem commodi velit expedita nulla.", UserId = "7eadfcff-b583-4407-89a0-1bb85c0a1c84", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 9, 20, 31, 41, 931, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Tenetur quas eligendi voluptatem autem odit quia recusandae.", UserId = "562fab8e-6fd6-4550-9ce2-673081577bac", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 9, 12, 55, 3, 212, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Ea maiores reiciendis optio non in nihil.", UserId = "f8094016-a206-4a40-adc3-b92ec1410934", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 9, 15, 26, 21, 570, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Aperiam reiciendis voluptatibus sit architecto dolor iusto.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 9, 13, 14, 43, 960, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Quasi esse enim.", UserId = "cddea15a-1ff8-4e6c-aea2-8dfb5402e136", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 9, 9, 48, 30, 322, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Et odit qui.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 9, 10, 37, 4, 959, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Iusto sapiente sint dolor est sit.", UserId = "07114155-cfa1-47cd-952b-8f5c4ec240be", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 9, 11, 2, 31, 196, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Quae qui dicta magnam sequi est et libero.", UserId = "7eadfcff-b583-4407-89a0-1bb85c0a1c84", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "d4e37539-2f83-49a7-90fd-ef749734303b" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "f8094016-a206-4a40-adc3-b92ec1410934" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "07114155-cfa1-47cd-952b-8f5c4ec240be" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "7eadfcff-b583-4407-89a0-1bb85c0a1c84" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "e9d34229-2688-47b3-9662-fa8f33739186" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "07114155-cfa1-47cd-952b-8f5c4ec240be" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "5570b2e9-9936-49f9-b17b-3919c5eecacf" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "7f3dc2fa-8341-48be-93f5-135ba32a7910" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "e9d34229-2688-47b3-9662-fa8f33739186" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "d4e37539-2f83-49a7-90fd-ef749734303b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "247.960.9669", CreatedByUserId = "f8094016-a206-4a40-adc3-b92ec1410934", Description = "Similique sed laudantium sit maxime dolorem. Dolore quam repellat.", Email = "Bettye_Orn16@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company629", ThemeId = 70, WebSite = "http://nestor.info" },
                        new { Id = 72, ContactNumber = "373.569.7364 x0554", CreatedByUserId = "ed435334-5229-4335-9e90-7da8e259a354", Description = "Iste et tempora tenetur perferendis placeat. Blanditiis hic dolorem suscipit vel quia.", Email = "Leo.Funk@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company277", ThemeId = 63, WebSite = "http://kyla.net" },
                        new { Id = 73, ContactNumber = "(621) 531-6196 x3774", CreatedByUserId = "cddea15a-1ff8-4e6c-aea2-8dfb5402e136", Description = "Reprehenderit dolores distinctio ea non. Incidunt numquam cumque quia. Vel voluptate architecto dolorem. Minima ut eius delectus amet temporibus dolorem ipsum est consequatur.", Email = "Edison48@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company794", ThemeId = 67, WebSite = "http://delores.net" },
                        new { Id = 74, ContactNumber = "1-441-208-7843", CreatedByUserId = "7f3dc2fa-8341-48be-93f5-135ba32a7910", Description = "Non sit explicabo animi tempore corrupti. Sed libero et dolor dolorum harum ullam ab.", Email = "Ryder.Runolfsdottir96@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company435", ThemeId = 70, WebSite = "https://emely.info" },
                        new { Id = 75, ContactNumber = "1-705-316-7642", CreatedByUserId = "7f3dc2fa-8341-48be-93f5-135ba32a7910", Description = "", Email = "Sim.Trantow33@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company201", ThemeId = 63, WebSite = "https://carolina.net" },
                        new { Id = 76, ContactNumber = "1-639-429-3899 x570", CreatedByUserId = "ed435334-5229-4335-9e90-7da8e259a354", Description = "Ullam eaque corrupti voluptates nostrum quia rerum labore. Et quos adipisci.", Email = "Rodger_Kunze3@gmail.com", IsActive = true, IsDeleted = false, Name = "Company653", ThemeId = 70, WebSite = "https://dorian.org" },
                        new { Id = 77, ContactNumber = "1-836-815-8005", CreatedByUserId = "07114155-cfa1-47cd-952b-8f5c4ec240be", Description = "Commodi cumque sed rerum architecto incidunt. Omnis dolor aut. Harum dolor facilis nam ut at ipsam eos ex ut. Occaecati perspiciatis exercitationem in hic voluptatem est.", Email = "Angeline.Berge@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company269", ThemeId = 64, WebSite = "http://marion.biz" },
                        new { Id = 78, ContactNumber = "1-974-948-8176 x617", CreatedByUserId = "7f3dc2fa-8341-48be-93f5-135ba32a7910", Description = "", Email = "Jennie_Herzog25@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company449", ThemeId = 66, WebSite = "http://laisha.info" },
                        new { Id = 79, ContactNumber = "1-206-278-0665", CreatedByUserId = "ed435334-5229-4335-9e90-7da8e259a354", Description = "", Email = "Ashly.Mitchell@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company501", ThemeId = 65, WebSite = "http://noe.com" },
                        new { Id = 80, ContactNumber = "939.834.3735 x7060", CreatedByUserId = "d4e37539-2f83-49a7-90fd-ef749734303b", Description = "Nihil unde consequatur aut velit. Suscipit incidunt deserunt vero et quisquam blanditiis et consequuntur. Sapiente corporis minus hic rem eos ut adipisci tempora commodi. Eos eos a hic.", Email = "Otha72@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company856", ThemeId = 68, WebSite = "http://cody.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 9, 19, 55, 19, 779, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Rem non dicta rerum.", UserId = "ed435334-5229-4335-9e90-7da8e259a354" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 9, 16, 58, 5, 642, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Quasi voluptas provident deserunt commodi a.", UserId = "07114155-cfa1-47cd-952b-8f5c4ec240be" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 9, 1, 18, 35, 476, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Omnis error quasi.", UserId = "ed435334-5229-4335-9e90-7da8e259a354" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 8, 22, 32, 4, 644, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Est reiciendis nihil quis ab.", UserId = "ed435334-5229-4335-9e90-7da8e259a354" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 9, 12, 56, 42, 813, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Et ut quia sunt illum saepe vitae maxime atque.", UserId = "ed435334-5229-4335-9e90-7da8e259a354" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 9, 17, 0, 14, 530, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Voluptatem molestiae nihil ut.", UserId = "5570b2e9-9936-49f9-b17b-3919c5eecacf" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 9, 11, 31, 8, 715, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Officia aut quia nostrum.", UserId = "ed435334-5229-4335-9e90-7da8e259a354" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 9, 7, 55, 32, 970, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Voluptatem voluptas architecto beatae.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 9, 10, 12, 22, 173, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Itaque sed et deleniti quia in aut suscipit qui.", UserId = "e9d34229-2688-47b3-9662-fa8f33739186" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 8, 22, 31, 44, 602, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Molestias assumenda autem non officia expedita dolorem.", UserId = "d4e37539-2f83-49a7-90fd-ef749734303b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Univers", IsDeleted = false, Name = "Theme399" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme632" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme437" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme26" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme186" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme945" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Trade", IsDeleted = false, Name = "Theme514" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme18" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme138" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Trade", IsDeleted = false, Name = "Theme715" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "5570b2e9-9936-49f9-b17b-3919c5eecacf", CreatedAt = new DateTime(2018, 9, 9, 2, 17, 25, 771, DateTimeKind.Local), DisplayName = "Abdul", Email = "Ariel_Labadie58@gmail.com", FirstName = "Zackery", IsActive = true, IsDeleted = false, LastName = "Turcotte", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg", RoleId = 2 },
                        new { Id = "07114155-cfa1-47cd-952b-8f5c4ec240be", CreatedAt = new DateTime(2018, 9, 9, 0, 12, 35, 155, DateTimeKind.Local), DisplayName = "Candace", Email = "Troy_Monahan@gmail.com", FirstName = "Germaine", IsActive = true, IsDeleted = false, LastName = "Bergstrom", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg", RoleId = 2 },
                        new { Id = "f8094016-a206-4a40-adc3-b92ec1410934", CreatedAt = new DateTime(2018, 9, 9, 20, 22, 4, 604, DateTimeKind.Local), DisplayName = "Vivienne", Email = "Freeda.Bartell59@yahoo.com", FirstName = "Audra", IsActive = true, IsDeleted = false, LastName = "Kihn", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg", RoleId = 1 },
                        new { Id = "7eadfcff-b583-4407-89a0-1bb85c0a1c84", CreatedAt = new DateTime(2018, 9, 9, 14, 25, 47, 345, DateTimeKind.Local), DisplayName = "Carleton", Email = "Bryon25@hotmail.com", FirstName = "Andreanne", IsActive = true, IsDeleted = false, LastName = "Fay", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg", RoleId = 1 },
                        new { Id = "ed435334-5229-4335-9e90-7da8e259a354", CreatedAt = new DateTime(2018, 9, 9, 20, 50, 48, 666, DateTimeKind.Local), DisplayName = "Ova", Email = "Vallie_Huels7@hotmail.com", FirstName = "Glenda", IsActive = true, IsDeleted = false, LastName = "Will", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg", RoleId = 2 },
                        new { Id = "cddea15a-1ff8-4e6c-aea2-8dfb5402e136", CreatedAt = new DateTime(2018, 9, 9, 15, 25, 18, 59, DateTimeKind.Local), DisplayName = "Shayne", Email = "Silas25@yahoo.com", FirstName = "Layne", IsActive = true, IsDeleted = false, LastName = "Brown", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg", RoleId = 1 },
                        new { Id = "7f3dc2fa-8341-48be-93f5-135ba32a7910", CreatedAt = new DateTime(2018, 9, 9, 4, 24, 29, 594, DateTimeKind.Local), DisplayName = "Paige", Email = "Delaney_Stiedemann@hotmail.com", FirstName = "Augustine", IsActive = true, IsDeleted = false, LastName = "Sporer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg", RoleId = 1 },
                        new { Id = "d4e37539-2f83-49a7-90fd-ef749734303b", CreatedAt = new DateTime(2018, 9, 8, 23, 16, 44, 827, DateTimeKind.Local), DisplayName = "Kristopher", Email = "Solon_Walter@gmail.com", FirstName = "Kimberly", IsActive = true, IsDeleted = false, LastName = "Ondricka", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg", RoleId = 2 },
                        new { Id = "e9d34229-2688-47b3-9662-fa8f33739186", CreatedAt = new DateTime(2018, 9, 9, 13, 6, 27, 440, DateTimeKind.Local), DisplayName = "Marcus", Email = "Felipa_Kessler@gmail.com", FirstName = "Emmanuelle", IsActive = true, IsDeleted = false, LastName = "Lueilwitz", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg", RoleId = 1 },
                        new { Id = "562fab8e-6fd6-4550-9ce2-673081577bac", CreatedAt = new DateTime(2018, 9, 9, 18, 45, 48, 516, DateTimeKind.Local), DisplayName = "Asha", Email = "Kennedy_Quigley39@gmail.com", FirstName = "Theresa", IsActive = true, IsDeleted = false, LastName = "Pollich", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "5570b2e9-9936-49f9-b17b-3919c5eecacf", OrganizationId = 76, OrganizationRoleId = 1 },
                        new { UserId = "07114155-cfa1-47cd-952b-8f5c4ec240be", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "f8094016-a206-4a40-adc3-b92ec1410934", OrganizationId = 75, OrganizationRoleId = 1 },
                        new { UserId = "7eadfcff-b583-4407-89a0-1bb85c0a1c84", OrganizationId = 78, OrganizationRoleId = 1 },
                        new { UserId = "ed435334-5229-4335-9e90-7da8e259a354", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "cddea15a-1ff8-4e6c-aea2-8dfb5402e136", OrganizationId = 74, OrganizationRoleId = 1 },
                        new { UserId = "7f3dc2fa-8341-48be-93f5-135ba32a7910", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "d4e37539-2f83-49a7-90fd-ef749734303b", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "e9d34229-2688-47b3-9662-fa8f33739186", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "562fab8e-6fd6-4550-9ce2-673081577bac", OrganizationId = 75, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
