// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180905110544_RoleinUserOrg")]
    partial class RoleinUserOrg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<string>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, AutoScale = true, DashboardId = 93, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 18, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 102, AutoScale = true, DashboardId = 95, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 61, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 103, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 36, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 104, AutoScale = true, DashboardId = 92, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 51, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 105, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 30, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 106, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded3", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 26, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 107, AutoScale = true, DashboardId = 96, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 42, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 108, AutoScale = true, DashboardId = 99, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded2", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 18, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 109, AutoScale = true, DashboardId = 94, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 74, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 110, AutoScale = true, DashboardId = 98, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = "MostLoaded1", RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 24, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "dea38051-7ab5-4de2-a554-ab9902007f03", IsDeleted = false, Name = "fugiat", Type = 0 },
                        new { Id = 22, CreatedById = "70969be4-d59d-4c34-aa3f-af71656108c4", IsDeleted = false, Name = "quam", Type = 0 },
                        new { Id = 23, CreatedById = "70969be4-d59d-4c34-aa3f-af71656108c4", IsDeleted = false, Name = "dolorum", Type = 0 },
                        new { Id = 24, CreatedById = "70969be4-d59d-4c34-aa3f-af71656108c4", IsDeleted = false, Name = "animi", Type = 0 },
                        new { Id = 25, CreatedById = "9678e087-46f4-48fb-a30d-c977325deaf6", IsDeleted = false, Name = "aliquam", Type = 0 },
                        new { Id = 26, CreatedById = "9678e087-46f4-48fb-a30d-c977325deaf6", IsDeleted = false, Name = "nemo", Type = 0 },
                        new { Id = 27, CreatedById = "3d9eb87f-4749-4005-8cc9-25b6953fb19b", IsDeleted = false, Name = "dolor", Type = 0 },
                        new { Id = 28, CreatedById = "9678e087-46f4-48fb-a30d-c977325deaf6", IsDeleted = false, Name = "hic", Type = 0 },
                        new { Id = 29, CreatedById = "be796db7-8c5e-479f-9abe-b56640fadb97", IsDeleted = false, Name = "ut", Type = 0 },
                        new { Id = 30, CreatedById = "be796db7-8c5e-479f-9abe-b56640fadb97", IsDeleted = false, Name = "vel", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 9, 4, 22, 56, 42, 276, DateTimeKind.Local), InstanceId = 88, IsDeleted = false, Title = "Title380" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 9, 5, 9, 21, 40, 648, DateTimeKind.Local), InstanceId = 87, IsDeleted = false, Title = "Title190" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 9, 4, 19, 26, 0, 448, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title26" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 9, 5, 10, 16, 17, 830, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title594" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 9, 4, 21, 22, 30, 851, DateTimeKind.Local), InstanceId = 90, IsDeleted = false, Title = "Title749" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 9, 5, 11, 23, 55, 773, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title971" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 9, 4, 23, 48, 32, 301, DateTimeKind.Local), InstanceId = 84, IsDeleted = false, Title = "Title341" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 9, 4, 14, 24, 19, 107, DateTimeKind.Local), InstanceId = 86, IsDeleted = false, Title = "Title100" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 9, 5, 12, 9, 56, 497, DateTimeKind.Local), InstanceId = 83, IsDeleted = false, Title = "Title485" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 9, 4, 19, 2, 51, 848, DateTimeKind.Local), InstanceId = 85, IsDeleted = false, Title = "Title494" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 5, 6, 24, 0, 613, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ratione quis cumque vitae dolorum.", UserId = "3d9eb87f-4749-4005-8cc9-25b6953fb19b", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 5, 1, 14, 20, 536, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Expedita officia eum odit ratione laborum ducimus eveniet.", UserId = "dea38051-7ab5-4de2-a554-ab9902007f03", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 4, 20, 25, 19, 949, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Labore quae autem laudantium ut omnis omnis.", UserId = "70969be4-d59d-4c34-aa3f-af71656108c4", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 4, 16, 0, 23, 577, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et exercitationem minus exercitationem laboriosam mollitia fugit veniam et et.", UserId = "9678e087-46f4-48fb-a30d-c977325deaf6", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 5, 1, 30, 36, 675, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ea libero repudiandae odio.", UserId = "dea38051-7ab5-4de2-a554-ab9902007f03", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 5, 6, 42, 42, 690, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Autem similique assumenda architecto atque tempora est qui aliquid.", UserId = "497eb796-037e-483e-a6da-46d34451db3a", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 5, 13, 43, 29, 575, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Totam quisquam alias nostrum explicabo vel consequatur.", UserId = "070ce34b-78ab-4ea8-8cc4-75827807a291", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 5, 3, 37, 6, 239, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Tempore quasi facilis cum repudiandae perferendis quibusdam.", UserId = "070ce34b-78ab-4ea8-8cc4-75827807a291", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 4, 22, 15, 41, 301, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Quasi necessitatibus eos dicta non.", UserId = "497eb796-037e-483e-a6da-46d34451db3a", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 5, 0, 43, 10, 264, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolorem nostrum non.", UserId = "70969be4-d59d-4c34-aa3f-af71656108c4", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "44:04:89:e9:67:1e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance737" },
                        new { Id = 82, Address = "63:18:f5:60:46:05", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 78, Platform = "Windows", Title = "Instance265" },
                        new { Id = 83, Address = "cd:fb:79:7f:24:12", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance731" },
                        new { Id = 84, Address = "88:a6:ae:0f:88:bd", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 80, Platform = "Windows", Title = "Instance72" },
                        new { Id = 85, Address = "fa:b7:85:16:5e:1e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 71, Platform = "Linux", Title = "Instance422" },
                        new { Id = 86, Address = "da:b0:61:9b:ae:49", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 76, Platform = "Linux", Title = "Instance732" },
                        new { Id = 87, Address = "0a:50:61:23:f4:bd", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Windows", Title = "Instance771" },
                        new { Id = 88, Address = "0a:d4:14:9a:26:16", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 75, Platform = "Linux", Title = "Instance841" },
                        new { Id = 89, Address = "fc:57:62:68:45:d7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 73, Platform = "Windows", Title = "Instance125" },
                        new { Id = 90, Address = "31:f0:1d:17:16:a9", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 74, Platform = "Windows", Title = "Instance379" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 30, CreatedAt = new DateTime(2018, 9, 5, 4, 48, 13, 493, DateTimeKind.Local), IsDeleted = false, Text = "Nam dolorem nobis asperiores nisi quia.", UserId = "92ac698a-a117-446e-9d22-e1fd66cc2106", WasRead = false },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 9, 4, 22, 55, 33, 727, DateTimeKind.Local), IsDeleted = false, Text = "Voluptatum facere sint perferendis vero.", UserId = "dea38051-7ab5-4de2-a554-ab9902007f03", WasRead = true },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 9, 5, 10, 46, 59, 864, DateTimeKind.Local), IsDeleted = false, Text = "Aliquam vel sapiente necessitatibus vel voluptatem doloremque voluptatibus debitis.", UserId = "070ce34b-78ab-4ea8-8cc4-75827807a291", WasRead = false },
                        new { Id = 34, ChatId = 24, CreatedAt = new DateTime(2018, 9, 4, 19, 26, 6, 345, DateTimeKind.Local), IsDeleted = false, Text = "Vel id quo ad.", UserId = "070ce34b-78ab-4ea8-8cc4-75827807a291", WasRead = true },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 9, 5, 11, 0, 30, 760, DateTimeKind.Local), IsDeleted = false, Text = "Delectus veritatis nihil animi itaque nam molestiae.", UserId = "9678e087-46f4-48fb-a30d-c977325deaf6", WasRead = false },
                        new { Id = 36, ChatId = 24, CreatedAt = new DateTime(2018, 9, 5, 12, 29, 51, 971, DateTimeKind.Local), IsDeleted = false, Text = "Dignissimos quisquam aut provident consequatur autem.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97", WasRead = true },
                        new { Id = 37, ChatId = 29, CreatedAt = new DateTime(2018, 9, 4, 17, 46, 47, 827, DateTimeKind.Local), IsDeleted = false, Text = "Velit ut velit quia possimus.", UserId = "64019e2c-eb99-4670-9fd4-b5a7e22942ae", WasRead = true },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 9, 4, 19, 56, 47, 915, DateTimeKind.Local), IsDeleted = false, Text = "Aut repellat eum iure porro sunt voluptatem ducimus perferendis aut.", UserId = "070ce34b-78ab-4ea8-8cc4-75827807a291", WasRead = false },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 9, 4, 15, 18, 59, 250, DateTimeKind.Local), IsDeleted = false, Text = "Laborum maxime in.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97", WasRead = false },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 9, 5, 2, 55, 39, 632, DateTimeKind.Local), IsDeleted = false, Text = "Repellendus perferendis aliquam quod perspiciatis tempore minima veniam eligendi.", UserId = "70969be4-d59d-4c34-aa3f-af71656108c4", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 9, 5, 6, 8, 48, 749, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Suscipit hic quia ratione.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 9, 5, 9, 22, 51, 914, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Tempora rerum earum tempore magni id non.", UserId = "3d9eb87f-4749-4005-8cc9-25b6953fb19b", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 9, 4, 15, 32, 19, 290, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Rerum eos sit quidem.", UserId = "3d9eb87f-4749-4005-8cc9-25b6953fb19b", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 9, 4, 22, 1, 32, 68, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Sapiente eum qui eius praesentium dolor.", UserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 9, 5, 11, 59, 27, 80, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Odit esse et eligendi enim placeat.", UserId = "70969be4-d59d-4c34-aa3f-af71656108c4", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 9, 4, 19, 43, 34, 595, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Rem quam ipsa voluptatibus.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 9, 5, 13, 38, 6, 246, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Voluptatem enim sit.", UserId = "70969be4-d59d-4c34-aa3f-af71656108c4", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 9, 5, 0, 19, 20, 104, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 12, Text = "Modi dicta quam atque dolores praesentium sint ducimus voluptas eaque.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 9, 5, 3, 10, 8, 904, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Et unde ratione fuga consequatur aut ut laboriosam neque.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 9, 5, 13, 0, 7, 267, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Recusandae ipsum magnam dicta et odit quisquam.", UserId = "dea38051-7ab5-4de2-a554-ab9902007f03", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "92ac698a-a117-446e-9d22-e1fd66cc2106" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "64019e2c-eb99-4670-9fd4-b5a7e22942ae" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "070ce34b-78ab-4ea8-8cc4-75827807a291" },
                        new { Id = 14, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "92ac698a-a117-446e-9d22-e1fd66cc2106" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "497eb796-037e-483e-a6da-46d34451db3a" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "9678e087-46f4-48fb-a30d-c977325deaf6" },
                        new { Id = 17, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "be796db7-8c5e-479f-9abe-b56640fadb97" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "92ac698a-a117-446e-9d22-e1fd66cc2106" },
                        new { Id = 19, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "92ac698a-a117-446e-9d22-e1fd66cc2106" },
                        new { Id = 20, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "64019e2c-eb99-4670-9fd4-b5a7e22942ae" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(766) 300-3104 x21580", CreatedByUserId = "3d9eb87f-4749-4005-8cc9-25b6953fb19b", Description = "Et expedita autem libero alias quo qui et sit deleniti.", Email = "Makenna47@gmail.com", IsActive = true, IsDeleted = false, Name = "Company395", ThemeId = 65, WebSite = "https://sallie.com" },
                        new { Id = 72, ContactNumber = "290-914-6807 x612", CreatedByUserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", Description = "Et ducimus praesentium aspernatur. Culpa tempora quo. Aut ipsum fugit enim perspiciatis aperiam.", Email = "Anika3@gmail.com", IsActive = true, IsDeleted = false, Name = "Company612", ThemeId = 68, WebSite = "http://carey.name" },
                        new { Id = 73, ContactNumber = "1-283-506-5806 x8824", CreatedByUserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", Description = "Suscipit quis ut.", Email = "Matt_Bartell5@gmail.com", IsActive = true, IsDeleted = false, Name = "Company766", ThemeId = 67, WebSite = "http://marcellus.com" },
                        new { Id = 74, ContactNumber = "1-343-937-2841 x61434", CreatedByUserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", Description = "Tenetur porro delectus in aperiam architecto. Sit officiis eveniet omnis.", Email = "Isaiah_Kuvalis@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company876", ThemeId = 69, WebSite = "http://amari.net" },
                        new { Id = 75, ContactNumber = "1-552-625-0003", CreatedByUserId = "70969be4-d59d-4c34-aa3f-af71656108c4", Description = "Placeat molestias aut saepe voluptas. Praesentium accusamus cumque pariatur rerum.", Email = "Tess3@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company384", ThemeId = 67, WebSite = "https://margarita.name" },
                        new { Id = 76, ContactNumber = "673-984-9486 x146", CreatedByUserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", Description = "Quas numquam optio velit provident a quod perspiciatis.", Email = "Brielle.Kuphal@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company249", ThemeId = 61, WebSite = "http://rowland.com" },
                        new { Id = 77, ContactNumber = "602-391-9900 x077", CreatedByUserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", Description = "", Email = "Orval89@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company400", ThemeId = 65, WebSite = "http://marilyne.biz" },
                        new { Id = 78, ContactNumber = "599.403.9061 x678", CreatedByUserId = "070ce34b-78ab-4ea8-8cc4-75827807a291", Description = "Delectus consequatur velit quibusdam porro adipisci id praesentium consequatur non. Perferendis eos at officia cum ut et.", Email = "Reese.Hoppe44@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company437", ThemeId = 66, WebSite = "https://floyd.net" },
                        new { Id = 79, ContactNumber = "(283) 803-5937 x7975", CreatedByUserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", Description = "Tempora vitae occaecati.", Email = "Marge98@gmail.com", IsActive = true, IsDeleted = false, Name = "Company844", ThemeId = 63, WebSite = "https://deja.org" },
                        new { Id = 80, ContactNumber = "351-605-5395", CreatedByUserId = "9678e087-46f4-48fb-a30d-c977325deaf6", Description = "Ab quaerat ea quia adipisci quia possimus eligendi est. Quam unde et possimus occaecati et dolorem dolore velit. Repellendus in omnis eius. Fugit consequatur nobis.", Email = "Percival.Goldner@gmail.com", IsActive = true, IsDeleted = false, Name = "Company459", ThemeId = 62, WebSite = "https://cortez.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 4, 23, 3, 47, 118, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Explicabo voluptate ex autem illum.", UserId = "70969be4-d59d-4c34-aa3f-af71656108c4" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 5, 13, 29, 40, 94, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Quia eveniet cumque molestiae aut enim possimus.", UserId = "92ac698a-a117-446e-9d22-e1fd66cc2106" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 4, 21, 22, 32, 60, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Excepturi in qui repudiandae omnis iusto alias.", UserId = "3d9eb87f-4749-4005-8cc9-25b6953fb19b" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 4, 20, 59, 48, 565, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Fugit veniam nemo culpa quas distinctio quam dolorum.", UserId = "9678e087-46f4-48fb-a30d-c977325deaf6" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 5, 12, 29, 23, 247, DateTimeKind.Local), FeedbackId = 41, IsDeleted = false, Text = "Sapiente consectetur dolorem incidunt consequatur quibusdam.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 4, 23, 4, 3, 265, DateTimeKind.Local), FeedbackId = 45, IsDeleted = false, Text = "Adipisci qui occaecati dolorem odio laborum eum.", UserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 5, 11, 45, 37, 855, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Corrupti dolor esse sed tempora consequatur.", UserId = "dea38051-7ab5-4de2-a554-ab9902007f03" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 4, 15, 38, 37, 765, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Illo sunt consectetur dolorum est.", UserId = "be796db7-8c5e-479f-9abe-b56640fadb97" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 5, 8, 24, 33, 321, DateTimeKind.Local), FeedbackId = 46, IsDeleted = false, Text = "Consequuntur omnis cum cupiditate sunt atque veritatis soluta eius aut.", UserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 5, 6, 7, 43, 356, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Molestiae voluptatum voluptate velit aut omnis doloribus ut distinctio quo.", UserId = "3d9eb87f-4749-4005-8cc9-25b6953fb19b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme328" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme178" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme681" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme633" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Frutiger", IsDeleted = false, Name = "Theme796" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme129" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", IsDeleted = false, Name = "Theme524" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Helvetica", IsDeleted = false, Name = "Theme155" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Univers", IsDeleted = false, Name = "Theme947" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Univers", IsDeleted = false, Name = "Theme503" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", CreatedAt = new DateTime(2018, 9, 5, 9, 7, 45, 325, DateTimeKind.Local), DisplayName = "Samir", Email = "Keven.Huels25@hotmail.com", FirstName = "Ryder", IsActive = true, IsDeleted = false, LastName = "Leffler", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg", RoleId = 1 },
                        new { Id = "3d9eb87f-4749-4005-8cc9-25b6953fb19b", CreatedAt = new DateTime(2018, 9, 5, 6, 43, 25, 722, DateTimeKind.Local), DisplayName = "Sebastian", Email = "Thomas.Kuhlman@gmail.com", FirstName = "Ryder", IsActive = true, IsDeleted = false, LastName = "Gerlach", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg", RoleId = 2 },
                        new { Id = "be796db7-8c5e-479f-9abe-b56640fadb97", CreatedAt = new DateTime(2018, 9, 5, 7, 25, 39, 68, DateTimeKind.Local), DisplayName = "Guiseppe", Email = "Tyree.Shields@yahoo.com", FirstName = "Isabel", IsActive = true, IsDeleted = false, LastName = "Reichel", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg", RoleId = 1 },
                        new { Id = "070ce34b-78ab-4ea8-8cc4-75827807a291", CreatedAt = new DateTime(2018, 9, 5, 5, 30, 29, 820, DateTimeKind.Local), DisplayName = "Monica", Email = "Luella5@gmail.com", FirstName = "Lelah", IsActive = true, IsDeleted = false, LastName = "Kassulke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg", RoleId = 1 },
                        new { Id = "64019e2c-eb99-4670-9fd4-b5a7e22942ae", CreatedAt = new DateTime(2018, 9, 5, 0, 51, 12, 329, DateTimeKind.Local), DisplayName = "Daryl", Email = "Delbert.Crona98@hotmail.com", FirstName = "Mathew", IsActive = true, IsDeleted = false, LastName = "Reynolds", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg", RoleId = 2 },
                        new { Id = "9678e087-46f4-48fb-a30d-c977325deaf6", CreatedAt = new DateTime(2018, 9, 4, 18, 14, 57, 460, DateTimeKind.Local), DisplayName = "Casper", Email = "Rene_Macejkovic28@hotmail.com", FirstName = "Hector", IsActive = true, IsDeleted = false, LastName = "Yost", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg", RoleId = 2 },
                        new { Id = "dea38051-7ab5-4de2-a554-ab9902007f03", CreatedAt = new DateTime(2018, 9, 5, 7, 5, 31, 986, DateTimeKind.Local), DisplayName = "Monroe", Email = "Cara.Effertz@hotmail.com", FirstName = "Issac", IsActive = true, IsDeleted = false, LastName = "Howe", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg", RoleId = 1 },
                        new { Id = "70969be4-d59d-4c34-aa3f-af71656108c4", CreatedAt = new DateTime(2018, 9, 4, 22, 25, 27, 210, DateTimeKind.Local), DisplayName = "Claudie", Email = "Ena.Rogahn35@yahoo.com", FirstName = "Marcia", IsActive = true, IsDeleted = false, LastName = "Hoeger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg", RoleId = 1 },
                        new { Id = "497eb796-037e-483e-a6da-46d34451db3a", CreatedAt = new DateTime(2018, 9, 4, 16, 19, 20, 859, DateTimeKind.Local), DisplayName = "Mae", Email = "Jennyfer_Howe@gmail.com", FirstName = "Cornell", IsActive = true, IsDeleted = false, LastName = "Kreiger", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg", RoleId = 2 },
                        new { Id = "92ac698a-a117-446e-9d22-e1fd66cc2106", CreatedAt = new DateTime(2018, 9, 5, 11, 0, 55, 567, DateTimeKind.Local), DisplayName = "Hillard", Email = "Tomas40@hotmail.com", FirstName = "Eliseo", IsActive = true, IsDeleted = false, LastName = "Stokes", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "6f93a171-b5f1-4689-949c-3c2cbd0bdedd", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "3d9eb87f-4749-4005-8cc9-25b6953fb19b", OrganizationId = 71, OrganizationRoleId = 1 },
                        new { UserId = "be796db7-8c5e-479f-9abe-b56640fadb97", OrganizationId = 77, OrganizationRoleId = 1 },
                        new { UserId = "070ce34b-78ab-4ea8-8cc4-75827807a291", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "64019e2c-eb99-4670-9fd4-b5a7e22942ae", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "9678e087-46f4-48fb-a30d-c977325deaf6", OrganizationId = 73, OrganizationRoleId = 1 },
                        new { UserId = "dea38051-7ab5-4de2-a554-ab9902007f03", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "70969be4-d59d-4c34-aa3f-af71656108c4", OrganizationId = 72, OrganizationRoleId = 1 },
                        new { UserId = "497eb796-037e-483e-a6da-46d34451db3a", OrganizationId = 79, OrganizationRoleId = 1 },
                        new { UserId = "92ac698a-a117-446e-9d22-e1fd66cc2106", OrganizationId = 75, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
