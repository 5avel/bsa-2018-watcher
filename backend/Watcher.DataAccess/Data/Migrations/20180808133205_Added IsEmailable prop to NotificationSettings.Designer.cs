// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180808133205_Added IsEmailable prop to NotificationSettings")]
    partial class AddedIsEmailableproptoNotificationSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 5, Type = 1 },
                        new { Id = 102, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 99, Type = 1 },
                        new { Id = 103, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 63, Type = 0 },
                        new { Id = 104, DashboardId = 96, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 12, Type = 1 },
                        new { Id = 105, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 46, Type = 1 },
                        new { Id = 106, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source1", Threshold = 59, Type = 0 },
                        new { Id = 107, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 39, Type = 2 },
                        new { Id = 108, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 60, Type = 0 },
                        new { Id = 109, DashboardId = 91, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 81, Type = 2 },
                        new { Id = 110, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 44, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = 12, Name = "a", Type = 0 },
                        new { Id = 22, CreatedById = 11, Name = "voluptas", Type = 0 },
                        new { Id = 23, CreatedById = 16, Name = "natus", Type = 0 },
                        new { Id = 24, CreatedById = 11, Name = "facere", Type = 0 },
                        new { Id = 25, CreatedById = 11, Name = "distinctio", Type = 0 },
                        new { Id = 26, CreatedById = 19, Name = "quam", Type = 0 },
                        new { Id = 27, CreatedById = 15, Name = "corporis", Type = 0 },
                        new { Id = 28, CreatedById = 12, Name = "iusto", Type = 0 },
                        new { Id = 29, CreatedById = 16, Name = "soluta", Type = 0 },
                        new { Id = 30, CreatedById = 17, Name = "doloremque", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 7, 22, 0, 22, 592, DateTimeKind.Local), InstanceId = 82, Title = "Title270" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 8, 2, 1, 56, 408, DateTimeKind.Local), InstanceId = 89, Title = "Title926" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 7, 18, 43, 21, 69, DateTimeKind.Local), InstanceId = 90, Title = "Title523" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 8, 5, 49, 59, 229, DateTimeKind.Local), InstanceId = 84, Title = "Title891" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 8, 4, 9, 26, 423, DateTimeKind.Local), InstanceId = 84, Title = "Title572" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 7, 20, 40, 51, 325, DateTimeKind.Local), InstanceId = 83, Title = "Title264" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 8, 1, 13, 42, 954, DateTimeKind.Local), InstanceId = 85, Title = "Title133" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 7, 22, 7, 10, 268, DateTimeKind.Local), InstanceId = 84, Title = "Title359" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 7, 17, 54, 17, 990, DateTimeKind.Local), InstanceId = 90, Title = "Title289" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 7, 20, 29, 4, 246, DateTimeKind.Local), InstanceId = 90, Title = "Title302" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 7, 17, 59, 45, 467, DateTimeKind.Local), Text = "Vel consequuntur omnis iusto nihil ut ut.", UserId = 16 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 7, 20, 32, 48, 294, DateTimeKind.Local), Text = "Ipsa modi ex aut corporis vitae.", UserId = 16 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 7, 18, 35, 35, 106, DateTimeKind.Local), Text = "Sed aut et.", UserId = 15 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 7, 19, 8, 51, 591, DateTimeKind.Local), Text = "Quos nam voluptate.", UserId = 20 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 8, 2, 34, 59, 854, DateTimeKind.Local), Text = "Laudantium tempora qui esse sunt quas distinctio nihil vero rem.", UserId = 20 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 7, 17, 43, 12, 263, DateTimeKind.Local), Text = "Quis alias at necessitatibus vero quas.", UserId = 11 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 8, 2, 48, 43, 485, DateTimeKind.Local), Text = "Ratione culpa sunt numquam dolores laboriosam non ut dolorem quae.", UserId = 15 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 8, 10, 41, 20, 717, DateTimeKind.Local), Text = "Repellat a nobis qui culpa ipsum aut.", UserId = 18 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 8, 3, 17, 11, 443, DateTimeKind.Local), Text = "Nostrum odio ipsa aspernatur quidem omnis.", UserId = 14 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 7, 20, 58, 55, 3, DateTimeKind.Local), Text = "Saepe voluptatum beatae.", UserId = 19 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "41:5e:90:a3:31:99", OrganizationId = 79, Platform = "Windows" },
                        new { Id = 82, Address = "77:c8:d3:ec:90:90", OrganizationId = 74, Platform = "Windows" },
                        new { Id = 83, Address = "bb:90:ba:6c:f2:13", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 84, Address = "6c:11:86:f1:46:b0", OrganizationId = 71, Platform = "Windows" },
                        new { Id = 85, Address = "69:7a:16:b4:17:88", OrganizationId = 76, Platform = "Linux" },
                        new { Id = 86, Address = "83:45:4b:0e:96:27", OrganizationId = 80, Platform = "Windows" },
                        new { Id = 87, Address = "c7:59:d6:79:ae:e3", OrganizationId = 75, Platform = "Linux" },
                        new { Id = 88, Address = "cc:33:36:1f:13:f0", OrganizationId = 78, Platform = "Windows" },
                        new { Id = 89, Address = "b3:52:82:15:79:a5", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 90, Address = "fe:52:e9:ad:c7:82", OrganizationId = 78, Platform = "Windows" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 29, CreatedAt = new DateTime(2018, 8, 7, 22, 48, 50, 935, DateTimeKind.Local), Text = "Aut et provident sed.", UserId = 11, WasRead = false },
                        new { Id = 32, ChatId = 28, CreatedAt = new DateTime(2018, 8, 8, 4, 46, 25, 944, DateTimeKind.Local), Text = "Qui aspernatur expedita in repellendus sit dolorem quam.", UserId = 19, WasRead = true },
                        new { Id = 33, ChatId = 29, CreatedAt = new DateTime(2018, 8, 8, 4, 49, 41, 98, DateTimeKind.Local), Text = "Magnam reiciendis minus sed praesentium.", UserId = 12, WasRead = false },
                        new { Id = 34, ChatId = 26, CreatedAt = new DateTime(2018, 8, 8, 15, 57, 45, 98, DateTimeKind.Local), Text = "Et odio at non enim molestias itaque voluptas sint.", UserId = 14, WasRead = true },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 8, 8, 13, 37, 1, 803, DateTimeKind.Local), Text = "Qui quo aliquam itaque.", UserId = 20, WasRead = true },
                        new { Id = 36, ChatId = 28, CreatedAt = new DateTime(2018, 8, 8, 2, 21, 43, 707, DateTimeKind.Local), Text = "Possimus ea iste et esse minima.", UserId = 14, WasRead = true },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 8, 8, 3, 48, 54, 692, DateTimeKind.Local), Text = "Alias eos non et at.", UserId = 19, WasRead = false },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 8, 8, 11, 2, 9, 415, DateTimeKind.Local), Text = "Quia optio expedita similique voluptatum maxime sunt unde in.", UserId = 11, WasRead = false },
                        new { Id = 39, ChatId = 30, CreatedAt = new DateTime(2018, 8, 8, 4, 54, 12, 364, DateTimeKind.Local), Text = "Consequuntur possimus impedit.", UserId = 15, WasRead = false },
                        new { Id = 40, ChatId = 21, CreatedAt = new DateTime(2018, 8, 8, 2, 5, 17, 249, DateTimeKind.Local), Text = "Quia doloribus nesciunt officia.", UserId = 14, WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 8, 3, 29, 55, 936, DateTimeKind.Local), NotificationSettingId = 7, Text = "Debitis molestias quasi a.", UserId = 15 },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 8, 0, 31, 13, 499, DateTimeKind.Local), NotificationSettingId = 5, Text = "Maxime delectus omnis repellendus rerum aperiam blanditiis adipisci sunt voluptates.", UserId = 14 },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 7, 23, 2, 59, 101, DateTimeKind.Local), NotificationSettingId = 10, Text = "Inventore nulla modi ab est et veniam.", UserId = 13 },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 8, 10, 52, 4, 968, DateTimeKind.Local), NotificationSettingId = 4, Text = "Quaerat ut dolore eos esse explicabo odit blanditiis.", UserId = 12 },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 8, 10, 13, 45, 942, DateTimeKind.Local), NotificationSettingId = 10, Text = "Voluptatem odit asperiores.", UserId = 18 },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 8, 4, 41, 54, 204, DateTimeKind.Local), NotificationSettingId = 9, Text = "Fugit nobis et voluptas ducimus tempora id.", UserId = 19 },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 8, 8, 34, 20, 865, DateTimeKind.Local), NotificationSettingId = 9, Text = "Sit maxime natus magni vel dolores quia.", UserId = 17 },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 8, 0, 48, 48, 379, DateTimeKind.Local), NotificationSettingId = 6, Text = "Sint et vel nihil omnis velit rerum.", UserId = 17 },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 8, 10, 17, 58, 619, DateTimeKind.Local), NotificationSettingId = 7, Text = "Est debitis delectus est sunt quibusdam quidem soluta animi.", UserId = 17 },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 7, 19, 54, 21, 164, DateTimeKind.Local), NotificationSettingId = 5, Text = "Est occaecati necessitatibus est.", UserId = 11 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 1, IsDisable = false, IsEmailable = true, IsMute = true, Type = 0 },
                        new { Id = 2, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0 },
                        new { Id = 3, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1 },
                        new { Id = 4, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1 },
                        new { Id = 5, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0 },
                        new { Id = 6, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0 },
                        new { Id = 7, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0 },
                        new { Id = 8, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1 },
                        new { Id = 9, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1 },
                        new { Id = 10, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "371.369.1097", CreatedByUserId = 20, Description = "", Email = "Kale.Kulas18@gmail.com", IsActive = true, Name = "Company926", ThemeId = 69, WebSite = "http://evans.name" },
                        new { Id = 72, ContactNumber = "923.534.4861", CreatedByUserId = 20, Description = "", Email = "Leif46@hotmail.com", IsActive = true, Name = "Company156", ThemeId = 62, WebSite = "https://kiel.org" },
                        new { Id = 73, ContactNumber = "581-612-6251", CreatedByUserId = 19, Description = "Quibusdam harum deleniti ad ut et est aut.", Email = "Sonya.Schmitt91@yahoo.com", IsActive = true, Name = "Company543", ThemeId = 69, WebSite = "http://lyric.info" },
                        new { Id = 74, ContactNumber = "1-957-959-3654", CreatedByUserId = 17, Description = "Aspernatur ipsum ipsam rerum est non et tempora sit.", Email = "Kennedi_Daugherty27@hotmail.com", IsActive = true, Name = "Company60", ThemeId = 66, WebSite = "https://paula.org" },
                        new { Id = 75, ContactNumber = "(864) 677-7126 x594", CreatedByUserId = 15, Description = "", Email = "Alexandrine.Tillman@yahoo.com", IsActive = true, Name = "Company10", ThemeId = 68, WebSite = "http://jacinto.net" },
                        new { Id = 76, ContactNumber = "1-630-270-6472 x12159", CreatedByUserId = 11, Description = "Nihil autem aut voluptatem quam accusamus quidem velit qui.", Email = "Mittie37@hotmail.com", IsActive = true, Name = "Company625", ThemeId = 64, WebSite = "https://isadore.org" },
                        new { Id = 77, ContactNumber = "1-874-646-7218 x51088", CreatedByUserId = 12, Description = "", Email = "Alexander.Rolfson13@gmail.com", IsActive = true, Name = "Company519", ThemeId = 67, WebSite = "https://kathryne.net" },
                        new { Id = 78, ContactNumber = "(836) 542-4631", CreatedByUserId = 17, Description = "Repellendus magnam soluta optio sapiente a et a dolores. Labore eos sunt quo quidem eligendi sed sit ipsam non. Non quaerat quis consectetur excepturi animi.", Email = "Danyka.Tromp@gmail.com", IsActive = true, Name = "Company688", ThemeId = 65, WebSite = "http://jamey.biz" },
                        new { Id = 79, ContactNumber = "619.424.0667", CreatedByUserId = 18, Description = "Eos occaecati odio. Asperiores enim quas qui ea corporis quos quod ratione.", Email = "Vena97@yahoo.com", IsActive = true, Name = "Company392", ThemeId = 70, WebSite = "http://rico.biz" },
                        new { Id = 80, ContactNumber = "1-349-797-9764", CreatedByUserId = 15, Description = "Voluptatibus et voluptas id qui quaerat. Voluptate est quas perspiciatis voluptas beatae tenetur quaerat sed. Est accusamus nisi architecto expedita ipsum voluptas consequatur qui enim. Voluptas velit beatae voluptatum voluptatem dolores cum sunt ipsa.", Email = "Jarvis13@yahoo.com", IsActive = true, Name = "Company225", ThemeId = 64, WebSite = "https://aurore.net" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 8, 3, 44, 5, 982, DateTimeKind.Local), FeedbackId = 41, Text = "Quis quia non dolorum est.", UserId = 14 },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 8, 12, 50, 39, 134, DateTimeKind.Local), FeedbackId = 48, Text = "Alias saepe sed consequuntur et dolor aut quod esse.", UserId = 13 },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 8, 9, 58, 4, 745, DateTimeKind.Local), FeedbackId = 46, Text = "Et in praesentium.", UserId = 17 },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 7, 19, 8, 43, 600, DateTimeKind.Local), FeedbackId = 41, Text = "Aut et qui voluptas consequatur non pariatur.", UserId = 17 },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 7, 22, 53, 43, 815, DateTimeKind.Local), FeedbackId = 47, Text = "Voluptates et magnam explicabo quod sunt nihil laudantium incidunt et.", UserId = 17 },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 7, 20, 53, 7, 831, DateTimeKind.Local), FeedbackId = 47, Text = "Officia minima vitae quidem neque quis officiis.", UserId = 15 },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 7, 23, 24, 20, 916, DateTimeKind.Local), FeedbackId = 41, Text = "Facere ea omnis.", UserId = 20 },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 8, 8, 17, 57, 667, DateTimeKind.Local), FeedbackId = 42, Text = "Sit quaerat quis.", UserId = 19 },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 7, 21, 46, 40, 990, DateTimeKind.Local), FeedbackId = 48, Text = "Rerum pariatur adipisci voluptas est consequatur aliquam atque minima.", UserId = 20 },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 8, 3, 7, 2, 651, DateTimeKind.Local), FeedbackId = 50, Text = "Praesentium impedit voluptatem explicabo maiores.", UserId = 11 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme211" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme836" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme192" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme802" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme490" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme269" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme166" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme237" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme135" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme442" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecondName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 11, CreatedAt = new DateTime(2018, 8, 8, 2, 57, 32, 292, DateTimeKind.Local), Email = "Lisandro32@gmail.com", FirstName = "Asia", IsActive = true, NotificationSettingId = 3, RoleId = 1, SecondName = "Altenwerth" },
                        new { Id = 12, CreatedAt = new DateTime(2018, 8, 8, 1, 7, 2, 657, DateTimeKind.Local), Email = "Coty_Larkin31@gmail.com", FirstName = "Sigurd", IsActive = true, NotificationSettingId = 2, RoleId = 1, SecondName = "Ritchie" },
                        new { Id = 13, CreatedAt = new DateTime(2018, 8, 7, 21, 12, 16, 772, DateTimeKind.Local), Email = "Rasheed_Kohler2@yahoo.com", FirstName = "Sim", IsActive = true, NotificationSettingId = 8, RoleId = 1, SecondName = "Cronin" },
                        new { Id = 14, CreatedAt = new DateTime(2018, 8, 8, 7, 48, 2, 920, DateTimeKind.Local), Email = "Eulalia.Pacocha71@gmail.com", FirstName = "Laurel", IsActive = true, NotificationSettingId = 2, RoleId = 1, SecondName = "Raynor" },
                        new { Id = 15, CreatedAt = new DateTime(2018, 8, 8, 14, 59, 49, 510, DateTimeKind.Local), Email = "Emelie_Schuppe@yahoo.com", FirstName = "Angelica", IsActive = true, NotificationSettingId = 8, RoleId = 1, SecondName = "Purdy" },
                        new { Id = 16, CreatedAt = new DateTime(2018, 8, 7, 21, 0, 9, 53, DateTimeKind.Local), Email = "Roslyn.Romaguera31@gmail.com", FirstName = "Braulio", IsActive = true, NotificationSettingId = 3, RoleId = 2, SecondName = "Pollich" },
                        new { Id = 17, CreatedAt = new DateTime(2018, 8, 8, 13, 57, 45, 976, DateTimeKind.Local), Email = "Letitia13@gmail.com", FirstName = "Phyllis", IsActive = true, NotificationSettingId = 10, RoleId = 2, SecondName = "Bruen" },
                        new { Id = 18, CreatedAt = new DateTime(2018, 8, 7, 19, 0, 12, 48, DateTimeKind.Local), Email = "Ayla15@hotmail.com", FirstName = "Arthur", IsActive = true, NotificationSettingId = 3, RoleId = 2, SecondName = "Cole" },
                        new { Id = 19, CreatedAt = new DateTime(2018, 8, 8, 16, 25, 26, 927, DateTimeKind.Local), Email = "Jamar.Balistreri91@gmail.com", FirstName = "Naomi", IsActive = true, NotificationSettingId = 4, RoleId = 1, SecondName = "Hessel" },
                        new { Id = 20, CreatedAt = new DateTime(2018, 8, 7, 21, 22, 58, 82, DateTimeKind.Local), Email = "Diamond_McLaughlin@hotmail.com", FirstName = "Kathleen", IsActive = true, NotificationSettingId = 7, RoleId = 1, SecondName = "Lang" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = 11, OrganizationId = 73 },
                        new { UserId = 12, OrganizationId = 77 },
                        new { UserId = 13, OrganizationId = 75 },
                        new { UserId = 14, OrganizationId = 77 },
                        new { UserId = 15, OrganizationId = 74 },
                        new { UserId = 16, OrganizationId = 79 },
                        new { UserId = 17, OrganizationId = 77 },
                        new { UserId = 18, OrganizationId = 75 },
                        new { UserId = 19, OrganizationId = 75 },
                        new { UserId = 20, OrganizationId = 75 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Feedback", "Feedback")
                        .WithOne("Response")
                        .HasForeignKey("Watcher.DataAccess.Entities.Response", "FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany()
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
