// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180910135905_RemovedThemeFromUser")]
    partial class RemovedThemeFromUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 86, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 24, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 85, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 31, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 89, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 47, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 85, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 48, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 88, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 70, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 85, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 69, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 86, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 50, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 90, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 85, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 86, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 84, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 84, Gradient = false, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 96, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "3d6f3d08-21ca-4edc-9872-6742f53e84db", IsDeleted = false, Name = "cupiditate", Type = 0 },
                        new { Id = 22, CreatedById = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5", IsDeleted = false, Name = "qui", Type = 0 },
                        new { Id = 23, CreatedById = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 24, CreatedById = "727ffc07-b199-4a46-8b70-16162352ca3a", IsDeleted = false, Name = "aut", Type = 0 },
                        new { Id = 25, CreatedById = "fc75ff6e-4847-4504-8a91-d8534bad2d55", IsDeleted = false, Name = "sunt", Type = 0 },
                        new { Id = 26, CreatedById = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5", IsDeleted = false, Name = "praesentium", Type = 0 },
                        new { Id = 27, CreatedById = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", IsDeleted = false, Name = "voluptatum", Type = 0 },
                        new { Id = 28, CreatedById = "2c05f61f-2653-419a-976e-15edefe30f3c", IsDeleted = false, Name = "beatae", Type = 0 },
                        new { Id = 29, CreatedById = "4553d455-2948-46da-8851-f2cd1ba3680d", IsDeleted = false, Name = "in", Type = 0 },
                        new { Id = 30, CreatedById = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", IsDeleted = false, Name = "illo", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 10, 7, 39, 48, 417, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title555" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 9, 22, 15, 9, 577, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title749" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 10, 3, 19, 43, 168, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title2" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 10, 8, 24, 55, 769, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title186" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 9, 18, 11, 2, 248, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title149" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 10, 12, 7, 41, 204, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title100" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 10, 11, 21, 13, 424, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title958" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 10, 12, 28, 1, 383, DateTimeKind.Local), InstanceId = 80, IsDeleted = false, Title = "Title632" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 9, 21, 40, 46, 115, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title307" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 10, 15, 39, 21, 519, DateTimeKind.Local), InstanceId = 75, IsDeleted = false, Title = "Title217" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 10, 12, 47, 0, 336, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sit sunt consectetur occaecati aut ut sed sint dolor.", UserId = "4553d455-2948-46da-8851-f2cd1ba3680d", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 9, 20, 47, 14, 645, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Sapiente at consectetur quia sapiente.", UserId = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 9, 17, 20, 42, 693, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Suscipit ut architecto necessitatibus ad voluptates tempore.", UserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 10, 8, 7, 14, 180, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Architecto porro est non eius sed nihil cupiditate voluptatem.", UserId = "727ffc07-b199-4a46-8b70-16162352ca3a", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 9, 22, 19, 39, 541, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Odio ut nemo est explicabo magni eius molestias ea dolor.", UserId = "afebd73a-4f74-4256-8ab5-f05bbac8026b", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 10, 11, 42, 50, 406, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ea perferendis corporis dolore aspernatur tempore.", UserId = "afebd73a-4f74-4256-8ab5-f05bbac8026b", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 10, 13, 43, 33, 804, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aspernatur aut expedita doloremque harum quasi eveniet odio qui voluptatum.", UserId = "727ffc07-b199-4a46-8b70-16162352ca3a", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 10, 6, 9, 10, 836, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Qui culpa fuga illum ut voluptas magnam.", UserId = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 10, 5, 40, 17, 875, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dignissimos voluptatum eos odit quia minima molestiae optio quia voluptas.", UserId = "a683daa1-586f-4926-ad81-dca096d75c90", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 9, 18, 51, 30, 882, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Doloribus veritatis et voluptatem est.", UserId = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "ba:8f:47:19:9b:4b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Windows", Title = "Instance474" },
                        new { Id = 72, Address = "60:02:41:4e:ad:87", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Linux", Title = "Instance25" },
                        new { Id = 73, Address = "59:b6:e7:80:e3:ea", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 61, Platform = "Linux", Title = "Instance131" },
                        new { Id = 74, Address = "4c:de:80:e5:8a:7c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Windows", Title = "Instance116" },
                        new { Id = 75, Address = "a7:00:5a:9b:e5:d4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", Title = "Instance612" },
                        new { Id = 76, Address = "cc:cb:fd:f3:89:03", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 67, Platform = "Linux", Title = "Instance974" },
                        new { Id = 77, Address = "47:18:9b:cc:b4:82", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Linux", Title = "Instance210" },
                        new { Id = 78, Address = "b1:cc:1b:6c:dd:59", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Windows", Title = "Instance764" },
                        new { Id = 79, Address = "ce:54:07:81:6c:80", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Windows", Title = "Instance606" },
                        new { Id = 80, Address = "d4:0f:ed:eb:6e:8f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 64, Platform = "Linux", Title = "Instance362" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 25, CreatedAt = new DateTime(2018, 9, 10, 10, 17, 22, 441, DateTimeKind.Local), IsDeleted = false, Text = "Iure aliquam omnis voluptas commodi voluptatum exercitationem harum omnis.", UserId = "627a6262-4d28-4d65-99b6-f9f26c9700a9", WasRead = false },
                        new { Id = 32, ChatId = 25, CreatedAt = new DateTime(2018, 9, 10, 8, 14, 42, 975, DateTimeKind.Local), IsDeleted = false, Text = "Reprehenderit sint eligendi impedit ab.", UserId = "2c05f61f-2653-419a-976e-15edefe30f3c", WasRead = true },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 9, 10, 11, 29, 56, 199, DateTimeKind.Local), IsDeleted = false, Text = "Dolore soluta architecto eveniet eligendi facere aut.", UserId = "afebd73a-4f74-4256-8ab5-f05bbac8026b", WasRead = false },
                        new { Id = 34, ChatId = 26, CreatedAt = new DateTime(2018, 9, 9, 17, 55, 3, 681, DateTimeKind.Local), IsDeleted = false, Text = "Doloremque molestias quod reprehenderit consequatur est sit saepe sit.", UserId = "4553d455-2948-46da-8851-f2cd1ba3680d", WasRead = false },
                        new { Id = 35, ChatId = 30, CreatedAt = new DateTime(2018, 9, 10, 4, 48, 16, 233, DateTimeKind.Local), IsDeleted = false, Text = "Impedit reiciendis consequatur.", UserId = "a683daa1-586f-4926-ad81-dca096d75c90", WasRead = false },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 9, 9, 18, 25, 54, 835, DateTimeKind.Local), IsDeleted = false, Text = "Mollitia soluta ea.", UserId = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", WasRead = true },
                        new { Id = 37, ChatId = 26, CreatedAt = new DateTime(2018, 9, 10, 7, 30, 38, 233, DateTimeKind.Local), IsDeleted = false, Text = "Consectetur ipsum consectetur animi necessitatibus amet ut.", UserId = "afebd73a-4f74-4256-8ab5-f05bbac8026b", WasRead = false },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 9, 10, 11, 57, 45, 549, DateTimeKind.Local), IsDeleted = false, Text = "Laboriosam sit quisquam.", UserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db", WasRead = false },
                        new { Id = 39, ChatId = 21, CreatedAt = new DateTime(2018, 9, 10, 4, 26, 54, 359, DateTimeKind.Local), IsDeleted = false, Text = "Porro et quo.", UserId = "2c05f61f-2653-419a-976e-15edefe30f3c", WasRead = true },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 9, 10, 16, 32, 3, 814, DateTimeKind.Local), IsDeleted = false, Text = "Maiores velit fugiat.", UserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 10, 0, 12, 10, 501, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Ex necessitatibus quod sunt nesciunt excepturi illum expedita fuga.", UserId = "727ffc07-b199-4a46-8b70-16162352ca3a", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 9, 23, 26, 23, 489, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Porro eum ullam quis ipsam.", UserId = "4553d455-2948-46da-8851-f2cd1ba3680d", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 10, 12, 16, 31, 72, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Excepturi itaque quis.", UserId = "2c05f61f-2653-419a-976e-15edefe30f3c", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 10, 8, 46, 31, 293, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Incidunt enim et et recusandae sit non perspiciatis quae.", UserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 10, 11, 48, 40, 517, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 11, Text = "Modi quaerat quos doloremque provident eum doloribus.", UserId = "4553d455-2948-46da-8851-f2cd1ba3680d", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 10, 3, 8, 8, 789, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Consequatur debitis voluptas autem aut porro sapiente.", UserId = "afebd73a-4f74-4256-8ab5-f05bbac8026b", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 9, 22, 53, 14, 28, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 20, Text = "Iure accusantium excepturi quis eum corporis.", UserId = "a683daa1-586f-4926-ad81-dca096d75c90", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 10, 0, 45, 53, 132, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "Qui consequatur aut aliquam ducimus nisi nam odit.", UserId = "627a6262-4d28-4d65-99b6-f9f26c9700a9", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 10, 13, 24, 19, 411, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Voluptas inventore illo consequatur.", UserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 10, 4, 34, 47, 919, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Corrupti consequatur optio eum officiis laudantium.", UserId = "afebd73a-4f74-4256-8ab5-f05bbac8026b", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db" },
                        new { Id = 12, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "4553d455-2948-46da-8851-f2cd1ba3680d" },
                        new { Id = 13, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "2c05f61f-2653-419a-976e-15edefe30f3c" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "627a6262-4d28-4d65-99b6-f9f26c9700a9" },
                        new { Id = 15, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5" },
                        new { Id = 16, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "8f8ec893-10e4-4304-8d0c-b248ec7f4275" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "2c05f61f-2653-419a-976e-15edefe30f3c" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "(523) 495-6351", CreatedByUserId = "727ffc07-b199-4a46-8b70-16162352ca3a", Description = "Esse qui eius qui minima atque architecto voluptatum sed.", Email = "Sylvan.Mertz91@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company666", ThemeId = 2, WebSite = "https://gia.org" },
                        new { Id = 62, ContactNumber = "488.634.6635", CreatedByUserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db", Description = "Quos qui placeat quibusdam harum quos ipsam quas. Doloribus velit architecto sunt facilis in cupiditate ipsam occaecati aliquam. Et ipsa explicabo cumque quisquam voluptatum. Fuga officiis laudantium.", Email = "Clint2@gmail.com", IsActive = true, IsDeleted = false, Name = "Company137", ThemeId = 1, WebSite = "https://ruthe.info" },
                        new { Id = 63, ContactNumber = "472-270-0382 x424", CreatedByUserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db", Description = "", Email = "Amy39@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company308", ThemeId = 1, WebSite = "http://karina.net" },
                        new { Id = 64, ContactNumber = "1-288-366-7592", CreatedByUserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db", Description = "Autem consequuntur ut accusantium et possimus sit.", Email = "Lonie.Konopelski76@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company158", ThemeId = 1, WebSite = "https://samara.info" },
                        new { Id = 65, ContactNumber = "1-974-456-8341 x9018", CreatedByUserId = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", Description = "Vitae eos repellendus sed suscipit quibusdam necessitatibus saepe.", Email = "Rudolph.Dooley99@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company173", ThemeId = 1, WebSite = "http://martina.org" },
                        new { Id = 66, ContactNumber = "1-604-568-0397 x368", CreatedByUserId = "2c05f61f-2653-419a-976e-15edefe30f3c", Description = "Ut aliquid consequatur ratione. Fugiat cupiditate quos enim eius inventore. Dolore ea harum dolore maiores corrupti sequi totam voluptatum. Illo est voluptates et in maiores quis eaque.", Email = "Leanne.Turner@gmail.com", IsActive = true, IsDeleted = false, Name = "Company401", ThemeId = 1, WebSite = "https://ross.org" },
                        new { Id = 67, ContactNumber = "(779) 224-3164", CreatedByUserId = "a683daa1-586f-4926-ad81-dca096d75c90", Description = "Ullam quisquam labore occaecati. Ut sed incidunt tempora mollitia. Molestias impedit perspiciatis maxime.", Email = "Athena.Kutch67@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company688", ThemeId = 1, WebSite = "http://sofia.net" },
                        new { Id = 68, ContactNumber = "782.804.7749 x4565", CreatedByUserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db", Description = "", Email = "Shyanne86@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company476", ThemeId = 2, WebSite = "http://lexi.net" },
                        new { Id = 69, ContactNumber = "1-746-484-5379 x427", CreatedByUserId = "a683daa1-586f-4926-ad81-dca096d75c90", Description = "Beatae inventore dolorem necessitatibus nemo possimus reiciendis doloribus illum. Maiores ipsa sunt est rerum. Earum eos minima beatae. Sint omnis qui.", Email = "Nels17@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company270", ThemeId = 1, WebSite = "http://bernhard.biz" },
                        new { Id = 70, ContactNumber = "273-862-8396", CreatedByUserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55", Description = "", Email = "Rashawn_Zboncak26@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company655", ThemeId = 2, WebSite = "http://betsy.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 10, 2, 3, 49, 336, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Doloremque eaque eum veniam est.", UserId = "a683daa1-586f-4926-ad81-dca096d75c90" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 9, 22, 24, 37, 293, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Et sint sed doloremque numquam iste.", UserId = "2c05f61f-2653-419a-976e-15edefe30f3c" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 10, 15, 31, 51, 311, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Saepe omnis non et.", UserId = "727ffc07-b199-4a46-8b70-16162352ca3a" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 10, 6, 31, 31, 550, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Facere ipsa laborum rerum non ut quidem esse.", UserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 10, 15, 53, 22, 719, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Expedita facilis error placeat vero tenetur.", UserId = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 10, 7, 38, 29, 194, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Est consectetur fugiat omnis laudantium cupiditate aspernatur.", UserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 10, 1, 6, 13, 478, DateTimeKind.Local), FeedbackId = 49, IsDeleted = false, Text = "Doloribus non sunt voluptas voluptatem maiores.", UserId = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 10, 4, 49, 28, 370, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Quod eos vel.", UserId = "a683daa1-586f-4926-ad81-dca096d75c90" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 9, 20, 26, 50, 47, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Autem odit iusto itaque.", UserId = "a683daa1-586f-4926-ad81-dca096d75c90" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 10, 10, 37, 44, 468, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Consequatur assumenda beatae fugit ipsam quae.", UserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC !global", ButtonFontSize = "14px !global", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "none", ThemeSecondaryColor = "none" },
                        new { Id = 2, BodyColor = "#F8FAFC !global", ButtonFontSize = "16px !global", ControlsHeight = "38px", IsDeleted = false, Name = "Pink", ThemePrimaryColor = "#ff5a5f", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "3d6f3d08-21ca-4edc-9872-6742f53e84db", CreatedAt = new DateTime(2018, 9, 10, 15, 33, 1, 470, DateTimeKind.Local), DisplayName = "Vivianne", Email = "Kaycee.West@gmail.com", FirstName = "Keagan", IsActive = true, IsDeleted = false, LastName = "Mayert", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg", RoleId = 2 },
                        new { Id = "afebd73a-4f74-4256-8ab5-f05bbac8026b", CreatedAt = new DateTime(2018, 9, 10, 3, 1, 15, 659, DateTimeKind.Local), DisplayName = "Elvera", Email = "Shanel_Morar59@hotmail.com", FirstName = "Skylar", IsActive = true, IsDeleted = false, LastName = "Hodkiewicz", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg", RoleId = 1 },
                        new { Id = "a683daa1-586f-4926-ad81-dca096d75c90", CreatedAt = new DateTime(2018, 9, 10, 4, 27, 48, 376, DateTimeKind.Local), DisplayName = "Althea", Email = "Deondre_Senger@yahoo.com", FirstName = "Reva", IsActive = true, IsDeleted = false, LastName = "Langworth", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg", RoleId = 2 },
                        new { Id = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5", CreatedAt = new DateTime(2018, 9, 9, 21, 48, 45, 442, DateTimeKind.Local), DisplayName = "Noemy", Email = "Uriel_Koss7@yahoo.com", FirstName = "Eldred", IsActive = true, IsDeleted = false, LastName = "Pollich", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg", RoleId = 2 },
                        new { Id = "727ffc07-b199-4a46-8b70-16162352ca3a", CreatedAt = new DateTime(2018, 9, 10, 12, 21, 4, 582, DateTimeKind.Local), DisplayName = "Jerry", Email = "Royce_Connelly99@gmail.com", FirstName = "Carmella", IsActive = true, IsDeleted = false, LastName = "Nienow", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg", RoleId = 1 },
                        new { Id = "627a6262-4d28-4d65-99b6-f9f26c9700a9", CreatedAt = new DateTime(2018, 9, 9, 21, 55, 33, 215, DateTimeKind.Local), DisplayName = "Edna", Email = "Deja30@gmail.com", FirstName = "Katelyn", IsActive = true, IsDeleted = false, LastName = "Lang", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg", RoleId = 1 },
                        new { Id = "4553d455-2948-46da-8851-f2cd1ba3680d", CreatedAt = new DateTime(2018, 9, 10, 16, 21, 6, 65, DateTimeKind.Local), DisplayName = "Derrick", Email = "Camylle50@hotmail.com", FirstName = "Adell", IsActive = true, IsDeleted = false, LastName = "Carter", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg", RoleId = 2 },
                        new { Id = "fc75ff6e-4847-4504-8a91-d8534bad2d55", CreatedAt = new DateTime(2018, 9, 10, 5, 2, 59, 876, DateTimeKind.Local), DisplayName = "Nicolette", Email = "Johan_Sauer58@yahoo.com", FirstName = "Shea", IsActive = true, IsDeleted = false, LastName = "Aufderhar", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg", RoleId = 2 },
                        new { Id = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", CreatedAt = new DateTime(2018, 9, 10, 8, 14, 32, 428, DateTimeKind.Local), DisplayName = "Christ", Email = "Jessyca49@hotmail.com", FirstName = "Randall", IsActive = true, IsDeleted = false, LastName = "Kertzmann", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg", RoleId = 2 },
                        new { Id = "2c05f61f-2653-419a-976e-15edefe30f3c", CreatedAt = new DateTime(2018, 9, 9, 22, 32, 29, 49, DateTimeKind.Local), DisplayName = "Lavada", Email = "Napoleon.Connelly6@gmail.com", FirstName = "Jed", IsActive = true, IsDeleted = false, LastName = "Dicki", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "3d6f3d08-21ca-4edc-9872-6742f53e84db", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "afebd73a-4f74-4256-8ab5-f05bbac8026b", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "a683daa1-586f-4926-ad81-dca096d75c90", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "4ff77ea5-e57b-4625-94c8-549ecfaeedc5", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "727ffc07-b199-4a46-8b70-16162352ca3a", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "627a6262-4d28-4d65-99b6-f9f26c9700a9", OrganizationId = 61, OrganizationRoleId = 1 },
                        new { UserId = "4553d455-2948-46da-8851-f2cd1ba3680d", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "fc75ff6e-4847-4504-8a91-d8534bad2d55", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "8f8ec893-10e4-4304-8d0c-b248ec7f4275", OrganizationId = 62, OrganizationRoleId = 1 },
                        new { UserId = "2c05f61f-2653-419a-976e-15edefe30f3c", OrganizationId = 64, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
